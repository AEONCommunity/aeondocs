{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Aeon Documentation Please use the navbar to navigate the available documentation. There are currently three documentation pages: aeon-wallet-cli documentation aeon-wallet-rpc documentation aeond documentation","title":"Aeon Documentation"},{"location":"#aeon-documentation","text":"Please use the navbar to navigate the available documentation. There are currently three documentation pages: aeon-wallet-cli documentation aeon-wallet-rpc documentation aeond documentation","title":"Aeon Documentation"},{"location":"documentation/aeond/commands/","text":"aeond Usage ./aeond [options] [commands] Description This is the command line Aeon peer-to-peer node. It is a tool to manage network connections. Commands alt_chain_info alt_chain_info [<block_hash>] Displays alternate competing blockchains and the height at which they differ. >>> alt_chain_info 1 alternate chains found: 1 blocks long, from height 1264997 (5502 deep), diff 1746032035727893: 57519747c6f430928b39aaab4f68515640b219401ed3f8ce147ceadb1ce21e73 ban ban <IP> [<seconds>] Ban a given IP for a given amount of seconds. Omit the seconds to ban indefinitely. >>> ban 127.0.0.1 bans bans Show the currently banned IPs. bc_dyn_stats bc_dyn_stats <number_of_blocks> Prints various network related info for the previous <number_of_blocks> blocks. >>> bc_dyn_stats 60 Height: 1286123, diff 2948360170310179, cum. diff 227859514661806772567, target 240 sec Last 60: avg. diff 2966851099331183, 219 avg sec/block, avg num txes 0.533333, avg. reward 2.926493333333, median block weight 255 Block versions: 60 v9 Voting for: 60 v9 diff diff Prints the following mining related information at the present moment: pending block height (BH), highest confirmed block hash (TH), network difficulty (DIFF), and estimated network hashrate (HR). >>> diff BH: 1286123, TH: 5852f84187a1c3a2bb457c8335fba70ce1f608cb835431e3372f07104aef51fb, DIFF: 2948360170310179, HR: 12284834042959 H/s exit exit Stops the daemon process. flush_txpool flush_txpool [<tx_id>] Removes transactions from the pending transaction pool. >>> flush_txpool Pool successfully flushed hard_fork_info hard_fork_info Prints information related to hardfork version numbers and what version miners are mining on. >>> hard_fork_info version 9 enabled, 10039/10080 votes, threshold 0 current version 9, voting for version 9 help help [<cmd>] Prints the various commands and their usages. >>> help exit Command usage: exit Command description: Stop the daemon. hide_hr hide_hr When mining and hashrate logging is enabled, this can be used to disable the logging print out. >>> hide_hr Hash rate logging is off in_peers in_peers <max_number> Set the <max_number> of peers your daemon has incoming connections with. >>> in_peers 50 Max number of in peers set to 50 is_key_image_spent is_key_image_spent <key_image> Print whether a given key image is in the spent key images set. >>> is_key_image_spent 74336412b9707f51cbb8db6b0f7b64c0b79ded67d7daad567368a37d35a5019e <74336412b9707f51cbb8db6b0f7b64c0b79ded67d7daad567368a37d35a5019e>: spent limit limit [<kB/s>] Get or set the download and upload limit. >>> limit limit-down is 8192 kB/s limit-up is 2048 kB/s >>> limit 8192 Set limit-down to 8192 kB/s Set limit-up to 8192 kB/s limit_down limit_down [<kB/s>] Get or set the download limit. >>> limit_down limit-down is 8192 kB/s >>> limit_down 2048 Set limit-down to 2048 kB/s limit_up limit_up [<kB/s>] Get or set the upload limit. >>> limit_up limit_up is 8192 kB/s >>> limit_up 2048 Set limit_up to 2048 kB/s out_peers out_peers <max_number> Set the <max_number> of peers your daemon has outgoing connections with. >>> out_peers 50 Max number of out peers set to 50 output_histogram output_histogram ([@<amount>]|[<lower_bound> [<upper_bound>]]) Print the output histogram of transaction outputs. The first column is the frequency of the output and the second column is the amount in aeon. >>> output_histogram 500000 570813 1.000000000000 807641 0.500000000000 891168 10.000000000000 >>> output_histogram @400000000000 376944 0.400000000000 print_bc print_bc <begin_height> [<end_height>] Print the blockchain info in a given blocks range. >>> print_bc 100 103 height: 100, timestamp: 1402081081, size: 310, weight: 310 (long term 310), transactions: 0 major version: 1, minor version: 0 block id: 6dd13aaab16679f49ee6b2b75c7dc99b1fd09ab2282b18cb4b55b73110655742, previous block id: b81ad1606a80d2e29fe2cf7b1a3dbd232614cf73f50036b0f4eee35d83eb12c9 difficulty: 2104944, nonce 2648661871, reward 17.590508402013 height: 101, timestamp: 1402081079, size: 346, weight: 346 (long term 346), transactions: 0 major version: 1, minor version: 0 block id: df3a804ec1164436f875816e6936ddb75e592bee86a9aeca46b5a144ae0a00e8, previous block id: 6dd13aaab16679f49ee6b2b75c7dc99b1fd09ab2282b18cb4b55b73110655742 difficulty: 2108005, nonce 1955249155, reward 17.590491626397 height: 102, timestamp: 1402081110, size: 347, weight: 347 (long term 347), transactions: 0 major version: 1, minor version: 0 block id: 35908ffaef2fa8b54f81778df495ab2bfecc6a346575c9eecb95b939f00ed570, previous block id: df3a804ec1164436f875816e6936ddb75e592bee86a9aeca46b5a144ae0a00e8 difficulty: 2144783, nonce 800540195, reward 17.590474850797 height: 103, timestamp: 1402081172, size: 347, weight: 347 (long term 347), transactions: 0 major version: 1, minor version: 0 block id: 62fd2e1c1c7e6a2fceba8e76f8f81178c0e5cba936bc46525af2a6d0c784f040, previous block id: 35908ffaef2fa8b54f81778df495ab2bfecc6a346575c9eecb95b939f00ed570 difficulty: 2163955, nonce 1954583209, reward 17.590458075213 print_block print_block <block_number> Prints raw information about a given block. >>> print_block 100 timestamp: 1402081081 previous hash: b81ad1606a80d2e29fe2cf7b1a3dbd232614cf73f50036b0f4eee35d83eb12c9 nonce: 2648661871 is orphan: 0 height: 100 depth: 1286027 hash: 6dd13aaab16679f49ee6b2b75c7dc99b1fd09ab2282b18cb4b55b73110655742 difficulty: 2104944 POW hash: 5105c0d305fa2db326330c583647762fc76e3f08c820b55a9d0921d4de050000 block size: 310 block weight: 310 long term weight: 310 num txes: 0 reward: 17.590508402013 { \"major_version\": 1, \"minor_version\": 0, \"timestamp\": 1402081081, \"prev_id\": \"b81ad1606a80d2e29fe2cf7b1a3dbd232614cf73f50036b0f4eee35d83eb12c9\", \"nonce\": 2648661871, \"miner_tx\": { \"version\": 1, \"unlock_time\": 160, \"vin\": [ { \"gen\": { \"height\": 100 } } ], \"vout\": [ { \"amount\": 402013, \"target\": { \"key\": \"81ce0f45c10bce3d6ff85fc318933cbe6e456f80891ccf410b3b0c26f8abf45d\" } }, { \"amount\": 8000000, \"target\": { \"key\": \"f6ba955736ec1d6a603c26fc39624ecc6814201de1e9bd76cb40237df97a9d74\" } }, { \"amount\": 500000000, \"target\": { \"key\": \"18a7eeeb235fecbead4cdc47e017cbe560934c605a7b5696673bb255c5932015\" } }, { \"amount\": 90000000000, \"target\": { \"key\": \"e4a881761a5a3b3aa83eabe329f97a3918fe0d3045a0af58bb260cb9677f62d6\" } }, { \"amount\": 500000000000, \"target\": { \"key\": \"ba3c12abe756f9294e11170a154a15798505baeebdf4f1f1ae2240cc4140d4ce\" } }, { \"amount\": 7000000000000, \"target\": { \"key\": \"4965688f9fe2d925785f9a77177a11aa15f81aa47fd2ffa443bb528161760db7\" } }, { \"amount\": 10000000000000, \"target\": { \"key\": \"ddccdd7016d44335525a98729c685b9abb78ebc5f409591426b965f9a54d52b4\" } } ], \"extra\": [ 1, 211, 183, 59, 244, 246, 74, 155, 242, 110, 74, 9, 6, 164, 186, 214, 213, 16, 85, 232, 90, 205, 30, 158, 37, 243, 123, 55, 171, 145, 3, 33, 194 ], \"signatures\": [ ] }, \"tx_hashes\": [ ] } print_cn print_cn Shows peer connection information. >>> print_cn Remote Host Peer id Support Flags Recv/Sent (inactive,sec) State Livetime(sec) Down (kB/s) Down(now) Up (kB/s) Up(now) OUT xxx.xxx.xxx.xxx:11180 a619756425250d4e 1 24441(97)/1033(8) normal 98 0 2 0 0 OUT xxx.xxx.xxx.xxx:11180 82fce994b2232ba7 1 25102(8)/1654(10) normal 99 0 0 0 0 OUT xxx.xxx.xxx.xxx:20111 574b999fa8fc68c3 1 8702(8)/2165(8) normal 99 0 0 0 0 print_coinbase_tx_sum print_coinbase_tx_sum <start_height> <block_count> Print the sum of coinbase transactions. >>> print_coinbase_tx_sum 100 3 Sum of coinbase transactions between block heights [100, 103) is 52.771474879207 consisting of 52.771474879207 in emissions, and 0.000000000000 in fees print_height print_height Prints the total number of mined blocks. >>> print_height 1286130 print_pl print_pl Peer list historical information. Column headers are: white/gray peer|Peer ID|IP address|elapsed time since last seen . White peers are online and reachable and grey peers are offline. >>> print_pl ... white ef7e60xxxxxxx881 xxx.110.xxx.146:11180 d79.h0.m22.s20 white 9eae3xxxx3b32ed4 xxx.63.xxx.22:11180 d79.h7.m38.s6 white ad9xxxxxxfe6a73e xxx.45.xxx.241:32404 d79.h9.m11.s29 white 70da0187xxxx7656 xxx.142.xxx.104:11180 d79.h15.m37.s36 gray 2ddac6xxxx8cc587 xxx.201.xxx.248:11180 d0.h0.m4.s59 gray 9125218xxxx065bd xxx.145.xxx.4:11180 d0.h1.m36.s6 gray e40da7xxxx21f7b1 xxx.126.xxx.94:11180 d1.h3.m40.s2 gray d6b4738bxxxx3c7f xxx.160.xxx.83:11180 d1.h13.m34.s25 ... print_pl_stats print_pl_stats Print peer list counts and limits. >>> print_pl_stats White list size: 235/1000 (23.5%) Gray list size: 486/5000 (9.72%) print_pool print_pool Print the transaction pool using a long format. print_pool_sh print_pool_sh Print transaction pool using a short format. print_pool_stats print_pool_stats Print various transaction pool information. >>> print_pool_stats 0 tx(es), 0 bytes total (min 0, max 0, avg 0, median 0) fees 0.000000000000 (avg 0.000000000000 per tx, 0.000000000000 per byte) 0 double spends, 0 not relayed, 0 failing, 0 older than 10 minutes (oldest -), no backlo print_status print_status status for non-interactive mode. print_tx print_tx <tx_hash> [+hex] [+json] Find a transaction by hash and show information using +hex or +json . >>> print_tx 0b3aef5340883a313522df41a6534ce05c43c62abfb8861b804727dfd89d57c6 +hex +json Found in blockchain at height 1286136 01b4c04e01fff8bf4e058090bcfd02028bc55b44ca98800e93fc2aae1fce11cc37c8be36940d1fa2d85c3d7f03e156b8808cee891a029c4a1ed54864faf461feef6677e246de5b13a2b17aa3d34c3a477894c091569b80d88ee16f025cd087417aa17ccd4b8baead77780ed9b9132c4875480a0f012c4553ddff96418080dd9da41702116cb270c89667ee374011fb77bc0af813e9fed7e41db91c0d938a06087dff5280c0a8ca9a3a02a50b58d5ff5c87b1d87ad6d5af31b3975251b77751b4898b1c51e1ab58fc5d7634011a83442004f6ce96d32ff3129d721d9bdcc790164c3801b0285deec44f47e91e02110000000306d0ef9f000000000000000000 { \"version\": 1, \"unlock_time\": 1286196, \"vin\": [ { \"gen\": { \"height\": 1286136 } } ], \"vout\": [ { \"amount\": 800000000, \"target\": { \"key\": \"8bc55b44ca98800e93fc2aae1fce11cc37c8be36940d1fa2d85c3d7f03e156b8\" } }, { \"amount\": 7000000000, \"target\": { \"key\": \"9c4a1ed54864faf461feef6677e246de5b13a2b17aa3d34c3a477894c091569b\" } }, { \"amount\": 30000000000, \"target\": { \"key\": \"5cd087417aa17ccd4b8baead77780ed9b9132c4875480a0f012c4553ddff9641\" } }, { \"amount\": 800000000000, \"target\": { \"key\": \"116cb270c89667ee374011fb77bc0af813e9fed7e41db91c0d938a06087dff52\" } }, { \"amount\": 2000000000000, \"target\": { \"key\": \"a50b58d5ff5c87b1d87ad6d5af31b3975251b77751b4898b1c51e1ab58fc5d76\" } } ], \"extra\": [ 1, 26, 131, 68, 32, 4, 246, 206, 150, 211, 47, 243, 18, 157, 114, 29, 155, 220, 199, 144, 22, 76, 56, 1, 176, 40, 93, 238, 196, 79, 71, 233, 30, 2, 17, 0, 0, 0, 3, 6, 208, 239, 159, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], \"signatures\": [ ] } relay_tx relay_tx <txid> Relay a transaction based on its id. save save Save the blockchain. >>> save Blockchain saved set_log set_log <level>|<{+,-,}categories> Aeon source code has five log levels: 0 ERROR, 1 WARN, 2 INFO, 3 DEBUG, 4 TRACE . Each of the higher log levels contains the log levels below them. So for example set_log 3 will display levels 0, 1, 2, and 3. To restrict the log to a specific category, you can use the following example set_log net.p2p:INFO . This will log all ERROR, WARN, and INFO only for net.p2p. To view all net.p2p logs use net.p2p:TRACE as that will log all lower levels. >>> set_log net.p2p:TRACE Log categories are now net.p2p:TRACE 2020-11-29 17:08:11.624 [P2P0] DEBUG net.p2p contrib/epee/src/connection_basic.cpp:177 2020-11-29 17:08:11.625 [P2P0] INFO net.p2p src/p2p/net_node.inl:941 2020-11-29 17:08:11.625 [P2P0] DEBUG net.p2p src/p2p/net_node.inl:1140 2020-11-29 17:08:11.625 [P2P0] DEBUG net.p2p src/p2p/net_node.inl:1122 2020-11-29 17:08:11.625 [P2P0] DEBUG net.p2p src/p2p/net_node.inl:1137 2020-11-29 17:08:11.625 [P2P0] DEBUG net.p2p src/p2p/net_node.inl:925 2020-11-29 17:08:11.625 [P2P0] DEBUG net.p2p contrib/epee/src/connection_basic.cpp:169 2020-11-29 17:08:16.626 [P2P0] DEBUG net.p2p contrib/epee/src/connection_basic.cpp:177 2020-11-29 17:08:16.626 [P2P0] INFO net.p2p src/p2p/net_node.inl:941 2020-11-29 17:08:16.626 [P2P0] DEBUG net.p2p src/p2p/net_node.inl:1140 2020-11-29 17:08:16.626 [P2P0] DEBUG net.p2p src/p2p/net_node.inl:1122 2020-11-29 17:08:16.626 [P2P0] DEBUG net.p2p src/p2p/net_node.inl:1137 2020-11-29 17:08:16.626 [P2P0] DEBUG net.p2p src/p2p/net_node.inl:925 2020-11-29 17:08:16.627 [P2P0] DEBUG net.p2p contrib/epee/src/connection_basic.cpp:169 >>> set_log net.p2p:NONE Log categories are now net.p2p:NONE show_hr show_hr If mining, hashrate info will begin to be printed to the console at a regular interval. >>> show_hr Hash rate logging is on hashrate: 321685.937540986 start_mining start_mining <addr> [<threads>] Spawns mining process. >>> start_mining WmtFPiaD2d4gM2TbrU1vYdZABqoVzYBicGPfXfSRMY2QYWRscJPDPDy67y1oiU3CYNhXCnKwn6aDpVGuX2nqcp5D1HWr2N7mg 1 2020-11-29 15:18:26.411 7f65467fc700 WARN miner src/cryptonote_basic/miner.cpp:325 Mining has started with 1 threads, good luck! 2020-11-29 15:18:26.411 [miner 0] INFO global src/cryptonote_basic/miner.cpp:441 Miner thread was started [0] status status Prints various network related information. >>> status Height: 1286128/1286128 (100.0%) on mainnet, not mining, net hash 12.23 TH/s, v9, 0(out)+0(in) connections, uptime 0d 0h 1m 9s stop_daemon stop_daemon Stops the daemon process. stop_mining stop_mining Halts the mining process. >>> stop_mining 2020-11-29 15:41:12.639 [miner 0] INFO global src/cryptonote_basic/miner.cpp:510 Miner thread stopped [0] Mining stopped sync_info sync_info Prints network sychronization information. >>> sync_info Height: 1286139, target: 1286139 (100%) Downloading at 0 kB/s 1 peers 168.119.38.182:49802 22591ed177acf57b normal 1286139 0 kB/s, 0 blocks / 0 MB queued 0 spans, 0 MB unban unban <IP> Unban a given IP. >>> unban 127.0.0.1 version version Print the software version you are using. >>> version Aeon 'Chronos' (v0.14.1.0-release)","title":"Commands"},{"location":"documentation/aeond/commands/#aeond","text":"","title":"aeond"},{"location":"documentation/aeond/commands/#usage","text":"./aeond [options] [commands]","title":"Usage"},{"location":"documentation/aeond/commands/#description","text":"This is the command line Aeon peer-to-peer node. It is a tool to manage network connections.","title":"Description"},{"location":"documentation/aeond/commands/#commands","text":"","title":"Commands"},{"location":"documentation/aeond/commands/#alt_chain_info","text":"alt_chain_info [<block_hash>] Displays alternate competing blockchains and the height at which they differ. >>> alt_chain_info 1 alternate chains found: 1 blocks long, from height 1264997 (5502 deep), diff 1746032035727893: 57519747c6f430928b39aaab4f68515640b219401ed3f8ce147ceadb1ce21e73","title":"alt_chain_info"},{"location":"documentation/aeond/commands/#ban","text":"ban <IP> [<seconds>] Ban a given IP for a given amount of seconds. Omit the seconds to ban indefinitely. >>> ban 127.0.0.1","title":"ban"},{"location":"documentation/aeond/commands/#bans","text":"bans Show the currently banned IPs.","title":"bans"},{"location":"documentation/aeond/commands/#bc_dyn_stats","text":"bc_dyn_stats <number_of_blocks> Prints various network related info for the previous <number_of_blocks> blocks. >>> bc_dyn_stats 60 Height: 1286123, diff 2948360170310179, cum. diff 227859514661806772567, target 240 sec Last 60: avg. diff 2966851099331183, 219 avg sec/block, avg num txes 0.533333, avg. reward 2.926493333333, median block weight 255 Block versions: 60 v9 Voting for: 60 v9","title":"bc_dyn_stats"},{"location":"documentation/aeond/commands/#diff","text":"diff Prints the following mining related information at the present moment: pending block height (BH), highest confirmed block hash (TH), network difficulty (DIFF), and estimated network hashrate (HR). >>> diff BH: 1286123, TH: 5852f84187a1c3a2bb457c8335fba70ce1f608cb835431e3372f07104aef51fb, DIFF: 2948360170310179, HR: 12284834042959 H/s","title":"diff"},{"location":"documentation/aeond/commands/#exit","text":"exit Stops the daemon process.","title":"exit"},{"location":"documentation/aeond/commands/#flush_txpool","text":"flush_txpool [<tx_id>] Removes transactions from the pending transaction pool. >>> flush_txpool Pool successfully flushed","title":"flush_txpool"},{"location":"documentation/aeond/commands/#hard_fork_info","text":"hard_fork_info Prints information related to hardfork version numbers and what version miners are mining on. >>> hard_fork_info version 9 enabled, 10039/10080 votes, threshold 0 current version 9, voting for version 9","title":"hard_fork_info"},{"location":"documentation/aeond/commands/#help","text":"help [<cmd>] Prints the various commands and their usages. >>> help exit Command usage: exit Command description: Stop the daemon.","title":"help"},{"location":"documentation/aeond/commands/#hide_hr","text":"hide_hr When mining and hashrate logging is enabled, this can be used to disable the logging print out. >>> hide_hr Hash rate logging is off","title":"hide_hr"},{"location":"documentation/aeond/commands/#in_peers","text":"in_peers <max_number> Set the <max_number> of peers your daemon has incoming connections with. >>> in_peers 50 Max number of in peers set to 50","title":"in_peers"},{"location":"documentation/aeond/commands/#is_key_image_spent","text":"is_key_image_spent <key_image> Print whether a given key image is in the spent key images set. >>> is_key_image_spent 74336412b9707f51cbb8db6b0f7b64c0b79ded67d7daad567368a37d35a5019e <74336412b9707f51cbb8db6b0f7b64c0b79ded67d7daad567368a37d35a5019e>: spent","title":"is_key_image_spent"},{"location":"documentation/aeond/commands/#limit","text":"limit [<kB/s>] Get or set the download and upload limit. >>> limit limit-down is 8192 kB/s limit-up is 2048 kB/s >>> limit 8192 Set limit-down to 8192 kB/s Set limit-up to 8192 kB/s","title":"limit"},{"location":"documentation/aeond/commands/#limit_down","text":"limit_down [<kB/s>] Get or set the download limit. >>> limit_down limit-down is 8192 kB/s >>> limit_down 2048 Set limit-down to 2048 kB/s","title":"limit_down"},{"location":"documentation/aeond/commands/#limit_up","text":"limit_up [<kB/s>] Get or set the upload limit. >>> limit_up limit_up is 8192 kB/s >>> limit_up 2048 Set limit_up to 2048 kB/s","title":"limit_up"},{"location":"documentation/aeond/commands/#out_peers","text":"out_peers <max_number> Set the <max_number> of peers your daemon has outgoing connections with. >>> out_peers 50 Max number of out peers set to 50","title":"out_peers"},{"location":"documentation/aeond/commands/#output_histogram","text":"output_histogram ([@<amount>]|[<lower_bound> [<upper_bound>]]) Print the output histogram of transaction outputs. The first column is the frequency of the output and the second column is the amount in aeon. >>> output_histogram 500000 570813 1.000000000000 807641 0.500000000000 891168 10.000000000000 >>> output_histogram @400000000000 376944 0.400000000000","title":"output_histogram"},{"location":"documentation/aeond/commands/#print_bc","text":"print_bc <begin_height> [<end_height>] Print the blockchain info in a given blocks range. >>> print_bc 100 103 height: 100, timestamp: 1402081081, size: 310, weight: 310 (long term 310), transactions: 0 major version: 1, minor version: 0 block id: 6dd13aaab16679f49ee6b2b75c7dc99b1fd09ab2282b18cb4b55b73110655742, previous block id: b81ad1606a80d2e29fe2cf7b1a3dbd232614cf73f50036b0f4eee35d83eb12c9 difficulty: 2104944, nonce 2648661871, reward 17.590508402013 height: 101, timestamp: 1402081079, size: 346, weight: 346 (long term 346), transactions: 0 major version: 1, minor version: 0 block id: df3a804ec1164436f875816e6936ddb75e592bee86a9aeca46b5a144ae0a00e8, previous block id: 6dd13aaab16679f49ee6b2b75c7dc99b1fd09ab2282b18cb4b55b73110655742 difficulty: 2108005, nonce 1955249155, reward 17.590491626397 height: 102, timestamp: 1402081110, size: 347, weight: 347 (long term 347), transactions: 0 major version: 1, minor version: 0 block id: 35908ffaef2fa8b54f81778df495ab2bfecc6a346575c9eecb95b939f00ed570, previous block id: df3a804ec1164436f875816e6936ddb75e592bee86a9aeca46b5a144ae0a00e8 difficulty: 2144783, nonce 800540195, reward 17.590474850797 height: 103, timestamp: 1402081172, size: 347, weight: 347 (long term 347), transactions: 0 major version: 1, minor version: 0 block id: 62fd2e1c1c7e6a2fceba8e76f8f81178c0e5cba936bc46525af2a6d0c784f040, previous block id: 35908ffaef2fa8b54f81778df495ab2bfecc6a346575c9eecb95b939f00ed570 difficulty: 2163955, nonce 1954583209, reward 17.590458075213","title":"print_bc"},{"location":"documentation/aeond/commands/#print_block","text":"print_block <block_number> Prints raw information about a given block. >>> print_block 100 timestamp: 1402081081 previous hash: b81ad1606a80d2e29fe2cf7b1a3dbd232614cf73f50036b0f4eee35d83eb12c9 nonce: 2648661871 is orphan: 0 height: 100 depth: 1286027 hash: 6dd13aaab16679f49ee6b2b75c7dc99b1fd09ab2282b18cb4b55b73110655742 difficulty: 2104944 POW hash: 5105c0d305fa2db326330c583647762fc76e3f08c820b55a9d0921d4de050000 block size: 310 block weight: 310 long term weight: 310 num txes: 0 reward: 17.590508402013 { \"major_version\": 1, \"minor_version\": 0, \"timestamp\": 1402081081, \"prev_id\": \"b81ad1606a80d2e29fe2cf7b1a3dbd232614cf73f50036b0f4eee35d83eb12c9\", \"nonce\": 2648661871, \"miner_tx\": { \"version\": 1, \"unlock_time\": 160, \"vin\": [ { \"gen\": { \"height\": 100 } } ], \"vout\": [ { \"amount\": 402013, \"target\": { \"key\": \"81ce0f45c10bce3d6ff85fc318933cbe6e456f80891ccf410b3b0c26f8abf45d\" } }, { \"amount\": 8000000, \"target\": { \"key\": \"f6ba955736ec1d6a603c26fc39624ecc6814201de1e9bd76cb40237df97a9d74\" } }, { \"amount\": 500000000, \"target\": { \"key\": \"18a7eeeb235fecbead4cdc47e017cbe560934c605a7b5696673bb255c5932015\" } }, { \"amount\": 90000000000, \"target\": { \"key\": \"e4a881761a5a3b3aa83eabe329f97a3918fe0d3045a0af58bb260cb9677f62d6\" } }, { \"amount\": 500000000000, \"target\": { \"key\": \"ba3c12abe756f9294e11170a154a15798505baeebdf4f1f1ae2240cc4140d4ce\" } }, { \"amount\": 7000000000000, \"target\": { \"key\": \"4965688f9fe2d925785f9a77177a11aa15f81aa47fd2ffa443bb528161760db7\" } }, { \"amount\": 10000000000000, \"target\": { \"key\": \"ddccdd7016d44335525a98729c685b9abb78ebc5f409591426b965f9a54d52b4\" } } ], \"extra\": [ 1, 211, 183, 59, 244, 246, 74, 155, 242, 110, 74, 9, 6, 164, 186, 214, 213, 16, 85, 232, 90, 205, 30, 158, 37, 243, 123, 55, 171, 145, 3, 33, 194 ], \"signatures\": [ ] }, \"tx_hashes\": [ ] }","title":"print_block"},{"location":"documentation/aeond/commands/#print_cn","text":"print_cn Shows peer connection information. >>> print_cn Remote Host Peer id Support Flags Recv/Sent (inactive,sec) State Livetime(sec) Down (kB/s) Down(now) Up (kB/s) Up(now) OUT xxx.xxx.xxx.xxx:11180 a619756425250d4e 1 24441(97)/1033(8) normal 98 0 2 0 0 OUT xxx.xxx.xxx.xxx:11180 82fce994b2232ba7 1 25102(8)/1654(10) normal 99 0 0 0 0 OUT xxx.xxx.xxx.xxx:20111 574b999fa8fc68c3 1 8702(8)/2165(8) normal 99 0 0 0 0","title":"print_cn"},{"location":"documentation/aeond/commands/#print_coinbase_tx_sum","text":"print_coinbase_tx_sum <start_height> <block_count> Print the sum of coinbase transactions. >>> print_coinbase_tx_sum 100 3 Sum of coinbase transactions between block heights [100, 103) is 52.771474879207 consisting of 52.771474879207 in emissions, and 0.000000000000 in fees","title":"print_coinbase_tx_sum"},{"location":"documentation/aeond/commands/#print_height","text":"print_height Prints the total number of mined blocks. >>> print_height 1286130","title":"print_height"},{"location":"documentation/aeond/commands/#print_pl","text":"print_pl Peer list historical information. Column headers are: white/gray peer|Peer ID|IP address|elapsed time since last seen . White peers are online and reachable and grey peers are offline. >>> print_pl ... white ef7e60xxxxxxx881 xxx.110.xxx.146:11180 d79.h0.m22.s20 white 9eae3xxxx3b32ed4 xxx.63.xxx.22:11180 d79.h7.m38.s6 white ad9xxxxxxfe6a73e xxx.45.xxx.241:32404 d79.h9.m11.s29 white 70da0187xxxx7656 xxx.142.xxx.104:11180 d79.h15.m37.s36 gray 2ddac6xxxx8cc587 xxx.201.xxx.248:11180 d0.h0.m4.s59 gray 9125218xxxx065bd xxx.145.xxx.4:11180 d0.h1.m36.s6 gray e40da7xxxx21f7b1 xxx.126.xxx.94:11180 d1.h3.m40.s2 gray d6b4738bxxxx3c7f xxx.160.xxx.83:11180 d1.h13.m34.s25 ...","title":"print_pl"},{"location":"documentation/aeond/commands/#print_pl_stats","text":"print_pl_stats Print peer list counts and limits. >>> print_pl_stats White list size: 235/1000 (23.5%) Gray list size: 486/5000 (9.72%)","title":"print_pl_stats"},{"location":"documentation/aeond/commands/#print_pool","text":"print_pool Print the transaction pool using a long format.","title":"print_pool"},{"location":"documentation/aeond/commands/#print_pool_sh","text":"print_pool_sh Print transaction pool using a short format.","title":"print_pool_sh"},{"location":"documentation/aeond/commands/#print_pool_stats","text":"print_pool_stats Print various transaction pool information. >>> print_pool_stats 0 tx(es), 0 bytes total (min 0, max 0, avg 0, median 0) fees 0.000000000000 (avg 0.000000000000 per tx, 0.000000000000 per byte) 0 double spends, 0 not relayed, 0 failing, 0 older than 10 minutes (oldest -), no backlo","title":"print_pool_stats"},{"location":"documentation/aeond/commands/#print_status","text":"print_status status for non-interactive mode.","title":"print_status"},{"location":"documentation/aeond/commands/#print_tx","text":"print_tx <tx_hash> [+hex] [+json] Find a transaction by hash and show information using +hex or +json . >>> print_tx 0b3aef5340883a313522df41a6534ce05c43c62abfb8861b804727dfd89d57c6 +hex +json Found in blockchain at height 1286136 01b4c04e01fff8bf4e058090bcfd02028bc55b44ca98800e93fc2aae1fce11cc37c8be36940d1fa2d85c3d7f03e156b8808cee891a029c4a1ed54864faf461feef6677e246de5b13a2b17aa3d34c3a477894c091569b80d88ee16f025cd087417aa17ccd4b8baead77780ed9b9132c4875480a0f012c4553ddff96418080dd9da41702116cb270c89667ee374011fb77bc0af813e9fed7e41db91c0d938a06087dff5280c0a8ca9a3a02a50b58d5ff5c87b1d87ad6d5af31b3975251b77751b4898b1c51e1ab58fc5d7634011a83442004f6ce96d32ff3129d721d9bdcc790164c3801b0285deec44f47e91e02110000000306d0ef9f000000000000000000 { \"version\": 1, \"unlock_time\": 1286196, \"vin\": [ { \"gen\": { \"height\": 1286136 } } ], \"vout\": [ { \"amount\": 800000000, \"target\": { \"key\": \"8bc55b44ca98800e93fc2aae1fce11cc37c8be36940d1fa2d85c3d7f03e156b8\" } }, { \"amount\": 7000000000, \"target\": { \"key\": \"9c4a1ed54864faf461feef6677e246de5b13a2b17aa3d34c3a477894c091569b\" } }, { \"amount\": 30000000000, \"target\": { \"key\": \"5cd087417aa17ccd4b8baead77780ed9b9132c4875480a0f012c4553ddff9641\" } }, { \"amount\": 800000000000, \"target\": { \"key\": \"116cb270c89667ee374011fb77bc0af813e9fed7e41db91c0d938a06087dff52\" } }, { \"amount\": 2000000000000, \"target\": { \"key\": \"a50b58d5ff5c87b1d87ad6d5af31b3975251b77751b4898b1c51e1ab58fc5d76\" } } ], \"extra\": [ 1, 26, 131, 68, 32, 4, 246, 206, 150, 211, 47, 243, 18, 157, 114, 29, 155, 220, 199, 144, 22, 76, 56, 1, 176, 40, 93, 238, 196, 79, 71, 233, 30, 2, 17, 0, 0, 0, 3, 6, 208, 239, 159, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], \"signatures\": [ ] }","title":"print_tx"},{"location":"documentation/aeond/commands/#relay_tx","text":"relay_tx <txid> Relay a transaction based on its id.","title":"relay_tx"},{"location":"documentation/aeond/commands/#save","text":"save Save the blockchain. >>> save Blockchain saved","title":"save"},{"location":"documentation/aeond/commands/#set_log","text":"set_log <level>|<{+,-,}categories> Aeon source code has five log levels: 0 ERROR, 1 WARN, 2 INFO, 3 DEBUG, 4 TRACE . Each of the higher log levels contains the log levels below them. So for example set_log 3 will display levels 0, 1, 2, and 3. To restrict the log to a specific category, you can use the following example set_log net.p2p:INFO . This will log all ERROR, WARN, and INFO only for net.p2p. To view all net.p2p logs use net.p2p:TRACE as that will log all lower levels. >>> set_log net.p2p:TRACE Log categories are now net.p2p:TRACE 2020-11-29 17:08:11.624 [P2P0] DEBUG net.p2p contrib/epee/src/connection_basic.cpp:177 2020-11-29 17:08:11.625 [P2P0] INFO net.p2p src/p2p/net_node.inl:941 2020-11-29 17:08:11.625 [P2P0] DEBUG net.p2p src/p2p/net_node.inl:1140 2020-11-29 17:08:11.625 [P2P0] DEBUG net.p2p src/p2p/net_node.inl:1122 2020-11-29 17:08:11.625 [P2P0] DEBUG net.p2p src/p2p/net_node.inl:1137 2020-11-29 17:08:11.625 [P2P0] DEBUG net.p2p src/p2p/net_node.inl:925 2020-11-29 17:08:11.625 [P2P0] DEBUG net.p2p contrib/epee/src/connection_basic.cpp:169 2020-11-29 17:08:16.626 [P2P0] DEBUG net.p2p contrib/epee/src/connection_basic.cpp:177 2020-11-29 17:08:16.626 [P2P0] INFO net.p2p src/p2p/net_node.inl:941 2020-11-29 17:08:16.626 [P2P0] DEBUG net.p2p src/p2p/net_node.inl:1140 2020-11-29 17:08:16.626 [P2P0] DEBUG net.p2p src/p2p/net_node.inl:1122 2020-11-29 17:08:16.626 [P2P0] DEBUG net.p2p src/p2p/net_node.inl:1137 2020-11-29 17:08:16.626 [P2P0] DEBUG net.p2p src/p2p/net_node.inl:925 2020-11-29 17:08:16.627 [P2P0] DEBUG net.p2p contrib/epee/src/connection_basic.cpp:169 >>> set_log net.p2p:NONE Log categories are now net.p2p:NONE","title":"set_log"},{"location":"documentation/aeond/commands/#show_hr","text":"show_hr If mining, hashrate info will begin to be printed to the console at a regular interval. >>> show_hr Hash rate logging is on hashrate: 321685.937540986","title":"show_hr"},{"location":"documentation/aeond/commands/#start_mining","text":"start_mining <addr> [<threads>] Spawns mining process. >>> start_mining WmtFPiaD2d4gM2TbrU1vYdZABqoVzYBicGPfXfSRMY2QYWRscJPDPDy67y1oiU3CYNhXCnKwn6aDpVGuX2nqcp5D1HWr2N7mg 1 2020-11-29 15:18:26.411 7f65467fc700 WARN miner src/cryptonote_basic/miner.cpp:325 Mining has started with 1 threads, good luck! 2020-11-29 15:18:26.411 [miner 0] INFO global src/cryptonote_basic/miner.cpp:441 Miner thread was started [0]","title":"start_mining"},{"location":"documentation/aeond/commands/#status","text":"status Prints various network related information. >>> status Height: 1286128/1286128 (100.0%) on mainnet, not mining, net hash 12.23 TH/s, v9, 0(out)+0(in) connections, uptime 0d 0h 1m 9s","title":"status"},{"location":"documentation/aeond/commands/#stop_daemon","text":"stop_daemon Stops the daemon process.","title":"stop_daemon"},{"location":"documentation/aeond/commands/#stop_mining","text":"stop_mining Halts the mining process. >>> stop_mining 2020-11-29 15:41:12.639 [miner 0] INFO global src/cryptonote_basic/miner.cpp:510 Miner thread stopped [0] Mining stopped","title":"stop_mining"},{"location":"documentation/aeond/commands/#sync_info","text":"sync_info Prints network sychronization information. >>> sync_info Height: 1286139, target: 1286139 (100%) Downloading at 0 kB/s 1 peers 168.119.38.182:49802 22591ed177acf57b normal 1286139 0 kB/s, 0 blocks / 0 MB queued 0 spans, 0 MB","title":"sync_info"},{"location":"documentation/aeond/commands/#unban","text":"unban <IP> Unban a given IP. >>> unban 127.0.0.1","title":"unban"},{"location":"documentation/aeond/commands/#version","text":"version Print the software version you are using. >>> version Aeon 'Chronos' (v0.14.1.0-release)","title":"version"},{"location":"documentation/aeond/options/","text":"aeond Usage ./aeond [options] [commands] Description These are the options for the Aeon peer-to-peer node. They will configure how the node operates. Options config-file config-file=<path> Specify a config file to load options from. An example config file is shown below. # /path/to/file/aeond.conf daemon-address=192.168.0.1:9149 daemon-login=user:rpcpassword trusted-daemon=1 password=walletpassword Then launch wallet-cli with the following command: ./aeond --config-file=/path/to/file/aeond.conf help help Produce a help message with this list available options. bootstrap-daemon-address bootstrap-daemon-address=<ip_address>:<port> URL of a 'bootstrap' remote daemon that the connected wallets can use while this daemon is still not fully synced. ./aeond --bootstrap-daemon-address=127.0.0.1:11180 bootstrap-daemon-login bootstrap-daemon-login=<username>:<password> Specify username:password for the bootstrap daemon login. ./aeond --bootstrap-daemon-address=127.0.0.1:11180 --bootstrap-daemon-login=someuser:theirpassword data-dir data-dir=<path> Specify data directory to store the blockchain data base information. ./aeond --data-dir=/path/to/some/directory db-salvage db-salvage[=<1|0>] Try to salvage a blockchain database if it seems corrupted. db-sync-mode db-sync-mode=[safe|fast|fastest]:[sync|async]:[<blocks_per_sync>[blocks]|<bytes_per_sync>[bytes]] Specify sync option. ./aeond --db-sync-mode=fast:async:250000000bytes db-type db-type=<type> Specify database type, available: lmdb . fast-block-sync fsat-block-sync[=<1|0>] Sync up most of the way by using block hashes stored in source code. block-sync-size block-sync-size=<number_of_blocks> Limit how many blocks to sync at once during chain synchronization. 0 is an adaptive setting which will change dynamically. max-txpool-weight max-txpool-weight=<number_of_bytes> Set maximum pending transaction pool size in bytes. in-peers in-peers=<number_of_peers> Set the maximum number of incoming peers connecting to your node. out-peers out-peers=<number_of_peers> Set the maximum number of outgoing peers you are connecting to. limit limit=<kB/s> Set both the download and upload limit. >>> limit limit-down is 8192 kB/s limit-up is 2048 kB/s >>> limit 8192 Set limit-down to 8192 kB/s Set limit-up to 8192 kB/s limit-rate-down limit-rate-down=<kB/s> Set the download limit. >>> limit_down limit-down is 8192 kB/s >>> limit_down 2048 Set limit-down to 2048 kB/s limit-rate-up limit-rate-up=<kB/s> Set the upload limit. >>> limit_up limit_up is 8192 kB/s >>> limit_up 2048 Set limit_up to 2048 kB/s max-concurrency max-concurrency=<number_of_cpu_threads> Set maximum number of CPU threads used by the daemon process for syncronizing blocks and processing transactions. prep-blocks-threads=<number_of_cpu_threads> prep-blocks-threads log-file log-file=<path> The path to be used for the log file. Default argument: aeon-wallet-cli.log max-log-file-size max-log-file-size=<bytes> Maximum log file size in bytes. Default argument: 104850000 max-log-files max-log-files=<number> Maximum number of rotated log files to be saved (no limit by setting to 0). Default argument: 50 log-level log-level=<level|category> Aeon source code has five log levels: 0 ERROR, 1 WARN, 2 INFO, 3 DEBUG, 4 TRACE. Each of the higher log levels contains the log levels below them. So for example --log-level=3 will display levels 0, 1, 2, and 3. To restrict the log to a specific category, you can use the following example --log-level=net.p2p:INFO This will log all ERROR, WARN, and INFO only for net.p2p. To view all net.p2p logs use net.p2p:TRACE as that will log all lower levels. block-notify block-notify=<path> Run a program for each new block, '%s' will be replaced by the block hash. block-rate-notify block-rate-notify=<path> Run a program when the block rate undergoes large fluctuations. This might be a sign of large amounts of hash rate going on and off the Aeon network, and thus be of potential interest in predicting attacks. %t will be replaced by the number of minutes for the observation window, %b by the number of blocks observed within that window, and %e by the number of blocks that was expected in that window. It is suggested that this notification is used to automatically increase the number of confirmations required before a payment is acted upon. reorg-notify reorg-notify=<path> Run a program for each reorg, '%s' will be replaced by the split height, '%h' will be replaced by the new blockchain height, '%n' will be replaced by the number of new blocks in the new chain, and '%d' will be replaced by the number of blocks discarded from the old chain. p2p-bind-ip p2p-bind-ip=<ip_address> Interface for p2p network protocol. offline offline[=<1|0>] Do not listen for peers, nor connect to any. p2p-bind-port p2p-bind-port=<port> Port for p2p network protocol. hide-my-port hide-my-port[=<1|0>] Do not announce yourself as peerlist candidate. p2p-external-port p2p-external-port=<port> External port for p2p network protocol (if port forwarding used with NAT). confirm-external-bind confirm-external-bind[=<1|0>] Confirm ip value is NOT a loopback (local) IP. add-peer add-peer=<ip_address>:<port> Manually add peer to local peerlist. add-exclusive-node add-exclusive-node=<ip_address>:<port> Specify list of peers to connect to only. If this option is given the options add-priority-node and seed-node are ignored. peer-priority peer-priority=<ip_address>:<port> Specify list of peers to connect to and attempt to keep the connection open. rpc-bind-ip rpc-bind-ip=<ip_address> Specify IP to bind RPC server. rpc-login rpc-login=<username>[:<password>] Specify username[:password] required for RPC server. rpc-access-control-origins Specify a comma separated list of origins to allow cross origin resource sharing. rpc-bind-port rpc-bind-port=<port> Specify IP to bind RPC server. restricted-rpc restricted-rpc[=<1|0>] Restrict RPC to view only commands and do not return privacy sensitive data in RPC calls. rpc-restricted-port rpc-restricted-port=<port> Port for restricted RPC server. zmq-rpc-bind-ip zmq-rpc-bind-ip=<ip_address> IP for ZMQ RPC server to listen on. zmq-rpc-bind-port zmq-rpc-bind-port=<port> Port for ZMQ RPC server to listen on. test-dbg-lock-sleep test-dbg-lock-sleep[=<1|0>] Sleep time in ms, defaults to 0 (off), used to debug before/after locking mutex. Values 100 to 1000 are good for tests. test-drop-download test-drop-download[=<1|0>] For net tests: in download, discard ALL blocks instead checking/saving them (very fast). test-drop-download-height test-drop-download-height[=<1|0>] Like test-drop-download but discards only after around certain height. fixed-difficulty fixed-difficulty=<difficulty> Fixed difficulty used for testing. fluffy-blocks fluffy-blocks[=<1|0>] Relay blocks as fluffy blocks (obsolete, now default). no-fluffy-blocks no-fluffy-blocks[=<1|0>] Relay blocks as normal blocks. allow-local-ip allow-local-ip[=<1|0>] Allow local ip add to peer list, mostly in debug purposes. bg-mining-enable bg-mining-enable[=<1|0>] Enable/disable background mining. bg-mining-ignore-battery bg-mining-ignore-battery[=<1|0>] If true, assumes plugged in when unable to query system power status. bg-mining-min-idle-interval bg-mining-min-idle-interval=<seconds> Specify min lookback interval in seconds for determining idle state. bg-mining-idle-threshold bg-mining-min-idle-interval=<percentage> Specify minimum avg idle percentage over lookback interval. bg-mining-miner-target bg-mining-miner-target=<percentage> Specify maximum percentage cpu use by miner(s). start-mining start-mining=<address> Specify wallet address to mining for. mining-threads mining-threads=<number> Specify mining threads count. regtest regtest[=<1|0>] Run in a regression testing mode. coinbase-message coinbase-message=<message> Specify file for extra messages to include into transactions. detach detach[=<1|0>] Run as background process. enforce-dns-checkpoints enforce-dns-checkpoints[=<1|0>] checkpoints from DNS server will be enforced. disable-dns-checkpoints disable-dns-checkpoints[=<1|0>] Do not retrieve checkpoints from DNS. non-interactive non-interactive[=<1|0>] Run non-interactive. pidfile pidfile=<path> File path to write the daemon's PID to a file. stagenet stagenet[=<1|0>] Run on stagenet. The daemon must be launched with --stagenet flag. testnet testnet[=<1|0>] Run on testnet. The wallet must be launched with --testnet flag. show-time-stats show-time-stats[=<1|0>] Show time-stats when processing blocks/txs and disk synchronization. tos-flag tos-flag[=<1|0>] Set terms of service flag. check-update check-update[=<1|0>] Check for new versions of Aeon. no-idg no-idg[=<1|0>] Disable UPnP port mapping. version version Output version information. os-version os-version OS for which this executable was compiled.","title":"Options"},{"location":"documentation/aeond/options/#aeond","text":"","title":"aeond"},{"location":"documentation/aeond/options/#usage","text":"./aeond [options] [commands]","title":"Usage"},{"location":"documentation/aeond/options/#description","text":"These are the options for the Aeon peer-to-peer node. They will configure how the node operates.","title":"Description"},{"location":"documentation/aeond/options/#options","text":"","title":"Options"},{"location":"documentation/aeond/options/#config-file","text":"config-file=<path> Specify a config file to load options from. An example config file is shown below. # /path/to/file/aeond.conf daemon-address=192.168.0.1:9149 daemon-login=user:rpcpassword trusted-daemon=1 password=walletpassword Then launch wallet-cli with the following command: ./aeond --config-file=/path/to/file/aeond.conf","title":"config-file"},{"location":"documentation/aeond/options/#help","text":"help Produce a help message with this list available options.","title":"help"},{"location":"documentation/aeond/options/#bootstrap-daemon-address","text":"bootstrap-daemon-address=<ip_address>:<port> URL of a 'bootstrap' remote daemon that the connected wallets can use while this daemon is still not fully synced. ./aeond --bootstrap-daemon-address=127.0.0.1:11180","title":"bootstrap-daemon-address"},{"location":"documentation/aeond/options/#bootstrap-daemon-login","text":"bootstrap-daemon-login=<username>:<password> Specify username:password for the bootstrap daemon login. ./aeond --bootstrap-daemon-address=127.0.0.1:11180 --bootstrap-daemon-login=someuser:theirpassword","title":"bootstrap-daemon-login"},{"location":"documentation/aeond/options/#data-dir","text":"data-dir=<path> Specify data directory to store the blockchain data base information. ./aeond --data-dir=/path/to/some/directory","title":"data-dir"},{"location":"documentation/aeond/options/#db-salvage","text":"db-salvage[=<1|0>] Try to salvage a blockchain database if it seems corrupted.","title":"db-salvage"},{"location":"documentation/aeond/options/#db-sync-mode","text":"db-sync-mode=[safe|fast|fastest]:[sync|async]:[<blocks_per_sync>[blocks]|<bytes_per_sync>[bytes]] Specify sync option. ./aeond --db-sync-mode=fast:async:250000000bytes","title":"db-sync-mode"},{"location":"documentation/aeond/options/#db-type","text":"db-type=<type> Specify database type, available: lmdb .","title":"db-type"},{"location":"documentation/aeond/options/#fast-block-sync","text":"fsat-block-sync[=<1|0>] Sync up most of the way by using block hashes stored in source code.","title":"fast-block-sync"},{"location":"documentation/aeond/options/#block-sync-size","text":"block-sync-size=<number_of_blocks> Limit how many blocks to sync at once during chain synchronization. 0 is an adaptive setting which will change dynamically.","title":"block-sync-size"},{"location":"documentation/aeond/options/#max-txpool-weight","text":"max-txpool-weight=<number_of_bytes> Set maximum pending transaction pool size in bytes.","title":"max-txpool-weight"},{"location":"documentation/aeond/options/#in-peers","text":"in-peers=<number_of_peers> Set the maximum number of incoming peers connecting to your node.","title":"in-peers"},{"location":"documentation/aeond/options/#out-peers","text":"out-peers=<number_of_peers> Set the maximum number of outgoing peers you are connecting to.","title":"out-peers"},{"location":"documentation/aeond/options/#limit","text":"limit=<kB/s> Set both the download and upload limit. >>> limit limit-down is 8192 kB/s limit-up is 2048 kB/s >>> limit 8192 Set limit-down to 8192 kB/s Set limit-up to 8192 kB/s","title":"limit"},{"location":"documentation/aeond/options/#limit-rate-down","text":"limit-rate-down=<kB/s> Set the download limit. >>> limit_down limit-down is 8192 kB/s >>> limit_down 2048 Set limit-down to 2048 kB/s","title":"limit-rate-down"},{"location":"documentation/aeond/options/#limit-rate-up","text":"limit-rate-up=<kB/s> Set the upload limit. >>> limit_up limit_up is 8192 kB/s >>> limit_up 2048 Set limit_up to 2048 kB/s","title":"limit-rate-up"},{"location":"documentation/aeond/options/#max-concurrency","text":"max-concurrency=<number_of_cpu_threads> Set maximum number of CPU threads used by the daemon process for syncronizing blocks and processing transactions. prep-blocks-threads=<number_of_cpu_threads>","title":"max-concurrency"},{"location":"documentation/aeond/options/#prep-blocks-threads","text":"","title":"prep-blocks-threads"},{"location":"documentation/aeond/options/#log-file","text":"log-file=<path> The path to be used for the log file. Default argument: aeon-wallet-cli.log","title":"log-file"},{"location":"documentation/aeond/options/#max-log-file-size","text":"max-log-file-size=<bytes> Maximum log file size in bytes. Default argument: 104850000","title":"max-log-file-size"},{"location":"documentation/aeond/options/#max-log-files","text":"max-log-files=<number> Maximum number of rotated log files to be saved (no limit by setting to 0). Default argument: 50","title":"max-log-files"},{"location":"documentation/aeond/options/#log-level","text":"log-level=<level|category> Aeon source code has five log levels: 0 ERROR, 1 WARN, 2 INFO, 3 DEBUG, 4 TRACE. Each of the higher log levels contains the log levels below them. So for example --log-level=3 will display levels 0, 1, 2, and 3. To restrict the log to a specific category, you can use the following example --log-level=net.p2p:INFO This will log all ERROR, WARN, and INFO only for net.p2p. To view all net.p2p logs use net.p2p:TRACE as that will log all lower levels.","title":"log-level"},{"location":"documentation/aeond/options/#block-notify","text":"block-notify=<path> Run a program for each new block, '%s' will be replaced by the block hash.","title":"block-notify"},{"location":"documentation/aeond/options/#block-rate-notify","text":"block-rate-notify=<path> Run a program when the block rate undergoes large fluctuations. This might be a sign of large amounts of hash rate going on and off the Aeon network, and thus be of potential interest in predicting attacks. %t will be replaced by the number of minutes for the observation window, %b by the number of blocks observed within that window, and %e by the number of blocks that was expected in that window. It is suggested that this notification is used to automatically increase the number of confirmations required before a payment is acted upon.","title":"block-rate-notify"},{"location":"documentation/aeond/options/#reorg-notify","text":"reorg-notify=<path> Run a program for each reorg, '%s' will be replaced by the split height, '%h' will be replaced by the new blockchain height, '%n' will be replaced by the number of new blocks in the new chain, and '%d' will be replaced by the number of blocks discarded from the old chain.","title":"reorg-notify"},{"location":"documentation/aeond/options/#p2p-bind-ip","text":"p2p-bind-ip=<ip_address> Interface for p2p network protocol.","title":"p2p-bind-ip"},{"location":"documentation/aeond/options/#offline","text":"offline[=<1|0>] Do not listen for peers, nor connect to any.","title":"offline"},{"location":"documentation/aeond/options/#p2p-bind-port","text":"p2p-bind-port=<port> Port for p2p network protocol.","title":"p2p-bind-port"},{"location":"documentation/aeond/options/#hide-my-port","text":"hide-my-port[=<1|0>] Do not announce yourself as peerlist candidate.","title":"hide-my-port"},{"location":"documentation/aeond/options/#p2p-external-port","text":"p2p-external-port=<port> External port for p2p network protocol (if port forwarding used with NAT).","title":"p2p-external-port"},{"location":"documentation/aeond/options/#confirm-external-bind","text":"confirm-external-bind[=<1|0>] Confirm ip value is NOT a loopback (local) IP.","title":"confirm-external-bind"},{"location":"documentation/aeond/options/#add-peer","text":"add-peer=<ip_address>:<port> Manually add peer to local peerlist.","title":"add-peer"},{"location":"documentation/aeond/options/#add-exclusive-node","text":"add-exclusive-node=<ip_address>:<port> Specify list of peers to connect to only. If this option is given the options add-priority-node and seed-node are ignored.","title":"add-exclusive-node"},{"location":"documentation/aeond/options/#peer-priority","text":"peer-priority=<ip_address>:<port> Specify list of peers to connect to and attempt to keep the connection open.","title":"peer-priority"},{"location":"documentation/aeond/options/#rpc-bind-ip","text":"rpc-bind-ip=<ip_address> Specify IP to bind RPC server.","title":"rpc-bind-ip"},{"location":"documentation/aeond/options/#rpc-login","text":"rpc-login=<username>[:<password>] Specify username[:password] required for RPC server.","title":"rpc-login"},{"location":"documentation/aeond/options/#rpc-access-control-origins","text":"Specify a comma separated list of origins to allow cross origin resource sharing.","title":"rpc-access-control-origins"},{"location":"documentation/aeond/options/#rpc-bind-port","text":"rpc-bind-port=<port> Specify IP to bind RPC server.","title":"rpc-bind-port"},{"location":"documentation/aeond/options/#restricted-rpc","text":"restricted-rpc[=<1|0>] Restrict RPC to view only commands and do not return privacy sensitive data in RPC calls.","title":"restricted-rpc"},{"location":"documentation/aeond/options/#rpc-restricted-port","text":"rpc-restricted-port=<port> Port for restricted RPC server.","title":"rpc-restricted-port"},{"location":"documentation/aeond/options/#zmq-rpc-bind-ip","text":"zmq-rpc-bind-ip=<ip_address> IP for ZMQ RPC server to listen on.","title":"zmq-rpc-bind-ip"},{"location":"documentation/aeond/options/#zmq-rpc-bind-port","text":"zmq-rpc-bind-port=<port> Port for ZMQ RPC server to listen on.","title":"zmq-rpc-bind-port"},{"location":"documentation/aeond/options/#test-dbg-lock-sleep","text":"test-dbg-lock-sleep[=<1|0>] Sleep time in ms, defaults to 0 (off), used to debug before/after locking mutex. Values 100 to 1000 are good for tests.","title":"test-dbg-lock-sleep"},{"location":"documentation/aeond/options/#test-drop-download","text":"test-drop-download[=<1|0>] For net tests: in download, discard ALL blocks instead checking/saving them (very fast).","title":"test-drop-download"},{"location":"documentation/aeond/options/#test-drop-download-height","text":"test-drop-download-height[=<1|0>] Like test-drop-download but discards only after around certain height.","title":"test-drop-download-height"},{"location":"documentation/aeond/options/#fixed-difficulty","text":"fixed-difficulty=<difficulty> Fixed difficulty used for testing.","title":"fixed-difficulty"},{"location":"documentation/aeond/options/#fluffy-blocks","text":"fluffy-blocks[=<1|0>] Relay blocks as fluffy blocks (obsolete, now default).","title":"fluffy-blocks"},{"location":"documentation/aeond/options/#no-fluffy-blocks","text":"no-fluffy-blocks[=<1|0>] Relay blocks as normal blocks.","title":"no-fluffy-blocks"},{"location":"documentation/aeond/options/#allow-local-ip","text":"allow-local-ip[=<1|0>] Allow local ip add to peer list, mostly in debug purposes.","title":"allow-local-ip"},{"location":"documentation/aeond/options/#bg-mining-enable","text":"bg-mining-enable[=<1|0>] Enable/disable background mining.","title":"bg-mining-enable"},{"location":"documentation/aeond/options/#bg-mining-ignore-battery","text":"bg-mining-ignore-battery[=<1|0>] If true, assumes plugged in when unable to query system power status.","title":"bg-mining-ignore-battery"},{"location":"documentation/aeond/options/#bg-mining-min-idle-interval","text":"bg-mining-min-idle-interval=<seconds> Specify min lookback interval in seconds for determining idle state.","title":"bg-mining-min-idle-interval"},{"location":"documentation/aeond/options/#bg-mining-idle-threshold","text":"bg-mining-min-idle-interval=<percentage> Specify minimum avg idle percentage over lookback interval.","title":"bg-mining-idle-threshold"},{"location":"documentation/aeond/options/#bg-mining-miner-target","text":"bg-mining-miner-target=<percentage> Specify maximum percentage cpu use by miner(s).","title":"bg-mining-miner-target"},{"location":"documentation/aeond/options/#start-mining","text":"start-mining=<address> Specify wallet address to mining for.","title":"start-mining"},{"location":"documentation/aeond/options/#mining-threads","text":"mining-threads=<number> Specify mining threads count.","title":"mining-threads"},{"location":"documentation/aeond/options/#regtest","text":"regtest[=<1|0>] Run in a regression testing mode.","title":"regtest"},{"location":"documentation/aeond/options/#coinbase-message","text":"coinbase-message=<message> Specify file for extra messages to include into transactions.","title":"coinbase-message"},{"location":"documentation/aeond/options/#detach","text":"detach[=<1|0>] Run as background process.","title":"detach"},{"location":"documentation/aeond/options/#enforce-dns-checkpoints","text":"enforce-dns-checkpoints[=<1|0>] checkpoints from DNS server will be enforced.","title":"enforce-dns-checkpoints"},{"location":"documentation/aeond/options/#disable-dns-checkpoints","text":"disable-dns-checkpoints[=<1|0>] Do not retrieve checkpoints from DNS.","title":"disable-dns-checkpoints"},{"location":"documentation/aeond/options/#non-interactive","text":"non-interactive[=<1|0>] Run non-interactive.","title":"non-interactive"},{"location":"documentation/aeond/options/#pidfile","text":"pidfile=<path> File path to write the daemon's PID to a file.","title":"pidfile"},{"location":"documentation/aeond/options/#stagenet","text":"stagenet[=<1|0>] Run on stagenet. The daemon must be launched with --stagenet flag.","title":"stagenet"},{"location":"documentation/aeond/options/#testnet","text":"testnet[=<1|0>] Run on testnet. The wallet must be launched with --testnet flag.","title":"testnet"},{"location":"documentation/aeond/options/#show-time-stats","text":"show-time-stats[=<1|0>] Show time-stats when processing blocks/txs and disk synchronization.","title":"show-time-stats"},{"location":"documentation/aeond/options/#tos-flag","text":"tos-flag[=<1|0>] Set terms of service flag.","title":"tos-flag"},{"location":"documentation/aeond/options/#check-update","text":"check-update[=<1|0>] Check for new versions of Aeon.","title":"check-update"},{"location":"documentation/aeond/options/#no-idg","text":"no-idg[=<1|0>] Disable UPnP port mapping.","title":"no-idg"},{"location":"documentation/aeond/options/#version","text":"version Output version information.","title":"version"},{"location":"documentation/aeond/options/#os-version","text":"os-version OS for which this executable was compiled.","title":"os-version"},{"location":"documentation/wallet-cli/commands/","text":"Wallet CLI Usage ./aeon-wallet-cli [options] [commands] Description This is the command line Aeon wallet. It is the perfect tool to manage aeon transfers and addresses. It needs to connect to an Aeon daemon to work correctly. Commands account account Shows all the existing accounts along with their balances. account new account new <label text with white spaces allowed> Creates a new account with its label initialized by the provided label text (which can be empty). account switch account switch <index> Switches to the account specified by <index> . account label account label <index> <label text with white spaces allowed> Sets the label of the account specified by to the provided label text. account tag account tag <tag_name> <account_index_1> [<account_index_2> ...] A tag <tag_name> is assigned to the specified accounts <account_index_1> , <account_index_2> , .... account untag account untag <account_index_1> [<account_index_2> ...] The tags assigned to the specified accounts <account_index_1> , <account_index_2> ..., are removed. account tag_description account tag_description <tag_name> <description> The tag <tag_name> is assigned an arbitrary text <description> . address address (<index_min> [<index_max>]|all) Shows the default or specified address. address new address new <label text with white spaces allowed> Creates a new address with the provided label text (which can be empty). address label address label <index> <label text with white spaces allowed> Sets the label of the address specified by <index> to the provided label text. address_book address_book Print all saved addresses in local storage. >>> address_book address_book Index: 0 Address: WmsBWTyNwnbDwjkU1LDTNRaeYK2XNASvHFfHxxxxxxxxxS74f8q3CVwL3RigWN7WTFaFQg6k3SWUFdn2SSaZuidZ2UAyQ9yVo Payment ID: <0000000000000000000000000000000000000000000000000000000000000000> Description: test Index: 1 Address: WmsBWTyNwnbDwjkU1LDTNRaeYK2XNASvHFfHxxxxxxxxxS74f8q3CVwL3RigWN7WTFaFQg6k3SWUFdn2SSaZuidZ2UAyQ9yVo Payment ID: <0000000000000000000000000000000000000000000000000000000000000000> Description: test address_book add address_book add ((<address> [pid <id>])|<integrated address>) [<description possibly with whitespaces>] Add an address to the local address book. >>> address_book add WmsBWTyNwnbDwjkU1LDTNRaeYK2XNASvHFfHxxxxxxxxxS74f8q3CVwL3RigWN7WTFaFQg6k3SWUFdn2SSaZuidZ2UAyQ9yVo test Index: 0 Address: WmsBWTyNwnbDwjkU1LDTNRaeYK2XNASvHFfHcYcQgVsqPS74f8q3CVwL3RigWN7WTFaFQg6k3SWUFdn2SSaZuidZ2UAyQ9yVo Payment ID: <0000000000000000000000000000000000000000000000000000000000000000> Description: test address_book delete address_book delete <index> Delete address at <index> . >>> address_book delete 1 balance balance [detail] Show the wallet's balance of the currently selected account. bc_height bc_height Prints the connected daemon's height. check_reserve_proof check_reserve_proof <address> <signature_file> [<message>] Check a signature proving that the owner of <address> holds at least this much, optionally with a challenge string <message> . check_spend_proof check_spend_proof <txid> <signature_file> [<message>] Check a signature proving that the signer generated <txid> , optionally with a challenge string <message> . check_tx_key check_tx_key <txid> <txkey> <address> Check the amount going to <address> in <txid> . check_tx_proof check_tx_proof <txid> <address> <signature_file> [<message>] Check the proof for funds going to <address> in <txid> with the challenge string <message> if any. >>> check_tx_proof txid WmsxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxVo aeon_tx_proof yes Good signature WmsxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxVo received 10.000000000 in txid <e2xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx> This transaction has 359 confirmations donate donate [index=<N1>[,<N2>,...]] [<priority>] [<ring_size>] <amount> [<payment_id>] Donate <amount> to the development team ( donate.aeon.cash ). encrypted_seed encrypted_seed Display the encrypted Electrum-style mnemonic seed. exchange_multisig_keys exchange_multisig_keys <string> [<string>...] Performs extra multisig keys exchange rounds. Needed for arbitrary M/N multisig wallets. See MultiSig Guide . export_key_images export_key_images <file> Export a signed set of key images to a <file> . >>> export_key_images key_file Wallet password: *************************** Signed key images exported to key_file export_multisig_info export_multisig_info <filename> Export multisig info for other participants. See MultiSig Guide . export_outputs export_outputs <file> Export the set of outputs owned by this wallet. >>> export_outputs file Wallet password: *************************** Outputs exported to file export_raw_multisig_tx export_raw_multisig_tx <filename> Export a signed multisig transaction to a file. See MultiSig Guide . export_transfers export_transfers [in|out|all|pending|failed|coinbase] [index=<N1>[,<N2>,...]] [<min_height> [<max_height>]] [output=<filepath>] Export to CSV the incoming/outgoing transfers within an optional height range. >>> export_transfers CSV exported to output0.csv finalize_multisig finalize_multisig <string> [<string>...] Turn this wallet into a multisig wallet, extra step for N-1/N wallets. See MultiSig Guide . get_description get_description Get the description of the wallet. >>> get_description description found: My Favorite Wallet get_reserve_proof get_reserve_proof (all|<amount>) [<message>] Generate a signature proving that you own at least this much, optionally with a challenge string <message> . If all is specified, you prove the entire sum of all of your existing accounts' balances. Otherwise, you prove the reserve of the smallest possible amount above <amount> available in your current account. >>> get_reserve_proof 10 I-have-ten-coins Wallet password: **************** signature file saved to: aeon_reserve_proof get_spend_proof get_spend_proof <txid> [<message>] Generate a signature proving that you generated <txid> using the spend secret key, optionally with a challenge string <message> . get_tx_key get_tx_key <txid> Get the transaction private key. This can be used to prove coins have been sent but does not prove who sent the transaction. get_tx_note get_tx_note <txid> Get the note attached to a transaction id. get_tx_proof get_tx_proof <txid> <address> [<message>] Generate a signature proving funds sent to <address> in <txid> , optionally with a challenge string <message> , using either the transaction secret key (when <address> is not your wallet's address) or the view secret key (otherwise), which does not disclose the secret key. >>> get_tx_proof e2xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx WmsxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxVo yes Wallet password: signature file saved to: aeon_tx_proof help help [<command>] Get documentation information. >>> help get_tx_key Command usage: get_tx_key <txid> Command description: Get the transaction key (r) for a given <txid> import_key_images import_key_images <file> Import a signed key images list and verify their spent status. This could be used to verify a cold wallet balance. import_multisig_info import_multisig_info <filename> [<filename>...] Import multisig info from other participants. See MultiSig Guide . import_outputs import_outputs <file> Import a set of outputs owned by this wallet. This could be used to load transactions to an offline wallet. incoming_transfers incoming_transfers [available|unavailable] [verbose] [index=<N1>[,<N2>[,...]]] Show the incoming transfers, all or filtered by availability and address index. integrated_address integrated_address [<payment_id> | <address>] Encode a payment ID into an integrated address for the current wallet public address (no argument uses a random payment ID), or decode an integrated address to standard address and payment ID. is_output_spent is_output_spent <amount>/<key_offset> Checks whether an output is marked as spent. >>> mark_output_spent 500/2657 >>> is_output_spent 500/2657 Spent: 500/2657 >>> mark_output_unspent 500/2657 >>> is_output_spent 500/2657 Not spent: 500/2657 locked_sweep_all locked_sweep_all [index=<N1>[,<N2>,...]] [<priority>] [<ring_size>] <address> <lockblocks> [<payment_id>] Send all unlocked balance to an address and lock it for <lockblocks> (max. 1000000). If the parameter index<N1>[,<N2>,...] is specified, the wallet sweeps outputs received by those address indices. <priority> is the priority of the sweep. The higher the priority, the higher the transaction fee. Valid values in priority order (from lowest to highest) are: unimportant, normal, elevated, priority. If omitted, the default value (see the command set priority ) is used. <ring_size> is the number of inputs to include for untraceability. locked_transfer locked_transfer [index=<N1>[,<N2>,...]] [<priority>] [<ring_size>] (<URI> | <addr> <amount>) <lockblocks> [<payment_id>] Transfer <amount> to <address> and lock it for <lockblocks> (max. 1000000). If the parameter index=<N1>[,<N2>,...] is specified, the wallet uses outputs received by addresses of those indices. <priority> is the priority of the transaction. The higher the priority, the higher the transaction fee. Valid values in priority order (from lowest to highest) are: unimportant, normal, elevated, priority. If omitted, the default value (see the command set priority ) is used. <ring_size> is the number of inputs to include for untraceability. Multiple payments can be made at once by adding URI_2 or <address_2> <amount_2> etc. (before the payment ID, if it's included). make_multisig make_multisig <threshold> <string1> [<string>...] Turn this wallet into a multisig wallet. See MultiSig Guide . mark_output_spent mark_output_spent <amount>/<offset> | <filename> [add] Mark output(s) as spent so they never get selected as fake outputs in a ring. >>> mark_output_spent 500/2657 >>> is_output_spent 500/2657 Spent: 500/2657 >>> mark_output_unspent 500/2657 >>> is_output_spent 500/2657 Not spent: 500/2657 mark_output_unspent mark_output_unspent <amount>/<offset> Marks an output as unspent so it may get selected as a fake output in a ring. >>> mark_output_spent 500/2657 >>> is_output_spent 500/2657 Spent: 500/2657 >>> mark_output_unspent 500/2657 >>> is_output_spent 500/2657 Not spent: 500/2657 password password Change the wallet's password. payment_id payment_id Generate a new random full size payment id. These will be unencrypted on the blockchain, see integrated_address for encrypted short payment ids. >>> payment_id Random payment ID: <3b9c33d3444a1e8f489f9669f0c83cc72a6fef93c5133dfea3401d976dba32ec> payments payments <PID_1> [<PID_2> ... <PID_N>] Show the payments for the given payment IDs. prepare_multisig prepare_multisig Export data needed to create a multisig wallet. See MultiSig Guide . print_ring print_ring <key_image> | <txid> Print the ring(s) used to spend a given key image or transaction (if the ring size is > 1). refresh refresh Synchronize with daemon. rescan_bc rescan_bc Rescan the blockchain from scratch, losing any information which can not be recovered from the blockchain itself. rescan_spent rescan_spent Rescan the blockchain for spent outputs. save save Save the wallet data including key images, transaction history, etc. save_bc save_bc Save the current blockchain data. save_known_rings save_known_rings Save known rings to the shared rings database save_watch_only save_watch_only Save a watch-only keys file. seed seed Display the Electrum-style mnemonic seed set set <option> [<value>] This command is used to set a variety of options in the wallet CLI. Available options: seed language Set the wallet's seed language. always-confirm-transfers <1|0> Whether to confirm unsplit txes. print-ring-members <1|0> Whether to print detailed information about ring members during confirmation. store-tx-info <1|0> Whether to store outgoing tx info (destination address, payment ID, tx secret key) for future reference. default-ring-size <n> Set the default ring size (obsolete). auto-refresh <1|0> Whether to automatically synchronize new blocks from the daemon. refresh-type <full|optimize-coinbase|no-coinbase|default> Set the wallet's refresh behaviour. priority [0|1|2|3|4] Set the fee to default/unimportant/normal/elevated/priority. confirm-missing-payment-id <1|0> ask-password <0|1|2 (or never|action|decrypt)> unit <aeon|milliaeon|microaeon|nanoaeon|picoaeon> Set the default aeon (sub-)unit. min-outputs-count [n] Try to keep at least that many outputs of value at least min-outputs-value. min-outputs-value [n] Try to keep at least min-outputs-count outputs of at least that value. merge-destinations <1|0> Whether to merge multiple payments to the same destination address. confirm-backlog <1|0> Whether to warn if there is transaction backlog. confirm-backlog-threshold [n] Set a threshold for confirm-backlog to only warn if the transaction backlog is greater than n blocks. refresh-from-block-height [n] Set the height before which to ignore blocks. auto-low-priority <1|0> Whether to automatically use the low priority fee level when it's safe to do so. segregate-pre-fork-outputs <1|0> Set this if you intend to spend outputs on both Aeon AND a key reusing fork. key-reuse-mitigation2 <1|0> Set this if you are not sure whether you will spend on a key reusing Aeon fork later. subaddress-lookahead <major>:<minor> Set the lookahead sizes for the subaddress hash table. segregation-height <n> Set to the height of a key reusing fork you want to use, 0 to use default. ignore-outputs-above <amount> Ignore outputs of amount above this threshold when spending. Value 0 is translated to the maximum value (18 million) which disables this filter. ignore-outputs-below <amount> Ignore outputs of amount below this threshold when spending. set_daemon set_daemon <host>[:<port>] [trusted|untrusted] Set another daemon to connect to. set_description set_description [free text note] >>> set_description My Favorite Wallet >>> get_description description found: My Favortite Wallet set_log set_log <level>|{+,-,}<categories> Aeon source code has five log levels: 0 ERROR, 1 WARN, 2 INFO, 3 DEBUG, 4 TRACE. Each of the higher log levels contains the log levels below them. So for example set_log 3 will display levels 0, 1, 2, and 3. To restrict the log to a specific category, you can use the following example set_log net.p2p:INFO This will log all ERROR, WARN, and INFO only for net.p2p. To view all net.p2p logs use net.p2p:TRACE as that will log all lower levels. set_ring set_ring <filename> | ( <key_image> absolute|relative <index> [<index>...] ) Set the ring used for a given key image, so it can be reused in a fork. set_tx_key set_tx_key <txid> <tx_key> Set the transaction key r for a given <txid> in case the tx was made by some other device or 3rd party wallet. set_tx_note set_tx_note <txid> [free text note] Set an arbitrary string note for a <txid> . show_transfer show_transfer <txid> Show information about a transfer to/from this address. show_transfers show_transfers [in|out|pending|failed|pool|coinbase] [index=<N1>[,<N2>,...]] [<min_height> [<max_height>]] Show the incoming/outgoing transfers within an optional height range. sign sign <file> Sign the contents of a file. sign_multisig sign_multisig <filename> Sign a multisig transaction from a file. See MultiSig Guide . sign_transfer sign_transfer [export_raw] Sign a transaction from a file. If the parameter \"export_raw\" is specified, transaction raw hex data suitable for the daemon RPC /sendrawtransaction is exported. spendkey spendkey Display the private spend key. start_mining start_mining [<number_of_threads>] [bg_mining] [ignore_battery] Start mining thread. status status Show synchronization status stop_mining stop_mining Kills mining threads. submit_multisig submit_multisig <filename> Submit a signed multisig transaction from a file submit_transfer submit_transfer Submit a signed transaction from a file. sweep_all sweep_all [index=<N1>[,<N2>,...]] [<priority>] [<ring_size>] <address> [<payment_id>] Send all unlocked balance to an address. If the parameter index<N1>[,<N2>,...] is specified, the wallet sweeps outputs received by those address indices. If omitted, the wallet sweeps outputs received by all address indices. sweep_below sweep_below <amount_threshold> [index=<N1>[,<N2>,...]] [<priority>] [<ring_size>] <address> [<payment_id>] Send all unlocked outputs below an amount to an address. If the parameter index<N1>[,<N2>,...] is specified, the wallet sweeps outputs received by those address indices. If omitted, the wallet sweeps outputs received by all address indices. sweep_single sweep_single [<priority>] [<ring_size>] <key_image> <address> [<payment_id>] Send a single output to an address. sweep_unmixable sweep_unmixable Send all unmixable outputs to yourself with ring_size 1 transfer transfer [index=<N1>[,<N2>,...]] [<priority>] [<ring_size>] (<URI> | <address> <amount>) [<payment_id>] Transfer <amount> to <address> . If the parameter index=<N1>[,<N2>,...] is specified, the wallet uses outputs received by addresses of those indices. <priority> is the priority of the transaction. The higher the priority, the higher the transaction fee. Valid values in priority order (from lowest to highest) are: unimportant, normal, elevated, priority. If omitted, the default value (see the command set priority ) is used. <ring_size> is the number of inputs to include for untraceability. Multiple payments can be made at once by adding URI_2 or <address_2> <amount_2> etc. (before the payment ID, if it's included) unspent_outputs unspent_outputs [index=<N1>[,<N2>,...]] [<min_amount> [<max_amount>]] Show the unspent outputs of a specified address within an optional amount range. [wallet WXXXX]: unspent_outputs Amount: 0.000000010000, number of keys: 2 124698 129240 ... ... Amount: 2000.000000000000, number of keys: 1 129626 Min block height: 124698 Max block height: 129240 Min amount found: 0.000000010000 Max amount found: 2000.000000000000 Total count: ### Bin size: .... Outputs per *: 2.9 count ^ | * | | * | | * | | * | | * | | * | | * * * | | * * ** * | |* * * * ** * ** *| |* * * * * * * * ** ** * ** *| +--------------------------------------------------+--> block height ^ ^ 124698 129240 verify verify <filename> <address> <signature> Verify a signature on the contents of a file. version version Returns version information viewkey viewkey Display the private view key. wallet_info wallet_info Show the wallet's information.","title":"Commands"},{"location":"documentation/wallet-cli/commands/#wallet-cli","text":"","title":"Wallet CLI"},{"location":"documentation/wallet-cli/commands/#usage","text":"./aeon-wallet-cli [options] [commands]","title":"Usage"},{"location":"documentation/wallet-cli/commands/#description","text":"This is the command line Aeon wallet. It is the perfect tool to manage aeon transfers and addresses. It needs to connect to an Aeon daemon to work correctly.","title":"Description"},{"location":"documentation/wallet-cli/commands/#commands","text":"","title":"Commands"},{"location":"documentation/wallet-cli/commands/#account","text":"account Shows all the existing accounts along with their balances.","title":"account"},{"location":"documentation/wallet-cli/commands/#account-new","text":"account new <label text with white spaces allowed> Creates a new account with its label initialized by the provided label text (which can be empty).","title":"account new"},{"location":"documentation/wallet-cli/commands/#account-switch","text":"account switch <index> Switches to the account specified by <index> .","title":"account switch"},{"location":"documentation/wallet-cli/commands/#account-label","text":"account label <index> <label text with white spaces allowed> Sets the label of the account specified by to the provided label text.","title":"account label"},{"location":"documentation/wallet-cli/commands/#account-tag","text":"account tag <tag_name> <account_index_1> [<account_index_2> ...] A tag <tag_name> is assigned to the specified accounts <account_index_1> , <account_index_2> , ....","title":"account tag"},{"location":"documentation/wallet-cli/commands/#account-untag","text":"account untag <account_index_1> [<account_index_2> ...] The tags assigned to the specified accounts <account_index_1> , <account_index_2> ..., are removed.","title":"account untag"},{"location":"documentation/wallet-cli/commands/#account-tag_description","text":"account tag_description <tag_name> <description> The tag <tag_name> is assigned an arbitrary text <description> .","title":"account tag_description"},{"location":"documentation/wallet-cli/commands/#address","text":"address (<index_min> [<index_max>]|all) Shows the default or specified address.","title":"address"},{"location":"documentation/wallet-cli/commands/#address-new","text":"address new <label text with white spaces allowed> Creates a new address with the provided label text (which can be empty).","title":"address new"},{"location":"documentation/wallet-cli/commands/#address-label","text":"address label <index> <label text with white spaces allowed> Sets the label of the address specified by <index> to the provided label text.","title":"address label"},{"location":"documentation/wallet-cli/commands/#address_book","text":"address_book Print all saved addresses in local storage. >>> address_book address_book Index: 0 Address: WmsBWTyNwnbDwjkU1LDTNRaeYK2XNASvHFfHxxxxxxxxxS74f8q3CVwL3RigWN7WTFaFQg6k3SWUFdn2SSaZuidZ2UAyQ9yVo Payment ID: <0000000000000000000000000000000000000000000000000000000000000000> Description: test Index: 1 Address: WmsBWTyNwnbDwjkU1LDTNRaeYK2XNASvHFfHxxxxxxxxxS74f8q3CVwL3RigWN7WTFaFQg6k3SWUFdn2SSaZuidZ2UAyQ9yVo Payment ID: <0000000000000000000000000000000000000000000000000000000000000000> Description: test","title":"address_book"},{"location":"documentation/wallet-cli/commands/#address_book-add","text":"address_book add ((<address> [pid <id>])|<integrated address>) [<description possibly with whitespaces>] Add an address to the local address book. >>> address_book add WmsBWTyNwnbDwjkU1LDTNRaeYK2XNASvHFfHxxxxxxxxxS74f8q3CVwL3RigWN7WTFaFQg6k3SWUFdn2SSaZuidZ2UAyQ9yVo test Index: 0 Address: WmsBWTyNwnbDwjkU1LDTNRaeYK2XNASvHFfHcYcQgVsqPS74f8q3CVwL3RigWN7WTFaFQg6k3SWUFdn2SSaZuidZ2UAyQ9yVo Payment ID: <0000000000000000000000000000000000000000000000000000000000000000> Description: test","title":"address_book add"},{"location":"documentation/wallet-cli/commands/#address_book-delete","text":"address_book delete <index> Delete address at <index> . >>> address_book delete 1","title":"address_book delete"},{"location":"documentation/wallet-cli/commands/#balance","text":"balance [detail] Show the wallet's balance of the currently selected account.","title":"balance"},{"location":"documentation/wallet-cli/commands/#bc_height","text":"bc_height Prints the connected daemon's height.","title":"bc_height"},{"location":"documentation/wallet-cli/commands/#check_reserve_proof","text":"check_reserve_proof <address> <signature_file> [<message>] Check a signature proving that the owner of <address> holds at least this much, optionally with a challenge string <message> .","title":"check_reserve_proof"},{"location":"documentation/wallet-cli/commands/#check_spend_proof","text":"check_spend_proof <txid> <signature_file> [<message>] Check a signature proving that the signer generated <txid> , optionally with a challenge string <message> .","title":"check_spend_proof"},{"location":"documentation/wallet-cli/commands/#check_tx_key","text":"check_tx_key <txid> <txkey> <address> Check the amount going to <address> in <txid> .","title":"check_tx_key"},{"location":"documentation/wallet-cli/commands/#check_tx_proof","text":"check_tx_proof <txid> <address> <signature_file> [<message>] Check the proof for funds going to <address> in <txid> with the challenge string <message> if any. >>> check_tx_proof txid WmsxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxVo aeon_tx_proof yes Good signature WmsxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxVo received 10.000000000 in txid <e2xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx> This transaction has 359 confirmations","title":"check_tx_proof"},{"location":"documentation/wallet-cli/commands/#donate","text":"donate [index=<N1>[,<N2>,...]] [<priority>] [<ring_size>] <amount> [<payment_id>] Donate <amount> to the development team ( donate.aeon.cash ).","title":"donate"},{"location":"documentation/wallet-cli/commands/#encrypted_seed","text":"encrypted_seed Display the encrypted Electrum-style mnemonic seed.","title":"encrypted_seed"},{"location":"documentation/wallet-cli/commands/#exchange_multisig_keys","text":"exchange_multisig_keys <string> [<string>...] Performs extra multisig keys exchange rounds. Needed for arbitrary M/N multisig wallets. See MultiSig Guide .","title":"exchange_multisig_keys"},{"location":"documentation/wallet-cli/commands/#export_key_images","text":"export_key_images <file> Export a signed set of key images to a <file> . >>> export_key_images key_file Wallet password: *************************** Signed key images exported to key_file","title":"export_key_images"},{"location":"documentation/wallet-cli/commands/#export_multisig_info","text":"export_multisig_info <filename> Export multisig info for other participants. See MultiSig Guide .","title":"export_multisig_info"},{"location":"documentation/wallet-cli/commands/#export_outputs","text":"export_outputs <file> Export the set of outputs owned by this wallet. >>> export_outputs file Wallet password: *************************** Outputs exported to file","title":"export_outputs"},{"location":"documentation/wallet-cli/commands/#export_raw_multisig_tx","text":"export_raw_multisig_tx <filename> Export a signed multisig transaction to a file. See MultiSig Guide .","title":"export_raw_multisig_tx"},{"location":"documentation/wallet-cli/commands/#export_transfers","text":"export_transfers [in|out|all|pending|failed|coinbase] [index=<N1>[,<N2>,...]] [<min_height> [<max_height>]] [output=<filepath>] Export to CSV the incoming/outgoing transfers within an optional height range. >>> export_transfers CSV exported to output0.csv","title":"export_transfers"},{"location":"documentation/wallet-cli/commands/#finalize_multisig","text":"finalize_multisig <string> [<string>...] Turn this wallet into a multisig wallet, extra step for N-1/N wallets. See MultiSig Guide .","title":"finalize_multisig"},{"location":"documentation/wallet-cli/commands/#get_description","text":"get_description Get the description of the wallet. >>> get_description description found: My Favorite Wallet","title":"get_description"},{"location":"documentation/wallet-cli/commands/#get_reserve_proof","text":"get_reserve_proof (all|<amount>) [<message>] Generate a signature proving that you own at least this much, optionally with a challenge string <message> . If all is specified, you prove the entire sum of all of your existing accounts' balances. Otherwise, you prove the reserve of the smallest possible amount above <amount> available in your current account. >>> get_reserve_proof 10 I-have-ten-coins Wallet password: **************** signature file saved to: aeon_reserve_proof","title":"get_reserve_proof"},{"location":"documentation/wallet-cli/commands/#get_spend_proof","text":"get_spend_proof <txid> [<message>] Generate a signature proving that you generated <txid> using the spend secret key, optionally with a challenge string <message> .","title":"get_spend_proof"},{"location":"documentation/wallet-cli/commands/#get_tx_key","text":"get_tx_key <txid> Get the transaction private key. This can be used to prove coins have been sent but does not prove who sent the transaction.","title":"get_tx_key"},{"location":"documentation/wallet-cli/commands/#get_tx_note","text":"get_tx_note <txid> Get the note attached to a transaction id.","title":"get_tx_note"},{"location":"documentation/wallet-cli/commands/#get_tx_proof","text":"get_tx_proof <txid> <address> [<message>] Generate a signature proving funds sent to <address> in <txid> , optionally with a challenge string <message> , using either the transaction secret key (when <address> is not your wallet's address) or the view secret key (otherwise), which does not disclose the secret key. >>> get_tx_proof e2xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx WmsxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxVo yes Wallet password: signature file saved to: aeon_tx_proof","title":"get_tx_proof"},{"location":"documentation/wallet-cli/commands/#help","text":"help [<command>] Get documentation information. >>> help get_tx_key Command usage: get_tx_key <txid> Command description: Get the transaction key (r) for a given <txid>","title":"help"},{"location":"documentation/wallet-cli/commands/#import_key_images","text":"import_key_images <file> Import a signed key images list and verify their spent status. This could be used to verify a cold wallet balance.","title":"import_key_images"},{"location":"documentation/wallet-cli/commands/#import_multisig_info","text":"import_multisig_info <filename> [<filename>...] Import multisig info from other participants. See MultiSig Guide .","title":"import_multisig_info"},{"location":"documentation/wallet-cli/commands/#import_outputs","text":"import_outputs <file> Import a set of outputs owned by this wallet. This could be used to load transactions to an offline wallet.","title":"import_outputs"},{"location":"documentation/wallet-cli/commands/#incoming_transfers","text":"incoming_transfers [available|unavailable] [verbose] [index=<N1>[,<N2>[,...]]] Show the incoming transfers, all or filtered by availability and address index.","title":"incoming_transfers"},{"location":"documentation/wallet-cli/commands/#integrated_address","text":"integrated_address [<payment_id> | <address>] Encode a payment ID into an integrated address for the current wallet public address (no argument uses a random payment ID), or decode an integrated address to standard address and payment ID.","title":"integrated_address"},{"location":"documentation/wallet-cli/commands/#is_output_spent","text":"is_output_spent <amount>/<key_offset> Checks whether an output is marked as spent. >>> mark_output_spent 500/2657 >>> is_output_spent 500/2657 Spent: 500/2657 >>> mark_output_unspent 500/2657 >>> is_output_spent 500/2657 Not spent: 500/2657","title":"is_output_spent"},{"location":"documentation/wallet-cli/commands/#locked_sweep_all","text":"locked_sweep_all [index=<N1>[,<N2>,...]] [<priority>] [<ring_size>] <address> <lockblocks> [<payment_id>] Send all unlocked balance to an address and lock it for <lockblocks> (max. 1000000). If the parameter index<N1>[,<N2>,...] is specified, the wallet sweeps outputs received by those address indices. <priority> is the priority of the sweep. The higher the priority, the higher the transaction fee. Valid values in priority order (from lowest to highest) are: unimportant, normal, elevated, priority. If omitted, the default value (see the command set priority ) is used. <ring_size> is the number of inputs to include for untraceability.","title":"locked_sweep_all"},{"location":"documentation/wallet-cli/commands/#locked_transfer","text":"locked_transfer [index=<N1>[,<N2>,...]] [<priority>] [<ring_size>] (<URI> | <addr> <amount>) <lockblocks> [<payment_id>] Transfer <amount> to <address> and lock it for <lockblocks> (max. 1000000). If the parameter index=<N1>[,<N2>,...] is specified, the wallet uses outputs received by addresses of those indices. <priority> is the priority of the transaction. The higher the priority, the higher the transaction fee. Valid values in priority order (from lowest to highest) are: unimportant, normal, elevated, priority. If omitted, the default value (see the command set priority ) is used. <ring_size> is the number of inputs to include for untraceability. Multiple payments can be made at once by adding URI_2 or <address_2> <amount_2> etc. (before the payment ID, if it's included).","title":"locked_transfer"},{"location":"documentation/wallet-cli/commands/#make_multisig","text":"make_multisig <threshold> <string1> [<string>...] Turn this wallet into a multisig wallet. See MultiSig Guide .","title":"make_multisig"},{"location":"documentation/wallet-cli/commands/#mark_output_spent","text":"mark_output_spent <amount>/<offset> | <filename> [add] Mark output(s) as spent so they never get selected as fake outputs in a ring. >>> mark_output_spent 500/2657 >>> is_output_spent 500/2657 Spent: 500/2657 >>> mark_output_unspent 500/2657 >>> is_output_spent 500/2657 Not spent: 500/2657","title":"mark_output_spent"},{"location":"documentation/wallet-cli/commands/#mark_output_unspent","text":"mark_output_unspent <amount>/<offset> Marks an output as unspent so it may get selected as a fake output in a ring. >>> mark_output_spent 500/2657 >>> is_output_spent 500/2657 Spent: 500/2657 >>> mark_output_unspent 500/2657 >>> is_output_spent 500/2657 Not spent: 500/2657","title":"mark_output_unspent"},{"location":"documentation/wallet-cli/commands/#password","text":"password Change the wallet's password.","title":"password"},{"location":"documentation/wallet-cli/commands/#payment_id","text":"payment_id Generate a new random full size payment id. These will be unencrypted on the blockchain, see integrated_address for encrypted short payment ids. >>> payment_id Random payment ID: <3b9c33d3444a1e8f489f9669f0c83cc72a6fef93c5133dfea3401d976dba32ec>","title":"payment_id"},{"location":"documentation/wallet-cli/commands/#payments","text":"payments <PID_1> [<PID_2> ... <PID_N>] Show the payments for the given payment IDs.","title":"payments"},{"location":"documentation/wallet-cli/commands/#prepare_multisig","text":"prepare_multisig Export data needed to create a multisig wallet. See MultiSig Guide .","title":"prepare_multisig"},{"location":"documentation/wallet-cli/commands/#print_ring","text":"print_ring <key_image> | <txid> Print the ring(s) used to spend a given key image or transaction (if the ring size is > 1).","title":"print_ring"},{"location":"documentation/wallet-cli/commands/#refresh","text":"refresh Synchronize with daemon.","title":"refresh"},{"location":"documentation/wallet-cli/commands/#rescan_bc","text":"rescan_bc Rescan the blockchain from scratch, losing any information which can not be recovered from the blockchain itself.","title":"rescan_bc"},{"location":"documentation/wallet-cli/commands/#rescan_spent","text":"rescan_spent Rescan the blockchain for spent outputs.","title":"rescan_spent"},{"location":"documentation/wallet-cli/commands/#save","text":"save Save the wallet data including key images, transaction history, etc.","title":"save"},{"location":"documentation/wallet-cli/commands/#save_bc","text":"save_bc Save the current blockchain data.","title":"save_bc"},{"location":"documentation/wallet-cli/commands/#save_known_rings","text":"save_known_rings Save known rings to the shared rings database","title":"save_known_rings"},{"location":"documentation/wallet-cli/commands/#save_watch_only","text":"save_watch_only Save a watch-only keys file.","title":"save_watch_only"},{"location":"documentation/wallet-cli/commands/#seed","text":"seed Display the Electrum-style mnemonic seed","title":"seed"},{"location":"documentation/wallet-cli/commands/#set","text":"set <option> [<value>] This command is used to set a variety of options in the wallet CLI. Available options: seed language Set the wallet's seed language. always-confirm-transfers <1|0> Whether to confirm unsplit txes. print-ring-members <1|0> Whether to print detailed information about ring members during confirmation. store-tx-info <1|0> Whether to store outgoing tx info (destination address, payment ID, tx secret key) for future reference. default-ring-size <n> Set the default ring size (obsolete). auto-refresh <1|0> Whether to automatically synchronize new blocks from the daemon. refresh-type <full|optimize-coinbase|no-coinbase|default> Set the wallet's refresh behaviour. priority [0|1|2|3|4] Set the fee to default/unimportant/normal/elevated/priority. confirm-missing-payment-id <1|0> ask-password <0|1|2 (or never|action|decrypt)> unit <aeon|milliaeon|microaeon|nanoaeon|picoaeon> Set the default aeon (sub-)unit. min-outputs-count [n] Try to keep at least that many outputs of value at least min-outputs-value. min-outputs-value [n] Try to keep at least min-outputs-count outputs of at least that value. merge-destinations <1|0> Whether to merge multiple payments to the same destination address. confirm-backlog <1|0> Whether to warn if there is transaction backlog. confirm-backlog-threshold [n] Set a threshold for confirm-backlog to only warn if the transaction backlog is greater than n blocks. refresh-from-block-height [n] Set the height before which to ignore blocks. auto-low-priority <1|0> Whether to automatically use the low priority fee level when it's safe to do so. segregate-pre-fork-outputs <1|0> Set this if you intend to spend outputs on both Aeon AND a key reusing fork. key-reuse-mitigation2 <1|0> Set this if you are not sure whether you will spend on a key reusing Aeon fork later. subaddress-lookahead <major>:<minor> Set the lookahead sizes for the subaddress hash table. segregation-height <n> Set to the height of a key reusing fork you want to use, 0 to use default. ignore-outputs-above <amount> Ignore outputs of amount above this threshold when spending. Value 0 is translated to the maximum value (18 million) which disables this filter. ignore-outputs-below <amount> Ignore outputs of amount below this threshold when spending.","title":"set"},{"location":"documentation/wallet-cli/commands/#set_daemon","text":"set_daemon <host>[:<port>] [trusted|untrusted] Set another daemon to connect to.","title":"set_daemon"},{"location":"documentation/wallet-cli/commands/#set_description","text":"set_description [free text note] >>> set_description My Favorite Wallet >>> get_description description found: My Favortite Wallet","title":"set_description"},{"location":"documentation/wallet-cli/commands/#set_log","text":"set_log <level>|{+,-,}<categories> Aeon source code has five log levels: 0 ERROR, 1 WARN, 2 INFO, 3 DEBUG, 4 TRACE. Each of the higher log levels contains the log levels below them. So for example set_log 3 will display levels 0, 1, 2, and 3. To restrict the log to a specific category, you can use the following example set_log net.p2p:INFO This will log all ERROR, WARN, and INFO only for net.p2p. To view all net.p2p logs use net.p2p:TRACE as that will log all lower levels.","title":"set_log"},{"location":"documentation/wallet-cli/commands/#set_ring","text":"set_ring <filename> | ( <key_image> absolute|relative <index> [<index>...] ) Set the ring used for a given key image, so it can be reused in a fork.","title":"set_ring"},{"location":"documentation/wallet-cli/commands/#set_tx_key","text":"set_tx_key <txid> <tx_key> Set the transaction key r for a given <txid> in case the tx was made by some other device or 3rd party wallet.","title":"set_tx_key"},{"location":"documentation/wallet-cli/commands/#set_tx_note","text":"set_tx_note <txid> [free text note] Set an arbitrary string note for a <txid> .","title":"set_tx_note"},{"location":"documentation/wallet-cli/commands/#show_transfer","text":"show_transfer <txid> Show information about a transfer to/from this address.","title":"show_transfer"},{"location":"documentation/wallet-cli/commands/#show_transfers","text":"show_transfers [in|out|pending|failed|pool|coinbase] [index=<N1>[,<N2>,...]] [<min_height> [<max_height>]] Show the incoming/outgoing transfers within an optional height range.","title":"show_transfers"},{"location":"documentation/wallet-cli/commands/#sign","text":"sign <file> Sign the contents of a file.","title":"sign"},{"location":"documentation/wallet-cli/commands/#sign_multisig","text":"sign_multisig <filename> Sign a multisig transaction from a file. See MultiSig Guide .","title":"sign_multisig"},{"location":"documentation/wallet-cli/commands/#sign_transfer","text":"sign_transfer [export_raw] Sign a transaction from a file. If the parameter \"export_raw\" is specified, transaction raw hex data suitable for the daemon RPC /sendrawtransaction is exported.","title":"sign_transfer"},{"location":"documentation/wallet-cli/commands/#spendkey","text":"spendkey Display the private spend key.","title":"spendkey"},{"location":"documentation/wallet-cli/commands/#start_mining","text":"start_mining [<number_of_threads>] [bg_mining] [ignore_battery] Start mining thread.","title":"start_mining"},{"location":"documentation/wallet-cli/commands/#status","text":"status Show synchronization status","title":"status"},{"location":"documentation/wallet-cli/commands/#stop_mining","text":"stop_mining Kills mining threads.","title":"stop_mining"},{"location":"documentation/wallet-cli/commands/#submit_multisig","text":"submit_multisig <filename> Submit a signed multisig transaction from a file","title":"submit_multisig"},{"location":"documentation/wallet-cli/commands/#submit_transfer","text":"submit_transfer Submit a signed transaction from a file.","title":"submit_transfer"},{"location":"documentation/wallet-cli/commands/#sweep_all","text":"sweep_all [index=<N1>[,<N2>,...]] [<priority>] [<ring_size>] <address> [<payment_id>] Send all unlocked balance to an address. If the parameter index<N1>[,<N2>,...] is specified, the wallet sweeps outputs received by those address indices. If omitted, the wallet sweeps outputs received by all address indices.","title":"sweep_all"},{"location":"documentation/wallet-cli/commands/#sweep_below","text":"sweep_below <amount_threshold> [index=<N1>[,<N2>,...]] [<priority>] [<ring_size>] <address> [<payment_id>] Send all unlocked outputs below an amount to an address. If the parameter index<N1>[,<N2>,...] is specified, the wallet sweeps outputs received by those address indices. If omitted, the wallet sweeps outputs received by all address indices.","title":"sweep_below"},{"location":"documentation/wallet-cli/commands/#sweep_single","text":"sweep_single [<priority>] [<ring_size>] <key_image> <address> [<payment_id>] Send a single output to an address.","title":"sweep_single"},{"location":"documentation/wallet-cli/commands/#sweep_unmixable","text":"sweep_unmixable Send all unmixable outputs to yourself with ring_size 1","title":"sweep_unmixable"},{"location":"documentation/wallet-cli/commands/#transfer","text":"transfer [index=<N1>[,<N2>,...]] [<priority>] [<ring_size>] (<URI> | <address> <amount>) [<payment_id>] Transfer <amount> to <address> . If the parameter index=<N1>[,<N2>,...] is specified, the wallet uses outputs received by addresses of those indices. <priority> is the priority of the transaction. The higher the priority, the higher the transaction fee. Valid values in priority order (from lowest to highest) are: unimportant, normal, elevated, priority. If omitted, the default value (see the command set priority ) is used. <ring_size> is the number of inputs to include for untraceability. Multiple payments can be made at once by adding URI_2 or <address_2> <amount_2> etc. (before the payment ID, if it's included)","title":"transfer"},{"location":"documentation/wallet-cli/commands/#unspent_outputs","text":"unspent_outputs [index=<N1>[,<N2>,...]] [<min_amount> [<max_amount>]] Show the unspent outputs of a specified address within an optional amount range. [wallet WXXXX]: unspent_outputs Amount: 0.000000010000, number of keys: 2 124698 129240 ... ... Amount: 2000.000000000000, number of keys: 1 129626 Min block height: 124698 Max block height: 129240 Min amount found: 0.000000010000 Max amount found: 2000.000000000000 Total count: ### Bin size: .... Outputs per *: 2.9 count ^ | * | | * | | * | | * | | * | | * | | * * * | | * * ** * | |* * * * ** * ** *| |* * * * * * * * ** ** * ** *| +--------------------------------------------------+--> block height ^ ^ 124698 129240","title":"unspent_outputs"},{"location":"documentation/wallet-cli/commands/#verify","text":"verify <filename> <address> <signature> Verify a signature on the contents of a file.","title":"verify"},{"location":"documentation/wallet-cli/commands/#version","text":"version Returns version information","title":"version"},{"location":"documentation/wallet-cli/commands/#viewkey","text":"viewkey Display the private view key.","title":"viewkey"},{"location":"documentation/wallet-cli/commands/#wallet_info","text":"wallet_info Show the wallet's information.","title":"wallet_info"},{"location":"documentation/wallet-cli/options/","text":"Wallet CLI Usage ./aeon-wallet-cli [options] [commands] Description This is the command line Aeon wallet. It is the perfect tool to manage aeon transfers and addresses. It needs to connect to an Aeon daemon to work correctly. Options config-file config-file=<path> Specify a config file to load options from. An example config file is shown below. # /path/to/file/aeond.conf daemon-address=192.168.0.1:9149 daemon-login=user:rpcpassword trusted-daemon=1 password=walletpassword Then launch wallet-cli with the following command: ./aeond --config-file=/path/to/file/aeond.conf help help Produce a help message with this list available options. log-file log-file=<path> The path to be used for the log file. Default argument: aeon-wallet-cli.log max-log-file-size max-log-file-size=<bytes> Maximum log file size in bytes. Default argument: 104850000 max-log-files max-log-files=<number> Maximum number of rotated log files to be saved (no limit by setting to 0). Default argument: 50 log-level log-level=<level|category> Aeon source code has five log levels: 0 ERROR, 1 WARN, 2 INFO, 3 DEBUG, 4 TRACE. Each of the higher log levels contains the log levels below them. So for example --log-level=3 will display levels 0, 1, 2, and 3. To restrict the log to a specific category, you can use the following example --log-level=net.p2p:INFO This will log all ERROR, WARN, and INFO only for net.p2p. To view all net.p2p logs use net.p2p:TRACE as that will log all lower levels. daemon-address daemon-address=<ip_address>:<port> Use aeon daemon at ip-address:port. --daemon-address=192.168.0.1:9149 daemon-host daemon-host=<ip_address> Use daemon instance at specific IP address instead of localhost. --daemon-host=192.168.0.1 daemon-login daemon-login=<username>[:<password>] username:password or username credentials for daemon RPC client. do-not-relay do-not-relay[=<1|0>] Newly created transactions received by this daemon will not be relayed to the Aeon network. Default argument: 0 daemon-port daemon-port=<port> Use daemon instance at specified port. Default argument: 11181 trusted-daemon trusted-daemon[=<1|0>] Enable the following commands which rely on a trusted daemon: rescan_spent import_key_images hw_key_images_sync start_mining A local connection is trusted by default whereas a remote connection is untrusted by default. untrusted-daemon untrusted-daemon[=<1|0>] Disable the following commands which rely on a trusted daemon: rescan_spent import_key_images hw_key_images_sync start_mining A local connection is trusted by default whereas a remote connection is untrusted by default. allow-mismatched-daemon-version allow-mismatched-daemon-version[=<1|0>] Allow communicating with a daemon that uses a different RPC version. restore-deterministic-wallet restore-deterministic-wallet[=<1|0>] Recover wallet using mnemonic seed. restore-multisig-wallet restore-multisig-wallet[=<1|0>] Recover multisig wallet using seed. generate-new-wallet generate-new-wallet=<path> Generate new wallet and save it to a file set by the argument. ./aeon-wallet-cli --generate-new-wallet=/path/to/file/mynewwallet This will create two new files: mynewwallet and mynewwallet.keys create-address-file create-address-file=<path> Create an address file for new wallets. wallet-file wallet-file=<path> Use wallet file at path. generate-from-json generate-from-json=<path_to_json> Generate wallet from JSON format file with content. { \"version\": 1, \"filename\": \"aeonwallet\", \"scan_from_height\": 1796000, \"password\": \"pass\", \"seed\": \"some valid seed ...\" } generate-from-keys generate-from-keys=<path_to_new_wallet> Generate wallet from private keys electrum-seed electrum-seed=<seed> Specify Electrum seed for wallet recovery/creation. generate-from-spend-key generate-from-spend-key=<path_to_new_wallet> Generate deterministic wallet from spend key. generate-from-view-key generate-from-view-key=<path_to_new_wallet> Generate incoming-only wallet from view key. restore-height restore-height=<height> Restore from specific blockchain height. mnemonic-language mnemonic-language=<language> Language for mnemonic. wallet-non-deterministic wallet-non-deterministic[=<1|0>] Generate non-deterministic view and spend keys generate-from-multisig-keys generate-from-multisig-keys=<path_to_new_wallet> Generate a master wallet from multisig wallet keys. password password=<password> Wallet password (escape/quote as needed). password-file password-file=<path> Wallet password file. shared-ringdb-dir shared-ringdb-dir=<path> Set shared ring database path. use-english-language-names use-english-language-names[=<1|0>] Display English language names. kdf-rounds kdf-rounds=<number-of-rounds> Number of rounds for the key derivation function. max-concurrency max-concurrency=<number_of_cpu_threads> Set maximum number of CPU threads used by the daemon process for syncronizing blocks and processing transactions. tx-notify tx-notify=<path> Run a program for each new incoming transaction, '%s' will be replaced by the transaction hash. stagenet stagenet[=<1|0>] Run on stagenet. The daemon must be launched with --stagenet flag. subaddress-lookahead subaddress-lookahead=<num_accounts>:<num_subaddresses> When pair with a new wallet, creates a lookup table of num_accounts each with num_subaddresses . In total, num_accounts * num_subaddresses addresses. testnet testnet[=<1|0>] Run on testnet. The daemon must be launched with --testnet flag. version version Output version information.","title":"Options"},{"location":"documentation/wallet-cli/options/#wallet-cli","text":"","title":"Wallet CLI"},{"location":"documentation/wallet-cli/options/#usage","text":"./aeon-wallet-cli [options] [commands]","title":"Usage"},{"location":"documentation/wallet-cli/options/#description","text":"This is the command line Aeon wallet. It is the perfect tool to manage aeon transfers and addresses. It needs to connect to an Aeon daemon to work correctly.","title":"Description"},{"location":"documentation/wallet-cli/options/#options","text":"","title":"Options"},{"location":"documentation/wallet-cli/options/#config-file","text":"config-file=<path> Specify a config file to load options from. An example config file is shown below. # /path/to/file/aeond.conf daemon-address=192.168.0.1:9149 daemon-login=user:rpcpassword trusted-daemon=1 password=walletpassword Then launch wallet-cli with the following command: ./aeond --config-file=/path/to/file/aeond.conf","title":"config-file"},{"location":"documentation/wallet-cli/options/#help","text":"help Produce a help message with this list available options.","title":"help"},{"location":"documentation/wallet-cli/options/#log-file","text":"log-file=<path> The path to be used for the log file. Default argument: aeon-wallet-cli.log","title":"log-file"},{"location":"documentation/wallet-cli/options/#max-log-file-size","text":"max-log-file-size=<bytes> Maximum log file size in bytes. Default argument: 104850000","title":"max-log-file-size"},{"location":"documentation/wallet-cli/options/#max-log-files","text":"max-log-files=<number> Maximum number of rotated log files to be saved (no limit by setting to 0). Default argument: 50","title":"max-log-files"},{"location":"documentation/wallet-cli/options/#log-level","text":"log-level=<level|category> Aeon source code has five log levels: 0 ERROR, 1 WARN, 2 INFO, 3 DEBUG, 4 TRACE. Each of the higher log levels contains the log levels below them. So for example --log-level=3 will display levels 0, 1, 2, and 3. To restrict the log to a specific category, you can use the following example --log-level=net.p2p:INFO This will log all ERROR, WARN, and INFO only for net.p2p. To view all net.p2p logs use net.p2p:TRACE as that will log all lower levels.","title":"log-level"},{"location":"documentation/wallet-cli/options/#daemon-address","text":"daemon-address=<ip_address>:<port> Use aeon daemon at ip-address:port. --daemon-address=192.168.0.1:9149","title":"daemon-address"},{"location":"documentation/wallet-cli/options/#daemon-host","text":"daemon-host=<ip_address> Use daemon instance at specific IP address instead of localhost. --daemon-host=192.168.0.1","title":"daemon-host"},{"location":"documentation/wallet-cli/options/#daemon-login","text":"daemon-login=<username>[:<password>] username:password or username credentials for daemon RPC client.","title":"daemon-login"},{"location":"documentation/wallet-cli/options/#do-not-relay","text":"do-not-relay[=<1|0>] Newly created transactions received by this daemon will not be relayed to the Aeon network. Default argument: 0","title":"do-not-relay"},{"location":"documentation/wallet-cli/options/#daemon-port","text":"daemon-port=<port> Use daemon instance at specified port. Default argument: 11181","title":"daemon-port"},{"location":"documentation/wallet-cli/options/#trusted-daemon","text":"trusted-daemon[=<1|0>] Enable the following commands which rely on a trusted daemon: rescan_spent import_key_images hw_key_images_sync start_mining A local connection is trusted by default whereas a remote connection is untrusted by default.","title":"trusted-daemon"},{"location":"documentation/wallet-cli/options/#untrusted-daemon","text":"untrusted-daemon[=<1|0>] Disable the following commands which rely on a trusted daemon: rescan_spent import_key_images hw_key_images_sync start_mining A local connection is trusted by default whereas a remote connection is untrusted by default.","title":"untrusted-daemon"},{"location":"documentation/wallet-cli/options/#allow-mismatched-daemon-version","text":"allow-mismatched-daemon-version[=<1|0>] Allow communicating with a daemon that uses a different RPC version.","title":"allow-mismatched-daemon-version"},{"location":"documentation/wallet-cli/options/#restore-deterministic-wallet","text":"restore-deterministic-wallet[=<1|0>] Recover wallet using mnemonic seed.","title":"restore-deterministic-wallet"},{"location":"documentation/wallet-cli/options/#restore-multisig-wallet","text":"restore-multisig-wallet[=<1|0>] Recover multisig wallet using seed.","title":"restore-multisig-wallet"},{"location":"documentation/wallet-cli/options/#generate-new-wallet","text":"generate-new-wallet=<path> Generate new wallet and save it to a file set by the argument. ./aeon-wallet-cli --generate-new-wallet=/path/to/file/mynewwallet This will create two new files: mynewwallet and mynewwallet.keys","title":"generate-new-wallet"},{"location":"documentation/wallet-cli/options/#create-address-file","text":"create-address-file=<path> Create an address file for new wallets.","title":"create-address-file"},{"location":"documentation/wallet-cli/options/#wallet-file","text":"wallet-file=<path> Use wallet file at path.","title":"wallet-file"},{"location":"documentation/wallet-cli/options/#generate-from-json","text":"generate-from-json=<path_to_json> Generate wallet from JSON format file with content. { \"version\": 1, \"filename\": \"aeonwallet\", \"scan_from_height\": 1796000, \"password\": \"pass\", \"seed\": \"some valid seed ...\" }","title":"generate-from-json"},{"location":"documentation/wallet-cli/options/#generate-from-keys","text":"generate-from-keys=<path_to_new_wallet> Generate wallet from private keys","title":"generate-from-keys"},{"location":"documentation/wallet-cli/options/#electrum-seed","text":"electrum-seed=<seed> Specify Electrum seed for wallet recovery/creation.","title":"electrum-seed"},{"location":"documentation/wallet-cli/options/#generate-from-spend-key","text":"generate-from-spend-key=<path_to_new_wallet> Generate deterministic wallet from spend key.","title":"generate-from-spend-key"},{"location":"documentation/wallet-cli/options/#generate-from-view-key","text":"generate-from-view-key=<path_to_new_wallet> Generate incoming-only wallet from view key.","title":"generate-from-view-key"},{"location":"documentation/wallet-cli/options/#restore-height","text":"restore-height=<height> Restore from specific blockchain height.","title":"restore-height"},{"location":"documentation/wallet-cli/options/#mnemonic-language","text":"mnemonic-language=<language> Language for mnemonic.","title":"mnemonic-language"},{"location":"documentation/wallet-cli/options/#wallet-non-deterministic","text":"wallet-non-deterministic[=<1|0>] Generate non-deterministic view and spend keys","title":"wallet-non-deterministic"},{"location":"documentation/wallet-cli/options/#generate-from-multisig-keys","text":"generate-from-multisig-keys=<path_to_new_wallet> Generate a master wallet from multisig wallet keys.","title":"generate-from-multisig-keys"},{"location":"documentation/wallet-cli/options/#password","text":"password=<password> Wallet password (escape/quote as needed).","title":"password"},{"location":"documentation/wallet-cli/options/#password-file","text":"password-file=<path> Wallet password file.","title":"password-file"},{"location":"documentation/wallet-cli/options/#shared-ringdb-dir","text":"shared-ringdb-dir=<path> Set shared ring database path.","title":"shared-ringdb-dir"},{"location":"documentation/wallet-cli/options/#use-english-language-names","text":"use-english-language-names[=<1|0>] Display English language names.","title":"use-english-language-names"},{"location":"documentation/wallet-cli/options/#kdf-rounds","text":"kdf-rounds=<number-of-rounds> Number of rounds for the key derivation function.","title":"kdf-rounds"},{"location":"documentation/wallet-cli/options/#max-concurrency","text":"max-concurrency=<number_of_cpu_threads> Set maximum number of CPU threads used by the daemon process for syncronizing blocks and processing transactions.","title":"max-concurrency"},{"location":"documentation/wallet-cli/options/#tx-notify","text":"tx-notify=<path> Run a program for each new incoming transaction, '%s' will be replaced by the transaction hash.","title":"tx-notify"},{"location":"documentation/wallet-cli/options/#stagenet","text":"stagenet[=<1|0>] Run on stagenet. The daemon must be launched with --stagenet flag.","title":"stagenet"},{"location":"documentation/wallet-cli/options/#subaddress-lookahead","text":"subaddress-lookahead=<num_accounts>:<num_subaddresses> When pair with a new wallet, creates a lookup table of num_accounts each with num_subaddresses . In total, num_accounts * num_subaddresses addresses.","title":"subaddress-lookahead"},{"location":"documentation/wallet-cli/options/#testnet","text":"testnet[=<1|0>] Run on testnet. The daemon must be launched with --testnet flag.","title":"testnet"},{"location":"documentation/wallet-cli/options/#version","text":"version Output version information.","title":"version"},{"location":"documentation/wallet-rpc/commands/","text":"Wallet RPC This page is still under construction. Follow the progress on github . Usage ./aeon-wallet-rpc [options] Description This allows one to interact with a wallet through HTTP requests. Every request has the following options: IP=127.0.0.1 PORT=5000 METHOD=\"get_balance\" PARAMS=\"{\"account_index\":0,\"address_indices\":[0,1]}\" Then send the information as a request to the server in the following format: curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"get_balance\",\"params\":{\"account_index\":0,\"address_indices\":[0,1]}}' -H 'Content-Type: application/json' Authentication When a user login is required for the RPC, it follows the HTTP digest authentication scheme specified in IETF RFC 2617 . If using curl , these parameters can be specified with the -u option as follows: curl http://127.0.0.1:5000/json_rpc -u username:password --digest -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"get_balance\",\"params\":{\"account_index\":0,\"address_indices\":[0,1]}}' -H 'Content-Type: application/json' To disable user authentication, use the option disable-rpc-login on launch. Commands Wallet information Addresses and Accounts Transfers Proofs and Signatures Multisig Wallet information get_balance Params int account_index int[] address_indices Response int balance int unlocked_balance bool multisig_import_needed Subaddress[] per_subaddress int blocks_to_unlock where Subaddress has the following attributes: Subaddress: int address_index string address int balance int unlocked_balance string label int num_unspent_outputs int blocks_to_unlock Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"get_balance\",\"params\":{\"account_index\":0,\"address_indices\":[0,1]}}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { \"balance\": 1000, \"blocks_to_unlock\": 0, \"multisig_import_needed\": false, \"per_subaddress\": [{ \"address\": \"W..........\", \"address_index\": 0, \"balance\": 500, \"blocks_to_unlock\": 0, \"label\": \"Primary account\", \"num_unspent_outputs\": 1, \"unlocked_balance\": 500 },{ \"address\": \"X...............\", \"address_index\": 1, \"balance\": 500, \"blocks_to_unlock\": 0, \"label\": \"new-sub\", \"num_unspent_outputs\": 1, \"unlocked_balance\": 500 }], \"unlocked_balance\": 1000 } } get_height Params Response int height Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"get_height\"}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { \"height\": 1294237 } } start_mining Params int threads_count bool do_background_mining bool ignore_battery Response Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"\",\"params\":}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { } } stop_mining Params Response Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"\",\"params\":}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { } } get_languages Params Response string[] languages Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"\",\"params\":}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { } } create_wallet Params string filename string password string language Response Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"\",\"params\":}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { } } open_wallet Params string filename string password Response Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"\",\"params\":}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { } } close_wallet Params Response Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"\",\"params\":}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { } } change_wallet_password Params string old_password string new_password Response Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"\",\"params\":}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { } } generate_from_keys Params int restore_height string filename string address string spendkey string viewkey string password Response string address string info Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"\",\"params\":}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { } } restore_deterministic_wallet Params int restore_height string filename string seed string seed_offset string password string language Response string address string seed string info bool was_deprecated Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"\",\"params\":}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { } } stop_wallet Params Response Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"\",\"params\":}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { } } rescan_blockchain Params Response Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"\",\"params\":}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { } } set_attribute Params string key string value Response Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"\",\"params\":}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { } } get_attribute Params string key Response string value Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"\",\"params\":}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { } } make_uri uri_spec string address string payment_id int amount string tx_description string recipient_name Params public uri_spec Response string uri Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"\",\"params\":}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { } } parse_uri Params string uri Response uri_spec uri string[] unknown_parameters Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"\",\"params\":}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { } } add_address_book_entry Params string address string payment_id string description Response int index Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"\",\"params\":}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { } } get_address_book_entry Params int[] entries entry int index string address string payment_id string description Response entry[] entries Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"\",\"params\":}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { } } delete_address_book_entry Params int index Response Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"\",\"params\":}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { } } rescan_spent Params Response Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"\",\"params\":}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { } } get_version Params Response int version Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"\",\"params\":}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { } } store Params Response Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"store\"}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { } } refresh Params int start_height Response int blocks_fetched bool received_money Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"\",\"params\":}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { } } set_daemon Params string address bool trusted bool ssl #if 0 // to be enabled when ssl support is added string ssl_support // disabled, enabled, autodetect string ssl_private_key_path string ssl_certificate_path string[] ssl_allowed_certificates string[] ssl_allowed_fingerprints bool ssl_allow_any_cert #endif #if 0 // to be enabled when ssl support is added #endif Response Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"\",\"params\":}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { } } set_log_level Params int8_t level Response Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"\",\"params\":}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { } } set_log_categories Params string categories Response string categories Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"\",\"params\":}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { } } Addresses and Accounts get_address Params int account_index int[] address_index Response string address Address[] addresses where Address has the following attributes: Address: string address string label int address_index bool used Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"get_address\",\"params\":{\"account_index\":0,\"address_index\":[0,1]}}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { \"address\": \"W.........\", \"addresses\": [{ \"address\": \"W.........\", \"address_index\": 0, \"label\": \"Primary account\", \"used\": true },{ \"address\": \"X.........\", \"address_index\": 1, \"label\": \"new-sub\", \"used\": true }] } } get_address_index Params string address Response SubaddressIndex index where SubaddressIndex has the following attributes: SubaddressIndex: int major int minor Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"get_address_index\",\"params\":{\"address\":\"X..................\"}}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { \"index\": { \"major\": 0, \"minor\": 1 } } } get_account_tags Params Response AccountTagInfo[] account_tags where AccountTagInfo has the following attributes: string tag string label int[] accounts Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"get_account_tags\"}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { } } get_accounts Params string tag // all accounts if empty, otherwise those accounts with this tag Response int total_balance int total_unlocked_balance SubaddressAccount[] subaddress_accounts where SubaddressAccount has the following attributes: SubaddressAccounts: int account_index int balance string base_address string label string tag int unlocked_balance Example curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"get_accounts\"}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { \"subaddress_accounts\": [{ \"account_index\": 0, \"balance\": 0, \"base_address\": \"W...................................\", \"label\": \"Primary account\", \"tag\": \"\", \"unlocked_balance\": 0 },{ \"account_index\": 1, \"balance\": 0, \"base_address\": \"X.......................................\", \"label\": \"\", \"tag\": \"\", \"unlocked_balance\": 0 }], \"total_balance\": 0, \"total_unlocked_balance\": 0 } } create_address Params int account_index string label Response string address int address_index Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"create_address\",\"params\":{\"account_index\":0,\"label\":\"test\"}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { \"address\": \"X.......................\", \"address_index\": 2 } } make_integrated_address Params string standard_address string payment_id Response string integrated_address string payment_id Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"make_integrated_address\",\"params\":{\"standard_address\":\"...\",\"payment_id\":\"...\"}}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { \"integrated_address\":\"...\", \"payment_id\":\"...\" } } split_integrated_address Params string integrated_address Response string standard_address string payment_id bool is_subaddress Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"\",\"params\":}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { } } label_address Params SubaddressIndex index string label where SubaddressIndex has the following attributes: SubaddressIndex: int major int minor Response Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"label_address\",\"params\":{\"index\":{\"major\":0,\"minor\":2},\"label\":\"test14314312\"}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { } } >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"get_address\",\"params\":{\"account_index\":0,\"address_index\":[2]}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { \"address\": \"W.............................\", \"addresses\": [{ \"address\": \"X.................................\", \"address_index\": 2, \"label\": \"test14314312\", \"used\": false }] } } create_account Params string label Response int account_index string address // the 0-th address for convenience Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"create_account\"}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { \"account_index\": 1, \"address\": \"X.....................\" } } label_account Params int account_index string label Response Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"label_account\",\"params\":{\"account_index\":0,\"label\":\"mywallet\"}}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { } } tag_accounts Params string tag int[] accounts Response Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"tag_accounts\",\"params\":{\"tag\":\"mywallet\",\"accounts\":[0]}}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { } } untag_accounts Params int[] accounts Response Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"untag_accounts\",\"params\":{\"accounts\":[0]}}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { } } set_account_tag_description Params string tag string description Response Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"set_account_tag_description\",\"params\":{\"tag\":\"mywallet\",\"description\":\"mydescription\"}}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { } } validate_address Params string address bool any_net_type bool allow_openalias Response bool valid bool integrated bool subaddress string nettype string openalias_address Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"\",\"params\":}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { } } Transfers transfer Params TransferDestination[] destinations int account_index int[] subaddr_indices int priority int mixin int ring_size int unlock_time string payment_id bool get_tx_key bool do_not_relay bool get_tx_hex bool get_tx_metadata where TransferDestination has the following attributes: int amount string address amount is in atomic units. Response string tx_hash string tx_key int amount int fee string tx_blob string tx_metadata string multisig_txset string unsigned_txset Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"transfer\",\"params\":{\"destinations\":[{\"amount\":10000,\"address\":\"W...\"}], \"account_index\":0, \"subaddress_indices\": [0], \"priority\":0, \"mixin\":0, \"ring_size\":0, \"unlock_time\":0, \"payment_id\":\"\", \"get_tx_key\":true, \"do_not_relay\":false,\"get_tx_hex\":true,\"get_tx_metadata\":true}}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { \"amount\": 10000, \"fee\": 1199990000, \"multisig_txset\": \"\", \"tx_blob\": \"...\", \"tx_hash\": \"...\", \"tx_key\": \"...\", \"tx_metadata\": \"...\", \"unsigned_txset\": \"\" } } transfer_split Params transfer_destination[] destinations int account_index int[] subaddr_indices int priority int mixin int ring_size int unlock_time string payment_id bool get_tx_keys bool do_not_relay bool get_tx_hex bool get_tx_metadata amount is in atomic units. Response string[] tx_hash_list string[] tx_key_list int[] amount_list int[] fee_list string[] tx_blob_list string[] tx_metadata_list string multisig_txset string unsigned_txset Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"transfer_split\",\"params\":{\"destinations\":[{\"amount\":10,\"address\":\"W...\"}], \"account_index\":0, \"subaddress_indices\": [0], \"priority\":0, \"mixin\":0, \"ring_size\":0, \"unlock_time\":0, \"payment_id\":\"\", \"get_tx_key\":true, \"do_not_relay\":false,\"get_tx_hex\":true,\"get_tx_metadata\":true}}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { \"amount_list\": [1,2,3,4] \"fee_list\": [1,1,1,1], \"multisig_txset\": \"\", \"tx_blob_list\": [\"...\",\"...\",\"...\",\"...\"], \"tx_hash_list\": [\"...\",\"...\",\"...\",\"...\"], \"tx_key_list\": [\"...\",\"...\",\"...\",\"...\"], \"tx_metadata_list\": [\"...\",\"...\",\"...\",\"...\"], \"unsigned_txset\": \"\" } } sign_transfer Params string unsigned_txset bool export_raw Response string signed_txset string[] tx_hash_list string[] tx_raw_list Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"sign_transfer\",\"params\":{\"unsigned_txset\":\"....\",\"export_raw\":true}}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { \"signed_txset\":\"...\", \"tx_hash_list\":[\"...\",\"...\"], \"tx_raw_list\":[\"...\",\"...\"] } } submit_transfer Params string tx_data_hex Response string[] tx_hash_list Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"submit_transfer\",\"params\":{\"tx_data_hex\":\"....\"}}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { \"tx_hash_list\":[\"...\",\"...\"] } } sweep_dust Params bool get_tx_keys bool do_not_relay bool get_tx_hex bool get_tx_metadata Response string[] tx_hash_list string[] tx_key_list int[] amount_list int[] fee_list string[] tx_blob_list string[] tx_metadata_list string multisig_txset string unsigned_txset Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"sweep_dust\",\"params\":{\"get_tx_key\":true, \"do_not_relay\":false,\"get_tx_hex\":true,\"get_tx_metadata\":true}}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { \"amount_list\": [1,2,3,4] \"fee_list\": [1,1,1,1], \"multisig_txset\": \"...\", \"tx_blob_list\": [\"...\",\"...\",\"...\",\"...\"], \"tx_hash_list\": [\"...\",\"...\",\"...\",\"...\"], \"tx_key_list\": [\"...\",\"...\",\"...\",\"...\"], \"tx_metadata_list\": [\"...\",\"...\",\"...\",\"...\"], \"unsigned_txset\": \"...\" } } sweep_all Params string address int account_index int[] subaddr_indices int priority int mixin int ring_size int unlock_time string payment_id bool get_tx_keys int below_amount bool do_not_relay bool get_tx_hex bool get_tx_metadata Response string[] tx_hash_list string[] tx_key_list int[] amount_list int[] fee_list string[] tx_blob_list string[] tx_metadata_list string multisig_txset string unsigned_txset Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"sweep_all\",\"params\":{\"address\":\"W...\", \"account_index\":0, \"subaddress_indices\": [0], \"priority\":0, \"mixin\":0, \"ring_size\":0, \"unlock_time\":0, \"payment_id\":\"\", \"get_tx_key\":true, \"do_not_relay\":false,\"get_tx_hex\":true,\"get_tx_metadata\":true}}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { \"amount_list\": [1,2,3,4] \"fee_list\": [1,1,1,1], \"multisig_txset\": \"...\", \"tx_blob_list\": [\"...\",\"...\",\"...\",\"...\"], \"tx_hash_list\": [\"...\",\"...\",\"...\",\"...\"], \"tx_key_list\": [\"...\",\"...\",\"...\",\"...\"], \"tx_metadata_list\": [\"...\",\"...\",\"...\",\"...\"], \"unsigned_txset\": \"...\" } } sweep_single Params string address int priority int mixin int ring_size int unlock_time string payment_id bool get_tx_key string key_image bool do_not_relay bool get_tx_hex bool get_tx_metadata Response string tx_hash string tx_key int amount int fee string tx_blob string tx_metadata string multisig_txset string unsigned_txset Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"sweep_all\",\"params\":{\"address\":\"W...\", \"account_index\":0, \"subaddress_indices\": [0], \"priority\":0, \"mixin\":0, \"ring_size\":0, \"unlock_time\":0, \"payment_id\":\"\", \"get_tx_key\":true, \"key_image\":\"...\",\"do_not_relay\":false,\"get_tx_hex\":true,\"get_tx_metadata\":true}}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { \"amount\": 10000, \"fee\": 1199990000, \"multisig_txset\": \"\", \"tx_blob\": \"...\", \"tx_hash\": \"...\", \"tx_key\": \"...\", \"tx_metadata\": \"...\", \"unsigned_txset\": \"\" } } relay_tx Params string hex Response string tx_hash Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"relay_tx\",\"params\":{\"hex\":\"...\"}}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { \"tx_hash\": \"...\" } } get_payments Params string payment_id Response PaymentDetails[] payments where PaymentDetails has the following attributes: string payment_id string tx_hash int amount int block_height int unlock_time SubaddressIndex subaddr_index string address where SubaddressIndex has the following attributes: SubaddressIndex: int major int minor Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"get_payments\",\"params\":{\"payment_id\":\"...\"}}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { [ \"payment_id\": \"...\", \"tx_hash\": \"...\", \"amount\": 10000, \"block_height\": 10000, \"unlock_time\": 10000, \"subaddr_index\": {\"major\":0,\"minor\":0}, \"address\": \"...\" ] , [ \"payment_id\": \"...\", \"tx_hash\": \"...\", \"amount\": 10000, \"block_height\": 10000, \"unlock_time\": 10000, \"subaddr_index\": {\"major\":0,\"minor\":0}, \"address\": \"...\" ] } } get_bulk_payments Params string[] payment_ids int min_block_height Response PaymentDetails[] payments where PaymentDetails has the following attributes: string payment_id string tx_hash int amount int block_height int unlock_time SubaddressIndex subaddr_index string address where SubaddressIndex has the following attributes: SubaddressIndex: int major int minor Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"get_bulk_payments\",\"params\":{\"payment_id\":[\"...\",\"...\",\"...\"],\"min_block_height\":1500000}}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { [ \"payment_id\": \"...\", \"tx_hash\": \"...\", \"amount\": 10000, \"block_height\": 10000, \"unlock_time\": 10000, \"subaddr_index\": {\"major\":0,\"minor\":0}, \"address\": \"...\" ] , [ \"payment_id\": \"...\", \"tx_hash\": \"...\", \"amount\": 10000, \"block_height\": 10000, \"unlock_time\": 10000, \"subaddr_index\": {\"major\":0,\"minor\":0}, \"address\": \"...\" ] } } incoming_transfers Params string transfer_type int account_index int[] subaddr_indices Response TransferDetails[] transfers where TransferDetails has the following attributes: int amount bool spent int global_index string tx_hash SubaddressIndex subaddr_index string key_image where SubaddressIndex has the following attributes: SubaddressIndex: int major int minor Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"incoming_transfers\",\"params\":{\"transfer_type\":\"...\",\"account_index\":0,\"subaddr_indices:[0]}}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { \"transfers\": [ \"amount\": 100, \"spent\": false, \"global_index\": 1, \"tx_hash\": \"...\", \"subaddr_index\": {\"major\": 1, \"minor\":0}, \"key_image\": \"...\", ] , [ \"amount\": 100, \"spent\": false, \"global_index\": 1, \"tx_hash\": \"...\", \"subaddr_index\": {\"major\": 1, \"minor\":0}, \"key_image\": \"...\", ] } } query_key Params string key_type Response string key Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"query_key\",\"params\":{\"key_type\":\"...\"}]}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { \"key\":\"...\" } } set_tx_notes Params string[] txids string[] notes Response Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"\",\"params\":}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { } } get_tx_notes Params string[] txids Response string[] notes Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"\",\"params\":}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { } } get_transfers Params bool in bool out bool pending bool failed bool pool bool filter_by_height int min_height int max_height int account_index int[] subaddr_indices transfer_entry string txid string payment_id int height int timestamp int amount int fee string note transfer_destination[] destinations string type int unlock_time cryptonote::subaddress_index subaddr_index cryptonote::subaddress_index[] subaddr_indices string address bool double_spend_seen int confirmations int suggested_confirmations_threshold Response transfer_entry[] in transfer_entry[] out transfer_entry[] pending transfer_entry[] failed transfer_entry[] pool Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"\",\"params\":}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { } } get_transfer_by_txid Params string txid int account_index Response transfer_entry transfer transfer_entry[] transfers Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"\",\"params\":}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { } } export_outputs Params Response string outputs_data_hex Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"\",\"params\":}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { } } import_outputs Params string outputs_data_hex Response int num_imported Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"\",\"params\":}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { } } export_key_images Params signed_key_image string key_image string signature Response signed_key_image[] signed_key_images Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"\",\"params\":}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { } } import_key_images signed_key_image string key_image string signature Params signed_key_image[] signed_key_images Response int height int spent int unspent Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"\",\"params\":}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { } } Proofs and Signatures sign Params string data Response string signature Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"\",\"params\":}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { } } verify Params string data string address string signature Response bool good Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"\",\"params\":}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { } } get_tx_key Params string txid Response string tx_key Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"\",\"params\":}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { } } check_tx_key Params string txid string tx_key string address Response int received bool in_pool int confirmations Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"\",\"params\":}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { } } get_tx_proof Params string txid string address string message Response string signature Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"\",\"params\":}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { } } check_tx_proof Params string txid string address string message string signature Response bool good int received bool in_pool int confirmations Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"\",\"params\":}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { } } get_spend_proof Params string txid string message Response string signature Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"\",\"params\":}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { } } check_spend_proof Params string txid string message string signature Response bool good Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"\",\"params\":}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { } } get_reserve_proof Params bool all int account_index // ignored when `all` is true int amount // ignored when `all` is true string message Response string signature Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"\",\"params\":}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { } } check_reserve_proof Params string address string message string signature Response bool good int total int spent Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"\",\"params\":}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { } } Multisig is_multisig Params Response bool multisig bool ready int threshold int total Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"\",\"params\":}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { } } prepare_multisig Params Response string multisig_info Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"\",\"params\":}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { } } make_multisig Params string[] multisig_info int threshold string password Response string address string multisig_info Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"\",\"params\":}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { } } export_multisig Params Response string info Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"\",\"params\":}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { } } import_multisig Params string[] info Response int n_outputs Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"\",\"params\":}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { } } finalize_multisig Params string password string[] multisig_info Response string address Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"\",\"params\":}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { } } exchange_multisig_keys Params string password string[] multisig_info Response string address string multisig_info Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"\",\"params\":}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { } } sign_multisig Params string tx_data_hex Response string tx_data_hex string[] tx_hash_list Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"\",\"params\":}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { } } submit_multisig Params string tx_data_hex Response string[] tx_hash_list Example >>> curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"\",\"params\":}' -H 'Content-Type: application/json' { \"id\": \"0\", \"jsonrpc\": \"2.0\", \"result\": { } }","title":"Commands"},{"location":"documentation/wallet-rpc/commands/#wallet-rpc","text":"This page is still under construction. Follow the progress on github .","title":"Wallet RPC"},{"location":"documentation/wallet-rpc/commands/#usage","text":"./aeon-wallet-rpc [options]","title":"Usage"},{"location":"documentation/wallet-rpc/commands/#description","text":"This allows one to interact with a wallet through HTTP requests. Every request has the following options: IP=127.0.0.1 PORT=5000 METHOD=\"get_balance\" PARAMS=\"{\"account_index\":0,\"address_indices\":[0,1]}\" Then send the information as a request to the server in the following format: curl http://127.0.0.1:5000/json_rpc -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"get_balance\",\"params\":{\"account_index\":0,\"address_indices\":[0,1]}}' -H 'Content-Type: application/json'","title":"Description"},{"location":"documentation/wallet-rpc/commands/#authentication","text":"When a user login is required for the RPC, it follows the HTTP digest authentication scheme specified in IETF RFC 2617 . If using curl , these parameters can be specified with the -u option as follows: curl http://127.0.0.1:5000/json_rpc -u username:password --digest -d '{\"jsonrpc\":\"2.0\",\"id\":\"0\",\"method\":\"get_balance\",\"params\":{\"account_index\":0,\"address_indices\":[0,1]}}' -H 'Content-Type: application/json' To disable user authentication, use the option disable-rpc-login on launch.","title":"Authentication"},{"location":"documentation/wallet-rpc/commands/#commands","text":"Wallet information Addresses and Accounts Transfers Proofs and Signatures Multisig","title":"Commands"},{"location":"documentation/wallet-rpc/commands/#wallet-information","text":"","title":"Wallet information"},{"location":"documentation/wallet-rpc/commands/#get_balance","text":"","title":"get_balance"},{"location":"documentation/wallet-rpc/commands/#get_height","text":"","title":"get_height"},{"location":"documentation/wallet-rpc/commands/#start_mining","text":"","title":"start_mining"},{"location":"documentation/wallet-rpc/commands/#stop_mining","text":"","title":"stop_mining"},{"location":"documentation/wallet-rpc/commands/#get_languages","text":"","title":"get_languages"},{"location":"documentation/wallet-rpc/commands/#create_wallet","text":"","title":"create_wallet"},{"location":"documentation/wallet-rpc/commands/#open_wallet","text":"","title":"open_wallet"},{"location":"documentation/wallet-rpc/commands/#close_wallet","text":"","title":"close_wallet"},{"location":"documentation/wallet-rpc/commands/#change_wallet_password","text":"","title":"change_wallet_password"},{"location":"documentation/wallet-rpc/commands/#generate_from_keys","text":"","title":"generate_from_keys"},{"location":"documentation/wallet-rpc/commands/#restore_deterministic_wallet","text":"","title":"restore_deterministic_wallet"},{"location":"documentation/wallet-rpc/commands/#stop_wallet","text":"","title":"stop_wallet"},{"location":"documentation/wallet-rpc/commands/#rescan_blockchain","text":"","title":"rescan_blockchain"},{"location":"documentation/wallet-rpc/commands/#set_attribute","text":"","title":"set_attribute"},{"location":"documentation/wallet-rpc/commands/#get_attribute","text":"","title":"get_attribute"},{"location":"documentation/wallet-rpc/commands/#make_uri","text":"uri_spec string address string payment_id int amount string tx_description string recipient_name","title":"make_uri"},{"location":"documentation/wallet-rpc/commands/#parse_uri","text":"","title":"parse_uri"},{"location":"documentation/wallet-rpc/commands/#add_address_book_entry","text":"","title":"add_address_book_entry"},{"location":"documentation/wallet-rpc/commands/#get_address_book_entry","text":"","title":"get_address_book_entry"},{"location":"documentation/wallet-rpc/commands/#delete_address_book_entry","text":"","title":"delete_address_book_entry"},{"location":"documentation/wallet-rpc/commands/#rescan_spent","text":"","title":"rescan_spent"},{"location":"documentation/wallet-rpc/commands/#get_version","text":"","title":"get_version"},{"location":"documentation/wallet-rpc/commands/#store","text":"","title":"store"},{"location":"documentation/wallet-rpc/commands/#refresh","text":"","title":"refresh"},{"location":"documentation/wallet-rpc/commands/#set_daemon","text":"","title":"set_daemon"},{"location":"documentation/wallet-rpc/commands/#set_log_level","text":"","title":"set_log_level"},{"location":"documentation/wallet-rpc/commands/#set_log_categories","text":"","title":"set_log_categories"},{"location":"documentation/wallet-rpc/commands/#addresses-and-accounts","text":"","title":"Addresses and Accounts"},{"location":"documentation/wallet-rpc/commands/#get_address","text":"","title":"get_address"},{"location":"documentation/wallet-rpc/commands/#get_address_index","text":"","title":"get_address_index"},{"location":"documentation/wallet-rpc/commands/#get_account_tags","text":"","title":"get_account_tags"},{"location":"documentation/wallet-rpc/commands/#get_accounts","text":"","title":"get_accounts"},{"location":"documentation/wallet-rpc/commands/#create_address","text":"","title":"create_address"},{"location":"documentation/wallet-rpc/commands/#make_integrated_address","text":"","title":"make_integrated_address"},{"location":"documentation/wallet-rpc/commands/#split_integrated_address","text":"","title":"split_integrated_address"},{"location":"documentation/wallet-rpc/commands/#label_address","text":"","title":"label_address"},{"location":"documentation/wallet-rpc/commands/#create_account","text":"","title":"create_account"},{"location":"documentation/wallet-rpc/commands/#label_account","text":"","title":"label_account"},{"location":"documentation/wallet-rpc/commands/#tag_accounts","text":"","title":"tag_accounts"},{"location":"documentation/wallet-rpc/commands/#untag_accounts","text":"","title":"untag_accounts"},{"location":"documentation/wallet-rpc/commands/#set_account_tag_description","text":"","title":"set_account_tag_description"},{"location":"documentation/wallet-rpc/commands/#validate_address","text":"","title":"validate_address"},{"location":"documentation/wallet-rpc/commands/#transfers","text":"","title":"Transfers"},{"location":"documentation/wallet-rpc/commands/#transfer","text":"","title":"transfer"},{"location":"documentation/wallet-rpc/commands/#transfer_split","text":"","title":"transfer_split"},{"location":"documentation/wallet-rpc/commands/#sign_transfer","text":"","title":"sign_transfer"},{"location":"documentation/wallet-rpc/commands/#submit_transfer","text":"","title":"submit_transfer"},{"location":"documentation/wallet-rpc/commands/#sweep_dust","text":"","title":"sweep_dust"},{"location":"documentation/wallet-rpc/commands/#sweep_all","text":"","title":"sweep_all"},{"location":"documentation/wallet-rpc/commands/#sweep_single","text":"","title":"sweep_single"},{"location":"documentation/wallet-rpc/commands/#relay_tx","text":"","title":"relay_tx"},{"location":"documentation/wallet-rpc/commands/#get_payments","text":"","title":"get_payments"},{"location":"documentation/wallet-rpc/commands/#get_bulk_payments","text":"","title":"get_bulk_payments"},{"location":"documentation/wallet-rpc/commands/#incoming_transfers","text":"","title":"incoming_transfers"},{"location":"documentation/wallet-rpc/commands/#query_key","text":"","title":"query_key"},{"location":"documentation/wallet-rpc/commands/#set_tx_notes","text":"","title":"set_tx_notes"},{"location":"documentation/wallet-rpc/commands/#get_tx_notes","text":"","title":"get_tx_notes"},{"location":"documentation/wallet-rpc/commands/#get_transfers","text":"","title":"get_transfers"},{"location":"documentation/wallet-rpc/commands/#get_transfer_by_txid","text":"","title":"get_transfer_by_txid"},{"location":"documentation/wallet-rpc/commands/#export_outputs","text":"","title":"export_outputs"},{"location":"documentation/wallet-rpc/commands/#import_outputs","text":"","title":"import_outputs"},{"location":"documentation/wallet-rpc/commands/#export_key_images","text":"","title":"export_key_images"},{"location":"documentation/wallet-rpc/commands/#import_key_images","text":"signed_key_image string key_image string signature","title":"import_key_images"},{"location":"documentation/wallet-rpc/commands/#proofs-and-signatures","text":"","title":"Proofs and Signatures"},{"location":"documentation/wallet-rpc/commands/#sign","text":"","title":"sign"},{"location":"documentation/wallet-rpc/commands/#verify","text":"","title":"verify"},{"location":"documentation/wallet-rpc/commands/#get_tx_key","text":"","title":"get_tx_key"},{"location":"documentation/wallet-rpc/commands/#check_tx_key","text":"","title":"check_tx_key"},{"location":"documentation/wallet-rpc/commands/#get_tx_proof","text":"","title":"get_tx_proof"},{"location":"documentation/wallet-rpc/commands/#check_tx_proof","text":"","title":"check_tx_proof"},{"location":"documentation/wallet-rpc/commands/#get_spend_proof","text":"","title":"get_spend_proof"},{"location":"documentation/wallet-rpc/commands/#check_spend_proof","text":"","title":"check_spend_proof"},{"location":"documentation/wallet-rpc/commands/#get_reserve_proof","text":"","title":"get_reserve_proof"},{"location":"documentation/wallet-rpc/commands/#check_reserve_proof","text":"","title":"check_reserve_proof"},{"location":"documentation/wallet-rpc/commands/#multisig","text":"","title":"Multisig"},{"location":"documentation/wallet-rpc/commands/#is_multisig","text":"","title":"is_multisig"},{"location":"documentation/wallet-rpc/commands/#prepare_multisig","text":"","title":"prepare_multisig"},{"location":"documentation/wallet-rpc/commands/#make_multisig","text":"","title":"make_multisig"},{"location":"documentation/wallet-rpc/commands/#export_multisig","text":"","title":"export_multisig"},{"location":"documentation/wallet-rpc/commands/#import_multisig","text":"","title":"import_multisig"},{"location":"documentation/wallet-rpc/commands/#finalize_multisig","text":"","title":"finalize_multisig"},{"location":"documentation/wallet-rpc/commands/#exchange_multisig_keys","text":"","title":"exchange_multisig_keys"},{"location":"documentation/wallet-rpc/commands/#sign_multisig","text":"","title":"sign_multisig"},{"location":"documentation/wallet-rpc/commands/#submit_multisig","text":"","title":"submit_multisig"},{"location":"documentation/wallet-rpc/options/","text":"Wallet RPC Usage ./aeon-wallet-rpc [options] Description This allows one to interact with a wallet through HTTP requests. It is necessary to have a daemon running locally and to specify a wallet file to load using either wallet-file or wallet-dir along with password , password-file , or prompt-for-password . Additionally a port must be specified through rpc-bind-port . To disable user authentication, use the option disable-rpc-login on launch. Options config-file config-file=<path> Specify a config file to load options from. An example config file is shown below. # /path/to/file/aeond.conf daemon-address=192.168.0.1:9149 daemon-login=user:rpcpassword trusted-daemon=1 password=walletpassword Then launch wallet-cli with the following command: ./aeond --config-file=/path/to/file/aeond.conf help help Produce a help message with this list available options. log-file log-file=<path> The path to be used for the log file. Default argument: aeon-wallet-cli.log max-log-file-size max-log-file-size=<bytes> Maximum log file size in bytes. Default argument: 104850000 max-log-files max-log-files=<number> Maximum number of rotated log files to be saved (no limit by setting to 0). Default argument: 50 log-level log-level=<level|category> Aeon source code has five log levels: 0 ERROR, 1 WARN, 2 INFO, 3 DEBUG, 4 TRACE. Each of the higher log levels contains the log levels below them. So for example --log-level=3 will display levels 0, 1, 2, and 3. To restrict the log to a specific category, you can use the following example --log-level=net.p2p:INFO This will log all ERROR, WARN, and INFO only for net.p2p. To view all net.p2p logs use net.p2p:TRACE as that will log all lower levels. daemon-address daemon-address=<ip_address>:<port> Use aeon daemon at ip-address:port. --daemon-address=192.168.0.1:9149 daemon-host daemon-host=<ip_address> Use daemon instance at specific IP address instead of localhost. --daemon-host=192.168.0.1 confirm-external-bind confirm-external-bind[=<1|0>] Confirm ip value is NOT a loopback (local) IP. daemon-login daemon-login=<username>[:<password>] username:password or username credentials for daemon RPC client. daemon-port daemon-port=<port> Use daemon instance at specified port. Default argument: 11181 trusted-daemon trusted-daemon[=<1|0>] Enable the following commands which rely on a trusted daemon: rescan_spent import_key_images hw_key_images_sync start_mining A local connection is trusted by default whereas a remote connection is untrusted by default. untrusted-daemon untrusted-daemon[=<1|0>] Disable the following commands which rely on a trusted daemon: rescan_spent import_key_images hw_key_images_sync start_mining A local connection is trusted by default whereas a remote connection is untrusted by default. password password=<password> Wallet password (escape/quote as needed). password-file password-file=<path> Wallet password file. prompt-for-password prompt-for-password[=<1|0> Prompts for password when not provided. rpc-bind-ip rpc-bind-ip=<ip_address> Specify IP to bind RPC server. rpc-login rpc-login=<username>[:<password>] Specify username[:password] required for RPC server. disable-rpc-login disable-rpc-login[=<1|0> Disable HTTP authentication for RPC connections served by this process. rpc-access-control-origins rpc-access-control-origins=<list,of,comma,separated,urls> Specify a comma separated list of origins to allow cross origin resource sharing. rpc-bind-port rpc-bind-port=<port> Specify IP to bind RPC server. restricted-rpc restricted-rpc[=<1|0>] Restrict RPC to view only commands and do not return privacy sensitive data in RPC calls. wallet-dir wallet-dir=<path> Directory for newly created wallets. wallet-file wallet-file=<path> Use wallet file at path . generate-from-json generate-from-json=<path_to_json> Generate wallet from JSON format file. shared-ringdb-dir shared-ringdb-dir=<path> Set shared ring database path. detach detach[=<0|1>] Run as daemon. kdf-rounds kdf-rounds=<number-of-rounds> Number of rounds for the key derivation function. max-concurrency max-concurrency=<number_of_cpu_threads> Set maximum number of CPU threads used by the daemon process for syncronizing blocks and processing transactions. non-interactive non-interactive[=<0|1>] Run non-interactive tx-notify tx-notify=<path> Run a program for each new incoming transaction, '%s' will be replaced by the transaction hash. pidfile pidfile=<path_to_file> File path to write the rpc's PID to (optional, requires --detach). stagenet stagenet[=<1|0>] Run on stagenet. The daemon must be launched with --stagenet flag. testnet testnet[=<1|0>] Run on testnet. The daemon must be launched with --testnet flag. version version Output version information.","title":"Options"},{"location":"documentation/wallet-rpc/options/#wallet-rpc","text":"","title":"Wallet RPC"},{"location":"documentation/wallet-rpc/options/#usage","text":"./aeon-wallet-rpc [options]","title":"Usage"},{"location":"documentation/wallet-rpc/options/#description","text":"This allows one to interact with a wallet through HTTP requests. It is necessary to have a daemon running locally and to specify a wallet file to load using either wallet-file or wallet-dir along with password , password-file , or prompt-for-password . Additionally a port must be specified through rpc-bind-port . To disable user authentication, use the option disable-rpc-login on launch.","title":"Description"},{"location":"documentation/wallet-rpc/options/#options","text":"","title":"Options"},{"location":"documentation/wallet-rpc/options/#config-file","text":"config-file=<path> Specify a config file to load options from. An example config file is shown below. # /path/to/file/aeond.conf daemon-address=192.168.0.1:9149 daemon-login=user:rpcpassword trusted-daemon=1 password=walletpassword Then launch wallet-cli with the following command: ./aeond --config-file=/path/to/file/aeond.conf","title":"config-file"},{"location":"documentation/wallet-rpc/options/#help","text":"help Produce a help message with this list available options.","title":"help"},{"location":"documentation/wallet-rpc/options/#log-file","text":"log-file=<path> The path to be used for the log file. Default argument: aeon-wallet-cli.log","title":"log-file"},{"location":"documentation/wallet-rpc/options/#max-log-file-size","text":"max-log-file-size=<bytes> Maximum log file size in bytes. Default argument: 104850000","title":"max-log-file-size"},{"location":"documentation/wallet-rpc/options/#max-log-files","text":"max-log-files=<number> Maximum number of rotated log files to be saved (no limit by setting to 0). Default argument: 50","title":"max-log-files"},{"location":"documentation/wallet-rpc/options/#log-level","text":"log-level=<level|category> Aeon source code has five log levels: 0 ERROR, 1 WARN, 2 INFO, 3 DEBUG, 4 TRACE. Each of the higher log levels contains the log levels below them. So for example --log-level=3 will display levels 0, 1, 2, and 3. To restrict the log to a specific category, you can use the following example --log-level=net.p2p:INFO This will log all ERROR, WARN, and INFO only for net.p2p. To view all net.p2p logs use net.p2p:TRACE as that will log all lower levels.","title":"log-level"},{"location":"documentation/wallet-rpc/options/#daemon-address","text":"daemon-address=<ip_address>:<port> Use aeon daemon at ip-address:port. --daemon-address=192.168.0.1:9149","title":"daemon-address"},{"location":"documentation/wallet-rpc/options/#daemon-host","text":"daemon-host=<ip_address> Use daemon instance at specific IP address instead of localhost. --daemon-host=192.168.0.1","title":"daemon-host"},{"location":"documentation/wallet-rpc/options/#confirm-external-bind","text":"confirm-external-bind[=<1|0>] Confirm ip value is NOT a loopback (local) IP.","title":"confirm-external-bind"},{"location":"documentation/wallet-rpc/options/#daemon-login","text":"daemon-login=<username>[:<password>] username:password or username credentials for daemon RPC client.","title":"daemon-login"},{"location":"documentation/wallet-rpc/options/#daemon-port","text":"daemon-port=<port> Use daemon instance at specified port. Default argument: 11181","title":"daemon-port"},{"location":"documentation/wallet-rpc/options/#trusted-daemon","text":"trusted-daemon[=<1|0>] Enable the following commands which rely on a trusted daemon: rescan_spent import_key_images hw_key_images_sync start_mining A local connection is trusted by default whereas a remote connection is untrusted by default.","title":"trusted-daemon"},{"location":"documentation/wallet-rpc/options/#untrusted-daemon","text":"untrusted-daemon[=<1|0>] Disable the following commands which rely on a trusted daemon: rescan_spent import_key_images hw_key_images_sync start_mining A local connection is trusted by default whereas a remote connection is untrusted by default.","title":"untrusted-daemon"},{"location":"documentation/wallet-rpc/options/#password","text":"password=<password> Wallet password (escape/quote as needed).","title":"password"},{"location":"documentation/wallet-rpc/options/#password-file","text":"password-file=<path> Wallet password file.","title":"password-file"},{"location":"documentation/wallet-rpc/options/#prompt-for-password","text":"prompt-for-password[=<1|0> Prompts for password when not provided.","title":"prompt-for-password"},{"location":"documentation/wallet-rpc/options/#rpc-bind-ip","text":"rpc-bind-ip=<ip_address> Specify IP to bind RPC server.","title":"rpc-bind-ip"},{"location":"documentation/wallet-rpc/options/#rpc-login","text":"rpc-login=<username>[:<password>] Specify username[:password] required for RPC server.","title":"rpc-login"},{"location":"documentation/wallet-rpc/options/#disable-rpc-login","text":"disable-rpc-login[=<1|0> Disable HTTP authentication for RPC connections served by this process.","title":"disable-rpc-login"},{"location":"documentation/wallet-rpc/options/#rpc-access-control-origins","text":"rpc-access-control-origins=<list,of,comma,separated,urls> Specify a comma separated list of origins to allow cross origin resource sharing.","title":"rpc-access-control-origins"},{"location":"documentation/wallet-rpc/options/#rpc-bind-port","text":"rpc-bind-port=<port> Specify IP to bind RPC server.","title":"rpc-bind-port"},{"location":"documentation/wallet-rpc/options/#restricted-rpc","text":"restricted-rpc[=<1|0>] Restrict RPC to view only commands and do not return privacy sensitive data in RPC calls.","title":"restricted-rpc"},{"location":"documentation/wallet-rpc/options/#wallet-dir","text":"wallet-dir=<path> Directory for newly created wallets.","title":"wallet-dir"},{"location":"documentation/wallet-rpc/options/#wallet-file","text":"wallet-file=<path> Use wallet file at path .","title":"wallet-file"},{"location":"documentation/wallet-rpc/options/#generate-from-json","text":"generate-from-json=<path_to_json> Generate wallet from JSON format file.","title":"generate-from-json"},{"location":"documentation/wallet-rpc/options/#shared-ringdb-dir","text":"shared-ringdb-dir=<path> Set shared ring database path.","title":"shared-ringdb-dir"},{"location":"documentation/wallet-rpc/options/#detach","text":"detach[=<0|1>] Run as daemon.","title":"detach"},{"location":"documentation/wallet-rpc/options/#kdf-rounds","text":"kdf-rounds=<number-of-rounds> Number of rounds for the key derivation function.","title":"kdf-rounds"},{"location":"documentation/wallet-rpc/options/#max-concurrency","text":"max-concurrency=<number_of_cpu_threads> Set maximum number of CPU threads used by the daemon process for syncronizing blocks and processing transactions.","title":"max-concurrency"},{"location":"documentation/wallet-rpc/options/#non-interactive","text":"non-interactive[=<0|1>] Run non-interactive","title":"non-interactive"},{"location":"documentation/wallet-rpc/options/#tx-notify","text":"tx-notify=<path> Run a program for each new incoming transaction, '%s' will be replaced by the transaction hash.","title":"tx-notify"},{"location":"documentation/wallet-rpc/options/#pidfile","text":"pidfile=<path_to_file> File path to write the rpc's PID to (optional, requires --detach).","title":"pidfile"},{"location":"documentation/wallet-rpc/options/#stagenet","text":"stagenet[=<1|0>] Run on stagenet. The daemon must be launched with --stagenet flag.","title":"stagenet"},{"location":"documentation/wallet-rpc/options/#testnet","text":"testnet[=<1|0>] Run on testnet. The daemon must be launched with --testnet flag.","title":"testnet"},{"location":"documentation/wallet-rpc/options/#version","text":"version Output version information.","title":"version"},{"location":"guides/mining/","text":"Mining From Aeon HeroMiners pool . SRBminer-Multi v0.5.4+ (Windows, Linux, CPU, AMD) Method 1: Run guided_setup.bat file and answer questions: Configuration name: aeon-herominers Do you want to use multi algorithm mining? n or y (optional) Enter algorithm 0 name: k12 Address and port of mining pool: aeon.herominers.com:10651 Wallet address: YOUR_AEON_WALLET_ADDRESS Password: YOUR_WORKER_NAME Do you want to use your CPU for mining algorithm 0 ? n or y (optional) Do you want to enable logging? n or y (optional) Do you want to enable compute mode? y or n (optional) Method 2: Create aeon-herominers.bat file and copy / paste example below. setx GPU_MAX_HEAP_SIZE 100 setx GPU_MAX_USE_SYNC_OBJECTS 1 setx GPU_SINGLE_ALLOC_PERCENT 100 setx GPU_MAX_ALLOC_PERCENT 100 setx GPU_MAX_SINGLE_ALLOC_PERCENT 100 setx GPU_ENABLE_LARGE_ALLOCATION 100 setx GPU_MAX_WORKGROUP_SIZE 1024 @echo off cd %~dp0 cls SRBMiner-MULTI.exe --algorithm k12 --pool aeon.herominers.com:10651 --wallet YOUR_AEON_WALLET_ADDRESS --password YOUR_WORKER_NAME pause XMRig KangarooTwelve v1.0.0+ (Windows, Linux, CPU) Create aeon-herominers.cmd file and copy / paste example below. @echo off xmrig.exe --donate-level 1 -o aeon.herominers.com:10651 -u YOUR_AEON_WALLET_ADDRESS -p YOUR_WORKER_NAME -a k12 -k pause Vulkan XMR Miner v0.4.1+ (Windows, Linux, CPU, GPU) Create aeon-herominers.cmd file and copy / paste example below. Your crypto: 2 (Aeon v7/v8) Mining pool address (hostname/IP): aeon.herominers.com Mining pool port: 10651 Your address (with optional .something at the end): YOUR_AEON_WALLET_ADDRESS Password (or x if none): YOUR_WORKER_NAME Monitoring listen port (0 if no JSON/graphic console): 0 Answer other questions regarding your GPU cards and mining will start. xmr-node-proxy Example config.json . \"pools\": [ { \"hostname\": \" aeon.herominers.com \", \"port\": 10651, \"ssl\": false, \"allowSelfSignedSSL\": false, \"share\": 100, \"username\": \" YOUR_AEON_WALLET_ADDRESS \", \"password\": \" YOUR_WORKER_NAME \", \"keepAlive\": true, \"algo\": \" k12 \", \"blob_type\": \" aeon \", \"default\": true } ],","title":"Mining"},{"location":"guides/mining/#mining","text":"From Aeon HeroMiners pool .","title":"Mining"},{"location":"guides/mining/#srbminer-multi-v054-windows-linux-cpu-amd","text":"Method 1: Run guided_setup.bat file and answer questions: Configuration name: aeon-herominers Do you want to use multi algorithm mining? n or y (optional) Enter algorithm 0 name: k12 Address and port of mining pool: aeon.herominers.com:10651 Wallet address: YOUR_AEON_WALLET_ADDRESS Password: YOUR_WORKER_NAME Do you want to use your CPU for mining algorithm 0 ? n or y (optional) Do you want to enable logging? n or y (optional) Do you want to enable compute mode? y or n (optional) Method 2: Create aeon-herominers.bat file and copy / paste example below. setx GPU_MAX_HEAP_SIZE 100 setx GPU_MAX_USE_SYNC_OBJECTS 1 setx GPU_SINGLE_ALLOC_PERCENT 100 setx GPU_MAX_ALLOC_PERCENT 100 setx GPU_MAX_SINGLE_ALLOC_PERCENT 100 setx GPU_ENABLE_LARGE_ALLOCATION 100 setx GPU_MAX_WORKGROUP_SIZE 1024 @echo off cd %~dp0 cls SRBMiner-MULTI.exe --algorithm k12 --pool aeon.herominers.com:10651 --wallet YOUR_AEON_WALLET_ADDRESS --password YOUR_WORKER_NAME pause","title":"SRBminer-Multi v0.5.4+ (Windows, Linux, CPU, AMD)"},{"location":"guides/mining/#xmrig-kangarootwelve-v100-windows-linux-cpu","text":"Create aeon-herominers.cmd file and copy / paste example below. @echo off xmrig.exe --donate-level 1 -o aeon.herominers.com:10651 -u YOUR_AEON_WALLET_ADDRESS -p YOUR_WORKER_NAME -a k12 -k pause","title":"XMRig KangarooTwelve v1.0.0+ (Windows, Linux, CPU)"},{"location":"guides/mining/#vulkan-xmr-miner-v041-windows-linux-cpu-gpu","text":"Create aeon-herominers.cmd file and copy / paste example below. Your crypto: 2 (Aeon v7/v8) Mining pool address (hostname/IP): aeon.herominers.com Mining pool port: 10651 Your address (with optional .something at the end): YOUR_AEON_WALLET_ADDRESS Password (or x if none): YOUR_WORKER_NAME Monitoring listen port (0 if no JSON/graphic console): 0 Answer other questions regarding your GPU cards and mining will start.","title":"Vulkan XMR Miner v0.4.1+ (Windows, Linux, CPU, GPU)"},{"location":"guides/mining/#xmr-node-proxy","text":"Example config.json . \"pools\": [ { \"hostname\": \" aeon.herominers.com \", \"port\": 10651, \"ssl\": false, \"allowSelfSignedSSL\": false, \"share\": 100, \"username\": \" YOUR_AEON_WALLET_ADDRESS \", \"password\": \" YOUR_WORKER_NAME \", \"keepAlive\": true, \"algo\": \" k12 \", \"blob_type\": \" aeon \", \"default\": true } ],","title":"xmr-node-proxy"},{"location":"the-project/code-of-conduct/","text":"Code of Conduct Code of Conduct (22/C4.1) License Copyright (c) 2009-2015 Pieter Hintjens. Copyright (c) 2017-2018 The Monero Project. This Specification is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version. This Specification is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program; if not, see http://www.gnu.org/licenses . Language The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC 2119. The \"Monero Maintainer Team\" is defined in this document as the following users: - fluffypony - moneromooo - hyc Goals C4 is meant to provide a reusable optimal collaboration model for open source software projects. It has these specific goals: To maximize the scale and diversity of the community around a project, by reducing the friction for new Contributors and creating a scaled participation model with strong positive feedbacks; To relieve dependencies on key individuals by separating different skill sets so that there is a larger pool of competence in any required domain; To allow the project to develop faster and more accurately, by increasing the diversity of the decision making process; To support the natural life cycle of project versions from experimental through to stable, by allowing safe experimentation, rapid failure, and isolation of stable code; To reduce the internal complexity of project repositories, thus making it easier for Contributors to participate and reducing the scope for error; To enforce collective ownership of the project, which increases economic incentive to Contributors and reduces the risk of hijack by hostile entities. Design Preliminaries The project SHALL use the git distributed revision control system. The project SHALL be hosted on github.com or equivalent, herein called the \"Platform\". The project SHALL use the Platform issue tracker. Non-GitHub example: \"Platform\" could be a vanilla git repo and Trac hosted on the same machine/network. The Platform issue tracker would be Trac. The project SHOULD have clearly documented guidelines for code style. A \"Contributor\" is a person who wishes to provide a patch, being a set of commits that solve some clearly identified problem. A \"Maintainer\" is a person who merges patches to the project. Maintainers are not developers; their job is to enforce process. Contributors SHALL NOT have commit access to the repository unless they are also Maintainers. Maintainers SHALL have commit access to the repository. Everyone, without distinction or discrimination, SHALL have an equal right to become a Contributor under the terms of this contract. Licensing and ownership The project SHALL use a share-alike license, such as BSD-3, the GPLv3 or a variant thereof (LGPL, AGPL), or the MPLv2. All contributions to the project source code (\"patches\") SHALL use the same license as the project. All patches are owned by their authors. There SHALL NOT be any copyright assignment process. The copyrights in the project SHALL be owned collectively by all its Contributors. Each Contributor SHALL be responsible for identifying themselves in the project Contributor list. Patch requirements Maintainers MUST have a Platform account and SHOULD use their real names or a well-known alias. Contributors SHOULD have a Platform account and MAY use their real names or a well-known alias. A patch SHOULD be a minimal and accurate answer to exactly one identified and agreed problem. A patch MUST adhere to the code style guidelines of the project if these are defined. A patch MUST adhere to the \"Evolution of Public Contracts\" guidelines defined below. A patch SHALL NOT include non-trivial code from other projects unless the Contributor is the original author of that code. A patch MUST compile cleanly and pass project self-tests on at least the principle target platform. A patch commit message SHOULD consist of a single short (less than 50 character) line summarizing the change, optionally followed by a blank line and then a more thorough description. A \"Correct Patch\" is one that satisfies the above requirements. Development process Change on the project SHALL be governed by the pattern of accurately identifying problems and applying minimal, accurate solutions to these problems. To request changes, a user SHOULD log an issue on the project Platform issue tracker. The user or Contributor SHOULD write the issue by describing the problem they face or observe. The user or Contributor SHOULD seek consensus on the accuracy of their observation, and the value of solving the problem. Users SHALL NOT log feature requests, ideas, or suggestions unrelated to Monero code or Monero's dependency code or Monero's potential/future dependency code or research which successfully implements Monero. Users SHALL NOT log any solutions to problems (verifiable or hypothetical) of which are not explicitly documented and/or not provable and/or cannot be reasonably proven. Thus, the release history of the project SHALL be a list of meaningful issues logged and solved. To work on an issue, a Contributor SHALL fork the project repository and then work on their forked repository. To submit a patch, a Contributor SHALL create a Platform pull request back to the project. A Contributor SHALL NOT commit changes directly to the project. To discuss a patch, people MAY comment on the Platform pull request, on the commit, or elsewhere. To accept or reject a patch, a Maintainer SHALL use the Platform interface. Maintainers SHOULD NOT merge their own patches except in exceptional cases, such as non-responsiveness from other Maintainers for an extended period (more than 30 days) or unless urgent as defined by the Monero Maintainers Team. Maintainers SHALL NOT make value judgments on correct patches unless the Maintainer (as may happen in rare circumstances) is a core code developer. Maintainers MUST NOT merge pull requests in less than 168 hours (1 week) unless deemed urgent by at least 2 people from the Monero Maintainer Team. The Contributor MAY tag an issue as \"Ready\" after making a pull request for the issue. The user who created an issue SHOULD close the issue after checking the patch is successful. Maintainers SHOULD ask for improvements to incorrect patches and SHOULD reject incorrect patches if the Contributor does not respond constructively. Any Contributor who has value judgments on a correct patch SHOULD express these via their own patches. Maintainers MAY commit changes to non-source documentation directly to the project. Creating stable releases The project SHALL have one branch (\"master\") that always holds the latest in-progress version and SHOULD always build. The project SHALL NOT use topic branches for any reason. Personal forks MAY use topic branches. To make a stable release someone SHALL fork the repository by copying it and thus become maintainer of this repository. Forking a project for stabilization MAY be done unilaterally and without agreement of project maintainers. A patch to a stabilization project declared \"stable\" SHALL be accompanied by a reproducible test case. Evolution of public contracts All Public Contracts (APIs or protocols) SHALL be documented. All Public Contracts SHOULD have space for extensibility and experimentation. A patch that modifies a stable Public Contract SHOULD not break existing applications unless there is overriding consensus on the value of doing this. A patch that introduces new features to a Public Contract SHOULD do so using new names. Old names SHOULD be deprecated in a systematic fashion by marking new names as \"experimental\" until they are stable, then marking the old names as \"deprecated\". When sufficient time has passed, old deprecated names SHOULD be marked \"legacy\" and eventually removed. Old names SHALL NOT be reused by new features. When old names are removed, their implementations MUST provoke an exception (assertion) if used by applications. Project administration The project founders SHALL act as Administrators to manage the set of project Maintainers. The Administrators SHALL ensure their own succession over time by promoting the most effective Maintainers. A new Contributor who makes a correct patch SHALL be invited to become a Maintainer. Administrators MAY remove Maintainers who are inactive for an extended period of time, or who repeatedly fail to apply this process accurately. Administrators SHOULD block or ban \"bad actors\" who cause stress and pain to others in the project. This should be done after public discussion, with a chance for all parties to speak. A bad actor is someone who repeatedly ignores the rules and culture of the project, who is needlessly argumentative or hostile, or who is offensive, and who is unable to self-correct their behavior when asked to do so by others.","title":"Code of Conduct"},{"location":"the-project/code-of-conduct/#code-of-conduct","text":"Code of Conduct (22/C4.1)","title":"Code of Conduct"},{"location":"the-project/code-of-conduct/#license","text":"Copyright (c) 2009-2015 Pieter Hintjens. Copyright (c) 2017-2018 The Monero Project. This Specification is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version. This Specification is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program; if not, see http://www.gnu.org/licenses .","title":"License"},{"location":"the-project/code-of-conduct/#language","text":"The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC 2119. The \"Monero Maintainer Team\" is defined in this document as the following users: - fluffypony - moneromooo - hyc","title":"Language"},{"location":"the-project/code-of-conduct/#goals","text":"C4 is meant to provide a reusable optimal collaboration model for open source software projects. It has these specific goals: To maximize the scale and diversity of the community around a project, by reducing the friction for new Contributors and creating a scaled participation model with strong positive feedbacks; To relieve dependencies on key individuals by separating different skill sets so that there is a larger pool of competence in any required domain; To allow the project to develop faster and more accurately, by increasing the diversity of the decision making process; To support the natural life cycle of project versions from experimental through to stable, by allowing safe experimentation, rapid failure, and isolation of stable code; To reduce the internal complexity of project repositories, thus making it easier for Contributors to participate and reducing the scope for error; To enforce collective ownership of the project, which increases economic incentive to Contributors and reduces the risk of hijack by hostile entities.","title":"Goals"},{"location":"the-project/code-of-conduct/#design","text":"","title":"Design"},{"location":"the-project/code-of-conduct/#preliminaries","text":"The project SHALL use the git distributed revision control system. The project SHALL be hosted on github.com or equivalent, herein called the \"Platform\". The project SHALL use the Platform issue tracker. Non-GitHub example: \"Platform\" could be a vanilla git repo and Trac hosted on the same machine/network. The Platform issue tracker would be Trac. The project SHOULD have clearly documented guidelines for code style. A \"Contributor\" is a person who wishes to provide a patch, being a set of commits that solve some clearly identified problem. A \"Maintainer\" is a person who merges patches to the project. Maintainers are not developers; their job is to enforce process. Contributors SHALL NOT have commit access to the repository unless they are also Maintainers. Maintainers SHALL have commit access to the repository. Everyone, without distinction or discrimination, SHALL have an equal right to become a Contributor under the terms of this contract.","title":"Preliminaries"},{"location":"the-project/code-of-conduct/#licensing-and-ownership","text":"The project SHALL use a share-alike license, such as BSD-3, the GPLv3 or a variant thereof (LGPL, AGPL), or the MPLv2. All contributions to the project source code (\"patches\") SHALL use the same license as the project. All patches are owned by their authors. There SHALL NOT be any copyright assignment process. The copyrights in the project SHALL be owned collectively by all its Contributors. Each Contributor SHALL be responsible for identifying themselves in the project Contributor list.","title":"Licensing and ownership"},{"location":"the-project/code-of-conduct/#patch-requirements","text":"Maintainers MUST have a Platform account and SHOULD use their real names or a well-known alias. Contributors SHOULD have a Platform account and MAY use their real names or a well-known alias. A patch SHOULD be a minimal and accurate answer to exactly one identified and agreed problem. A patch MUST adhere to the code style guidelines of the project if these are defined. A patch MUST adhere to the \"Evolution of Public Contracts\" guidelines defined below. A patch SHALL NOT include non-trivial code from other projects unless the Contributor is the original author of that code. A patch MUST compile cleanly and pass project self-tests on at least the principle target platform. A patch commit message SHOULD consist of a single short (less than 50 character) line summarizing the change, optionally followed by a blank line and then a more thorough description. A \"Correct Patch\" is one that satisfies the above requirements.","title":"Patch requirements"},{"location":"the-project/code-of-conduct/#development-process","text":"Change on the project SHALL be governed by the pattern of accurately identifying problems and applying minimal, accurate solutions to these problems. To request changes, a user SHOULD log an issue on the project Platform issue tracker. The user or Contributor SHOULD write the issue by describing the problem they face or observe. The user or Contributor SHOULD seek consensus on the accuracy of their observation, and the value of solving the problem. Users SHALL NOT log feature requests, ideas, or suggestions unrelated to Monero code or Monero's dependency code or Monero's potential/future dependency code or research which successfully implements Monero. Users SHALL NOT log any solutions to problems (verifiable or hypothetical) of which are not explicitly documented and/or not provable and/or cannot be reasonably proven. Thus, the release history of the project SHALL be a list of meaningful issues logged and solved. To work on an issue, a Contributor SHALL fork the project repository and then work on their forked repository. To submit a patch, a Contributor SHALL create a Platform pull request back to the project. A Contributor SHALL NOT commit changes directly to the project. To discuss a patch, people MAY comment on the Platform pull request, on the commit, or elsewhere. To accept or reject a patch, a Maintainer SHALL use the Platform interface. Maintainers SHOULD NOT merge their own patches except in exceptional cases, such as non-responsiveness from other Maintainers for an extended period (more than 30 days) or unless urgent as defined by the Monero Maintainers Team. Maintainers SHALL NOT make value judgments on correct patches unless the Maintainer (as may happen in rare circumstances) is a core code developer. Maintainers MUST NOT merge pull requests in less than 168 hours (1 week) unless deemed urgent by at least 2 people from the Monero Maintainer Team. The Contributor MAY tag an issue as \"Ready\" after making a pull request for the issue. The user who created an issue SHOULD close the issue after checking the patch is successful. Maintainers SHOULD ask for improvements to incorrect patches and SHOULD reject incorrect patches if the Contributor does not respond constructively. Any Contributor who has value judgments on a correct patch SHOULD express these via their own patches. Maintainers MAY commit changes to non-source documentation directly to the project.","title":"Development process"},{"location":"the-project/code-of-conduct/#creating-stable-releases","text":"The project SHALL have one branch (\"master\") that always holds the latest in-progress version and SHOULD always build. The project SHALL NOT use topic branches for any reason. Personal forks MAY use topic branches. To make a stable release someone SHALL fork the repository by copying it and thus become maintainer of this repository. Forking a project for stabilization MAY be done unilaterally and without agreement of project maintainers. A patch to a stabilization project declared \"stable\" SHALL be accompanied by a reproducible test case.","title":"Creating stable releases"},{"location":"the-project/code-of-conduct/#evolution-of-public-contracts","text":"All Public Contracts (APIs or protocols) SHALL be documented. All Public Contracts SHOULD have space for extensibility and experimentation. A patch that modifies a stable Public Contract SHOULD not break existing applications unless there is overriding consensus on the value of doing this. A patch that introduces new features to a Public Contract SHOULD do so using new names. Old names SHOULD be deprecated in a systematic fashion by marking new names as \"experimental\" until they are stable, then marking the old names as \"deprecated\". When sufficient time has passed, old deprecated names SHOULD be marked \"legacy\" and eventually removed. Old names SHALL NOT be reused by new features. When old names are removed, their implementations MUST provoke an exception (assertion) if used by applications.","title":"Evolution of public contracts"},{"location":"the-project/code-of-conduct/#project-administration","text":"The project founders SHALL act as Administrators to manage the set of project Maintainers. The Administrators SHALL ensure their own succession over time by promoting the most effective Maintainers. A new Contributor who makes a correct patch SHALL be invited to become a Maintainer. Administrators MAY remove Maintainers who are inactive for an extended period of time, or who repeatedly fail to apply this process accurately. Administrators SHOULD block or ban \"bad actors\" who cause stress and pain to others in the project. This should be done after public discussion, with a chance for all parties to speak. A bad actor is someone who repeatedly ignores the rules and culture of the project, who is needlessly argumentative or hostile, or who is offensive, and who is unable to self-correct their behavior when asked to do so by others.","title":"Project administration"},{"location":"the-project/comparison/","text":"Comparing Aeon to other Cryptocoins With the astounding plethora of \u201calt coins\u201d now available, it is worth noting how AEON differs from others, and specifically how it improves upon some of the similar offerings. The first thing to note is that within the alt coin universe, there are different classes of blockchain and coin. There are smart contract blockchains (i.e. Ethereum) which provide a mechanism to manage complex transactions such as business contracts and decentralized application (\u201cdApp\") hosting. There are also token coins (i.e. STEEM token) which supply a payment mechanism for use of a particular decentralized application or service. AEON is a currency coin, intended to provide an alternative to local fiat currencies. Therefore, this section will provide comparisons only to other well-known currency coins: Bitcoin, Litecoin, Monero, Dash, Zcash, and Ripple. Bitcoin Bitcoin is the best-known of all crypto currency blockchains, as it was the first to achieve a measure of success. There are considerable differences between AEON and Bitcoin, in the areas of privacy and usability. Privacy and Transaction Linkages Regarding the critical feature of privacy, Bitcoin falls short of the AEON blockchain. In order to maintain privacy of individual expenditures, it must be exceedingly difficult for an outside party to link a transaction back to its owner. Consider that each transaction consists of some inputs (coins which are being spent) and some outputs (one or more addresses which receive the spent coins). Additionally, each input in a transaction actually links to an output of a previous transaction, forming a set of transaction paths. In Bitcoin, these transaction linkages are explicitly transparent on the blockchain. Any blockchain explorer can follow the graph, which has allowed for sophisticated analysis to de-anonymize transactions. This privacy issue is alleviated in various ways, such as creating a unique address for every transaction, using centralized \u201cmixers\" to randomly \u201cmix up\" several people's Bitcoins, and employing methods to hide IP addresses when making transactions. The fact remains, however, that the Bitcoin inputs and outputs can be directly followed on the blockchain. AEON resolves this privacy concern by intentionally obscuring transaction linkages on the blockchain. Every transaction has a default number of \u201cdecoy\" input links (also known as mixins ). Anyone making a transaction can request a higher number of decoy inputs, to increase anonymity. As the blockchain grows over time, the increasing number of decoy input links will make the overall graph of transactions exceedingly difficult, if not impossible, to correctly decipher. Mining and Barriers to Participation Bitcoin uses a SHA-256 Proof-of-Work (PoW) algorithm which is dependent primarily on CPU power, and there are several specialized ASIC hardware devices made for mining Bitcoin. This has driven the hashrate high enough that currently only ASIC hardware mining is profitable. The result is that the average person with a PC cannot readily participate in the transaction validation process of mining and acquiring Bitcoins. AEON uses a CPU-friendly PoW algorithm that limits the advantage of GPU\u2019s and is ASIC resistant. This allows almost anyone with a PC to participate in mining and acquiring AEON. General Usability and Transactions-Per-Second Regarding usability and the vision of a lightweight digital currency for everyone, AEON has distinct advantages over Bitcoin. The original Bitcoin block size (maximum of 1 MB) and the block creation time of 10 minutes limited the transactions-per-second (TPS) processing power to no more than 7 TPS. This low TPS severely hindered the ability of the Bitcoin blockchain to process the necessary volume of transactions. In August of 2017 the Bitcoin blockchain implemented a change known as \"Segwit\" (short for Segregated Witness) which effectively doubles the block size from 1 MB to 2 MB. Thus, the transaction processing power has been doubled, to 14 TPS. There is a change in the works called Segwit2x which would double the effective block size again, bringing the Bitcoin processing power to 28 transactions per second. While this is a marked improvement, the TPS is still too low for Bitcoin to become a currency for the masses. For comparison, credit card processors typically see an average of 1700 transactions per second, with peaks of 3000 to 4000. Paypal's average is just under 200 TPS. Bitcoin's low TPS will cause it to become more of a high-end investment with limited use as a currency, not unlike physical gold coins versus U.S. dollar bills. AEON solves the TPS limitation by using an algorithm to automatically adjust the maximum block size up or down, based on the previous 100 blocks. This approach allows the AEON blockchain to self-adjust it's TPS throughput as transaction traffic increases and decreases over time. Litecoin Litecoin was started as a fork of the Bitcoin code in 2011, with the goal of being a lighter-weight currency, offering low-cost transactions with fast confirmation status. Privacy and Transaction Linkages See the description of the privacy issues in section vs. Bitcoin . Litecoin has the same issues as Bitcoin. Charlie Lee, the creator of Litecoin, is actively researching options to bring more privacy to Litecoin. This would presumably be accomplished with significant changes to the underlying protocol, and would be an interesting development for the coin. It is unknown what impact the changes would have on other aspects such as block size, transaction size, and TPS. Mining and Barriers to Participation Litecoin uses a Proof-of-Work algorithm called scrypt which depends not only on the CPU, but also on fast access to a memory area. At first, this PoW made it difficult to develop specialized ASIC hardware. In recent years, however, scrypt-capable ASICs have been developed which can efficiently mine any cryptocurrency that uses the scrypt algorithm. Thus, just like Bitcoin, the average person with a PC cannot successfully participate in the process of mining and acquiring Litecoin. AEON actually uses an improved version of the scrypt algorithm which employs a larger memory area. The result is that AEON is even more resistant than Litecoin to specialized hardware, and the GPU cards do not have as great an advantage over the CPU. This ensures that CPU mining with an average PC is an option for everyone. General Usability and Transactions-Per-Second Being a \u201clightweight Bitcoin\" it is no surprise that Litecoin is able to boast a higher TPS than Bitcoin. The maximum transaction throughput is currently 56 transactions per second. (Remember that credit card processors can see peaks up to 4000 TPS.) While the Litecoin network can currently process transactions fast enough for its volume of users, at some point -- long before Litecoin can become a currency for the masses -- its TPS must be greatly increased. See the prior section vs. Bitcoin for a description of AEON's solution to the TPS limitation. Monero It is public knowledge that AEON is a fork of the Monero project, and it continues to incorporate improvements directly from the Monero code base. In fact, the Development team for AEON consists largely of Monero developers who also work on AEON. Since Monero itself is well-known as a security/privacy coin, it requires some attention, to address exactly why AEON might be preferred. General Usability and Mobile-Friendliness The advantages that AEON has over Monero are in the area of being lightweight and mobile friendly. AEON has chosen a different Proof-of-Work algorithm which requires half the CPU cache memory and allows for faster verification of the blockchain. This decision sacrifices a bit of ASIC resistance for the sake of being mobile friendly. AEON's default number of \"decoy\" transaction signatures is 2 per transaction, while Monero's is 10. AEON also allows the option for a limited number of fast, low-fee transfers with 0 decoys (which are traceable on the blockchain). These can be used for non-sensitive payments. Monero, on the other hand, requires all payments to be fully anonymized. The result is that Monero's greater number of decoys on the blockchain adds to the validation times and blockchain size when compared to AEON. Thus, AEON sacrifices a bit of being untraceable for the sake of being lightweigt and mobile friendly. NOTE: The AEON community is considering elimination of the 0-decoy transactions, and raising the default number of decoys. The popular default value suggestions seem to be 5 or 7 decoys, which would improve untraceability, while keeping the transaction sizes smaller than Monero's. These aspects put AEON in a better position to be the secure, private currency that can be used by the general public with cell phones and tablets on the go. Dash Dash stands for \u201cdigital cash\" and is meant to work like physical cash when purchasing items online or in stores. Like AEON, Dash embraces the importance of Security and Privacy. There are some disadvantages, however, when comparing this coin to AEON. General Usability and Transactions-Per-Second In November, 2017, the Dash blockchain hard-forked to double it's maximum blocksize, to 2 MB. That change allowed Dash to process roughly 48 transactions per second. As we have seen, this does not compare to credit card processors which typically see thousands of transactions per second. At some point the Dash TPS must be increased again, and likely again after that. This continued increasing of TPS via disruptive blockchain modifications is not conducive to massive adoption. See section vs. Bitcoin for a description of AEON's solution to the TPS limitation. Mining, Governance and Barriers to Participation Dash uses a Proof-of-Work algorithm which is dependent primarily on CPU power, and the network welcomes the use of specialized hardware for mining. This has driven the hashrate high enough that currently only ASIC hardware mining is profitable. The result is that the average person with a PC cannot readily participate in the transaction validation process of mining. Additionally, Dash implements a complex form of Governance consisting of a 2nd tier network node, called a Masternode. In order to own a Masternode, one must obtain and hold 1000 Dash. (In early 2019, this was an investment of roughly $80,000 USD.) Only Masternode owners vote on proposed enhancements to the coin, as well as prioritize which projects get paid from the development fund. Similar to AEON, new coins are disbursed as a block reward when a miner successfully validates a block of transactions. But unlike AEON, the miner must split the block reward between the Masternodes and the Development Fund. Because special hardware is required to mine Dash, and a large monetary investment is necessary to participate in the governance of the currency, the barriers to participation are much higher than with AEON's simple open source project model. Even to submit a proposal for a vote by the Masternode owners, costs a fee of 5 Dash (roughly $400 USD in early 2019). These factors work against a true decentralization for a currency. AEON uses the traditional Open Source Model of participation and governance, which has been shown to work well for many large technology efforts for many years. It allows a diverse community to grow organically, which is an advantage for AEON's plans to become widely used by all walks of life. Zcash Zcash is another fork of the Bitcoin code base, with the intent of adding the element of privacy to the blockchain. Privacy and Shielded Transactions Zcash achieves privacy by using a cryptographic approach called \u201czero-knowledge cryptography\" to create \u201cshielded transactions\". However, this is not the default option, and there is no limit to the number of non-private transactions in each block. A recent report by ICO research firm Satis Group (\u201cCryptoasset Market Coverage Initiation: Valuation\", August 30, 2018) states: \u201cOnly ~5% of the Zcash network uses 'shielded' addresses currently, with the rest of the addresses being used for transactions functionally and technically no different than Bitcoin.\" The paper concludes that since there are so many more addresses in the blockchain that are not private, the Zcash network as a whole is not fungible. Meaning the coins in any given wallet could possibly be traced back to their prior transactions. (This is important, because nobody wants to find out that the coins in their wallet were used previously to commit a crime, etc.) In contrast, the research states specifically that Monero -- and therefore we can conclude AEON as well -- is a fungible network. Both Monero and AEON default to a private transaction, and AEON only allows at most 10% of the transactions in any block to be switched to non-private. Mining and Barriers to Participation Zcash went away from the Bitcoin PoW algorithm, and implemented the Equihash PoW algorithm, to provide ASIC resistance, and allow people to mine with their GPU\u2019s and CPU\u2019s. The problems with the Equihash algorithm are that 1) it does not limit the advantage of GPU over CPU, and 2) ASICs were developed which could mine Zcash, threatening the future viability of GPU and CPU mining. In June of 2018, members of the Zcash community voted to not put resources toward developing resistance back into the Zcash PoW. AEON's PoW, as stated previously, is more CPU friendly, and more ASIC resistant. In addition, when an ASIC was successfully developed for the CryptoNight-Lite algorithm, the AEON developers quickly moved to fork the blockchain to regain ASIC resistance. General Usability and Transactions-Per-Second Zcash improved upon Bitcoin by doubling the maximum block size to 2 MB, and decreasing the block interval down to 2.5 minutes. However the transaction size is larger in Zcash, so the maximum TPS will only reach about 26, and could be far less if more of the transactions happen to be shielded. As with Bitcoin, the TPS throughput will need to be increased into the thousands before Zcash will become a currency used by the masses. See section vs. Bitcoin for a description of AEON\u2019s solution to the TPS limitation. Ripple Of all the currencies discussed in this section, Ripple is one which may not belong. The Ripple blockchain is open source, but Ripple is also a private company. From their homepage: \u201cRipple connects banks, payment providers, digital asset exchanges and corporates via RippleNet to provide one frictionless experience to send money globally.\" Consider the ways in which Ripple's vision is different from AEON: Ripple does not decentralize the management of personal wealth; it seeks to strengthen the ability of central entities to control the movement of wealth on a global scale. Working with banks, Ripple does not provide privacy, but instead provides full traceability of funds. There is no mining process, by which individuals can receive coins for themselves. All coins have been produced, and the Ripple company releases a certain number of coins per month.","title":"Comparison"},{"location":"the-project/comparison/#comparing-aeon-to-other-cryptocoins","text":"With the astounding plethora of \u201calt coins\u201d now available, it is worth noting how AEON differs from others, and specifically how it improves upon some of the similar offerings. The first thing to note is that within the alt coin universe, there are different classes of blockchain and coin. There are smart contract blockchains (i.e. Ethereum) which provide a mechanism to manage complex transactions such as business contracts and decentralized application (\u201cdApp\") hosting. There are also token coins (i.e. STEEM token) which supply a payment mechanism for use of a particular decentralized application or service. AEON is a currency coin, intended to provide an alternative to local fiat currencies. Therefore, this section will provide comparisons only to other well-known currency coins: Bitcoin, Litecoin, Monero, Dash, Zcash, and Ripple.","title":"Comparing Aeon to other Cryptocoins"},{"location":"the-project/comparison/#bitcoin","text":"Bitcoin is the best-known of all crypto currency blockchains, as it was the first to achieve a measure of success. There are considerable differences between AEON and Bitcoin, in the areas of privacy and usability.","title":"Bitcoin"},{"location":"the-project/comparison/#privacy-and-transaction-linkages","text":"Regarding the critical feature of privacy, Bitcoin falls short of the AEON blockchain. In order to maintain privacy of individual expenditures, it must be exceedingly difficult for an outside party to link a transaction back to its owner. Consider that each transaction consists of some inputs (coins which are being spent) and some outputs (one or more addresses which receive the spent coins). Additionally, each input in a transaction actually links to an output of a previous transaction, forming a set of transaction paths. In Bitcoin, these transaction linkages are explicitly transparent on the blockchain. Any blockchain explorer can follow the graph, which has allowed for sophisticated analysis to de-anonymize transactions. This privacy issue is alleviated in various ways, such as creating a unique address for every transaction, using centralized \u201cmixers\" to randomly \u201cmix up\" several people's Bitcoins, and employing methods to hide IP addresses when making transactions. The fact remains, however, that the Bitcoin inputs and outputs can be directly followed on the blockchain. AEON resolves this privacy concern by intentionally obscuring transaction linkages on the blockchain. Every transaction has a default number of \u201cdecoy\" input links (also known as mixins ). Anyone making a transaction can request a higher number of decoy inputs, to increase anonymity. As the blockchain grows over time, the increasing number of decoy input links will make the overall graph of transactions exceedingly difficult, if not impossible, to correctly decipher.","title":"Privacy and Transaction Linkages"},{"location":"the-project/comparison/#mining-and-barriers-to-participation","text":"Bitcoin uses a SHA-256 Proof-of-Work (PoW) algorithm which is dependent primarily on CPU power, and there are several specialized ASIC hardware devices made for mining Bitcoin. This has driven the hashrate high enough that currently only ASIC hardware mining is profitable. The result is that the average person with a PC cannot readily participate in the transaction validation process of mining and acquiring Bitcoins. AEON uses a CPU-friendly PoW algorithm that limits the advantage of GPU\u2019s and is ASIC resistant. This allows almost anyone with a PC to participate in mining and acquiring AEON.","title":"Mining and Barriers to Participation"},{"location":"the-project/comparison/#general-usability-and-transactions-per-second","text":"Regarding usability and the vision of a lightweight digital currency for everyone, AEON has distinct advantages over Bitcoin. The original Bitcoin block size (maximum of 1 MB) and the block creation time of 10 minutes limited the transactions-per-second (TPS) processing power to no more than 7 TPS. This low TPS severely hindered the ability of the Bitcoin blockchain to process the necessary volume of transactions. In August of 2017 the Bitcoin blockchain implemented a change known as \"Segwit\" (short for Segregated Witness) which effectively doubles the block size from 1 MB to 2 MB. Thus, the transaction processing power has been doubled, to 14 TPS. There is a change in the works called Segwit2x which would double the effective block size again, bringing the Bitcoin processing power to 28 transactions per second. While this is a marked improvement, the TPS is still too low for Bitcoin to become a currency for the masses. For comparison, credit card processors typically see an average of 1700 transactions per second, with peaks of 3000 to 4000. Paypal's average is just under 200 TPS. Bitcoin's low TPS will cause it to become more of a high-end investment with limited use as a currency, not unlike physical gold coins versus U.S. dollar bills. AEON solves the TPS limitation by using an algorithm to automatically adjust the maximum block size up or down, based on the previous 100 blocks. This approach allows the AEON blockchain to self-adjust it's TPS throughput as transaction traffic increases and decreases over time.","title":"General Usability and Transactions-Per-Second"},{"location":"the-project/comparison/#litecoin","text":"Litecoin was started as a fork of the Bitcoin code in 2011, with the goal of being a lighter-weight currency, offering low-cost transactions with fast confirmation status.","title":"Litecoin"},{"location":"the-project/comparison/#privacy-and-transaction-linkages_1","text":"See the description of the privacy issues in section vs. Bitcoin . Litecoin has the same issues as Bitcoin. Charlie Lee, the creator of Litecoin, is actively researching options to bring more privacy to Litecoin. This would presumably be accomplished with significant changes to the underlying protocol, and would be an interesting development for the coin. It is unknown what impact the changes would have on other aspects such as block size, transaction size, and TPS.","title":"Privacy and Transaction Linkages"},{"location":"the-project/comparison/#mining-and-barriers-to-participation_1","text":"Litecoin uses a Proof-of-Work algorithm called scrypt which depends not only on the CPU, but also on fast access to a memory area. At first, this PoW made it difficult to develop specialized ASIC hardware. In recent years, however, scrypt-capable ASICs have been developed which can efficiently mine any cryptocurrency that uses the scrypt algorithm. Thus, just like Bitcoin, the average person with a PC cannot successfully participate in the process of mining and acquiring Litecoin. AEON actually uses an improved version of the scrypt algorithm which employs a larger memory area. The result is that AEON is even more resistant than Litecoin to specialized hardware, and the GPU cards do not have as great an advantage over the CPU. This ensures that CPU mining with an average PC is an option for everyone.","title":"Mining and Barriers to Participation"},{"location":"the-project/comparison/#general-usability-and-transactions-per-second_1","text":"Being a \u201clightweight Bitcoin\" it is no surprise that Litecoin is able to boast a higher TPS than Bitcoin. The maximum transaction throughput is currently 56 transactions per second. (Remember that credit card processors can see peaks up to 4000 TPS.) While the Litecoin network can currently process transactions fast enough for its volume of users, at some point -- long before Litecoin can become a currency for the masses -- its TPS must be greatly increased. See the prior section vs. Bitcoin for a description of AEON's solution to the TPS limitation.","title":"General Usability and Transactions-Per-Second"},{"location":"the-project/comparison/#monero","text":"It is public knowledge that AEON is a fork of the Monero project, and it continues to incorporate improvements directly from the Monero code base. In fact, the Development team for AEON consists largely of Monero developers who also work on AEON. Since Monero itself is well-known as a security/privacy coin, it requires some attention, to address exactly why AEON might be preferred.","title":"Monero"},{"location":"the-project/comparison/#general-usability-and-mobile-friendliness","text":"The advantages that AEON has over Monero are in the area of being lightweight and mobile friendly. AEON has chosen a different Proof-of-Work algorithm which requires half the CPU cache memory and allows for faster verification of the blockchain. This decision sacrifices a bit of ASIC resistance for the sake of being mobile friendly. AEON's default number of \"decoy\" transaction signatures is 2 per transaction, while Monero's is 10. AEON also allows the option for a limited number of fast, low-fee transfers with 0 decoys (which are traceable on the blockchain). These can be used for non-sensitive payments. Monero, on the other hand, requires all payments to be fully anonymized. The result is that Monero's greater number of decoys on the blockchain adds to the validation times and blockchain size when compared to AEON. Thus, AEON sacrifices a bit of being untraceable for the sake of being lightweigt and mobile friendly. NOTE: The AEON community is considering elimination of the 0-decoy transactions, and raising the default number of decoys. The popular default value suggestions seem to be 5 or 7 decoys, which would improve untraceability, while keeping the transaction sizes smaller than Monero's. These aspects put AEON in a better position to be the secure, private currency that can be used by the general public with cell phones and tablets on the go.","title":"General Usability and Mobile-Friendliness"},{"location":"the-project/comparison/#dash","text":"Dash stands for \u201cdigital cash\" and is meant to work like physical cash when purchasing items online or in stores. Like AEON, Dash embraces the importance of Security and Privacy. There are some disadvantages, however, when comparing this coin to AEON.","title":"Dash"},{"location":"the-project/comparison/#general-usability-and-transactions-per-second_2","text":"In November, 2017, the Dash blockchain hard-forked to double it's maximum blocksize, to 2 MB. That change allowed Dash to process roughly 48 transactions per second. As we have seen, this does not compare to credit card processors which typically see thousands of transactions per second. At some point the Dash TPS must be increased again, and likely again after that. This continued increasing of TPS via disruptive blockchain modifications is not conducive to massive adoption. See section vs. Bitcoin for a description of AEON's solution to the TPS limitation.","title":"General Usability and Transactions-Per-Second"},{"location":"the-project/comparison/#mining-governance-and-barriers-to-participation","text":"Dash uses a Proof-of-Work algorithm which is dependent primarily on CPU power, and the network welcomes the use of specialized hardware for mining. This has driven the hashrate high enough that currently only ASIC hardware mining is profitable. The result is that the average person with a PC cannot readily participate in the transaction validation process of mining. Additionally, Dash implements a complex form of Governance consisting of a 2nd tier network node, called a Masternode. In order to own a Masternode, one must obtain and hold 1000 Dash. (In early 2019, this was an investment of roughly $80,000 USD.) Only Masternode owners vote on proposed enhancements to the coin, as well as prioritize which projects get paid from the development fund. Similar to AEON, new coins are disbursed as a block reward when a miner successfully validates a block of transactions. But unlike AEON, the miner must split the block reward between the Masternodes and the Development Fund. Because special hardware is required to mine Dash, and a large monetary investment is necessary to participate in the governance of the currency, the barriers to participation are much higher than with AEON's simple open source project model. Even to submit a proposal for a vote by the Masternode owners, costs a fee of 5 Dash (roughly $400 USD in early 2019). These factors work against a true decentralization for a currency. AEON uses the traditional Open Source Model of participation and governance, which has been shown to work well for many large technology efforts for many years. It allows a diverse community to grow organically, which is an advantage for AEON's plans to become widely used by all walks of life.","title":"Mining, Governance and Barriers to Participation"},{"location":"the-project/comparison/#zcash","text":"Zcash is another fork of the Bitcoin code base, with the intent of adding the element of privacy to the blockchain.","title":"Zcash"},{"location":"the-project/comparison/#privacy-and-shielded-transactions","text":"Zcash achieves privacy by using a cryptographic approach called \u201czero-knowledge cryptography\" to create \u201cshielded transactions\". However, this is not the default option, and there is no limit to the number of non-private transactions in each block. A recent report by ICO research firm Satis Group (\u201cCryptoasset Market Coverage Initiation: Valuation\", August 30, 2018) states: \u201cOnly ~5% of the Zcash network uses 'shielded' addresses currently, with the rest of the addresses being used for transactions functionally and technically no different than Bitcoin.\" The paper concludes that since there are so many more addresses in the blockchain that are not private, the Zcash network as a whole is not fungible. Meaning the coins in any given wallet could possibly be traced back to their prior transactions. (This is important, because nobody wants to find out that the coins in their wallet were used previously to commit a crime, etc.) In contrast, the research states specifically that Monero -- and therefore we can conclude AEON as well -- is a fungible network. Both Monero and AEON default to a private transaction, and AEON only allows at most 10% of the transactions in any block to be switched to non-private.","title":"Privacy and Shielded Transactions"},{"location":"the-project/comparison/#mining-and-barriers-to-participation_2","text":"Zcash went away from the Bitcoin PoW algorithm, and implemented the Equihash PoW algorithm, to provide ASIC resistance, and allow people to mine with their GPU\u2019s and CPU\u2019s. The problems with the Equihash algorithm are that 1) it does not limit the advantage of GPU over CPU, and 2) ASICs were developed which could mine Zcash, threatening the future viability of GPU and CPU mining. In June of 2018, members of the Zcash community voted to not put resources toward developing resistance back into the Zcash PoW. AEON's PoW, as stated previously, is more CPU friendly, and more ASIC resistant. In addition, when an ASIC was successfully developed for the CryptoNight-Lite algorithm, the AEON developers quickly moved to fork the blockchain to regain ASIC resistance.","title":"Mining and Barriers to Participation"},{"location":"the-project/comparison/#general-usability-and-transactions-per-second_3","text":"Zcash improved upon Bitcoin by doubling the maximum block size to 2 MB, and decreasing the block interval down to 2.5 minutes. However the transaction size is larger in Zcash, so the maximum TPS will only reach about 26, and could be far less if more of the transactions happen to be shielded. As with Bitcoin, the TPS throughput will need to be increased into the thousands before Zcash will become a currency used by the masses. See section vs. Bitcoin for a description of AEON\u2019s solution to the TPS limitation.","title":"General Usability and Transactions-Per-Second"},{"location":"the-project/comparison/#ripple","text":"Of all the currencies discussed in this section, Ripple is one which may not belong. The Ripple blockchain is open source, but Ripple is also a private company. From their homepage: \u201cRipple connects banks, payment providers, digital asset exchanges and corporates via RippleNet to provide one frictionless experience to send money globally.\" Consider the ways in which Ripple's vision is different from AEON: Ripple does not decentralize the management of personal wealth; it seeks to strengthen the ability of central entities to control the movement of wealth on a global scale. Working with banks, Ripple does not provide privacy, but instead provides full traceability of funds. There is no mining process, by which individuals can receive coins for themselves. All coins have been produced, and the Ripple company releases a certain number of coins per month.","title":"Ripple"},{"location":"the-project/contributing-guidelines/","text":"Contributing to Aeon Being a fork of Monero, Aeon shares most of its codebase with Monero while making a few critical modifications such that it can offer a unique alternative to Monero. The codebase is intentionally kept close to Monero's in order to benefit from the higher code reliability due to the larger source of peer reviewing available in Monero. Merging upstream patches The above goal is achieved through the continuous effort of merging upstream improvements. Anyone with sufficient knowledge are encouraged to contribute in this effort. In order to ensure the consistency of the changes (which greatly helps new developers easily navigate through the commit log and cross-reference between the two repositories) as well as to properly credit the original author, please use the git cherry-pick command. It is also highly recommended to postfix the first line of the commit message with the corresponding pull request number so that one can easily reference the original Monero PR. For example, if you are to merge the upstream PR 4356 which has two commits with the following commit messages: Docker android: use common prefix Docker android: add libsodium then, make the corresponding commit messages as follows: Docker android: use common prefix /monero#4356 Docker android: add libsodium /monero#4356 Note that the postfix is added to the first line of each commit message. Also, please make some reasonable effort to keep the ordering of merging patches consistent with the original so that potential issues like merge conflicts etc. are prevented, although this is not a strict requirement. Proposing changes The above effort is faciliated by avoiding the creation of unnecessary differences in the repository. This implies that any proposed changes which also apply to Monero should be submitted to Monero. Specifically, please send a pull request to Monero first, then send a corresponding PR to Aeon by cherry-picking, as described above. If your Monero PR is merged, your corresponding Aeon PR will then be merged subsequently. If you are to propose some changes that are specific to Aeon and distinct from Monero, submit a pull request directly to Aeon and justify your changes by laying out how they are more or uniquely applicable to Aeon. With a good justification the burden of increased maintenance cost as described above can be overcome. Contributing to Monero A good way to help is to test, and report bugs. See How to Report Bugs Effectively (by Simon Tatham) if you want to help that way. Testing is invaluable in making a piece of software solid and usable. General guidelines Comments are encouraged. If modifying code for which Doxygen headers exist, that header must be modified to match. Tests would be nice to have if you're adding functionality. Patches are preferably to be sent via a Github pull request. If that can't be done, patches in \"git format-patch\" format can be sent (eg, posted to fpaste.org with a long enough timeout and a link posted to #monero-dev on irc.freenode.net). Patches should be self contained. A good rule of thumb is to have one patch per separate issue, feature, or logical change. Also, no other changes, such as random whitespace changes or reindentation. Following the code style of the particular chunk of code you're modifying is encouraged. Proper squashing should be done (eg, if you're making a buggy patch, then a later patch to fix the bug, both patches should be merged). If you've made random unrelated changes (either because your editor is annoying or you made them for other reasons), you can select what changes go into the coming commit using git add -p, which walks you through all the changes and asks whether or not to include this particular change. This helps create clean patches without any irrelevant changes. git diff will show you the changes in your tree. git diff --cached will show what is currently staged for commit. As you add hunks with git add -p, those hunks will \"move\" from the git diff output to the git diff --cached output, so you can see clearly what your commit is going to look like. Commits and pull requests Commit messages should be sensible. That means a subject line that describes the patch, with an optional longer body that gives details, documentation, etc. When submitting a pull request on Github, make sure your branch is rebased. No merge commits nor stray commits from other people in your submitted branch, please. You may be asked to rebase if there are conflicts (even trivially resolvable ones). PGP signing commits is strongly encouraged. That should explain why the previous paragraph is here.","title":"Contributing to Aeon"},{"location":"the-project/contributing-guidelines/#contributing-to-aeon","text":"Being a fork of Monero, Aeon shares most of its codebase with Monero while making a few critical modifications such that it can offer a unique alternative to Monero. The codebase is intentionally kept close to Monero's in order to benefit from the higher code reliability due to the larger source of peer reviewing available in Monero.","title":"Contributing to Aeon"},{"location":"the-project/contributing-guidelines/#merging-upstream-patches","text":"The above goal is achieved through the continuous effort of merging upstream improvements. Anyone with sufficient knowledge are encouraged to contribute in this effort. In order to ensure the consistency of the changes (which greatly helps new developers easily navigate through the commit log and cross-reference between the two repositories) as well as to properly credit the original author, please use the git cherry-pick command. It is also highly recommended to postfix the first line of the commit message with the corresponding pull request number so that one can easily reference the original Monero PR. For example, if you are to merge the upstream PR 4356 which has two commits with the following commit messages: Docker android: use common prefix Docker android: add libsodium then, make the corresponding commit messages as follows: Docker android: use common prefix /monero#4356 Docker android: add libsodium /monero#4356 Note that the postfix is added to the first line of each commit message. Also, please make some reasonable effort to keep the ordering of merging patches consistent with the original so that potential issues like merge conflicts etc. are prevented, although this is not a strict requirement.","title":"Merging upstream patches"},{"location":"the-project/contributing-guidelines/#proposing-changes","text":"The above effort is faciliated by avoiding the creation of unnecessary differences in the repository. This implies that any proposed changes which also apply to Monero should be submitted to Monero. Specifically, please send a pull request to Monero first, then send a corresponding PR to Aeon by cherry-picking, as described above. If your Monero PR is merged, your corresponding Aeon PR will then be merged subsequently. If you are to propose some changes that are specific to Aeon and distinct from Monero, submit a pull request directly to Aeon and justify your changes by laying out how they are more or uniquely applicable to Aeon. With a good justification the burden of increased maintenance cost as described above can be overcome.","title":"Proposing changes"},{"location":"the-project/contributing-guidelines/#contributing-to-monero","text":"A good way to help is to test, and report bugs. See How to Report Bugs Effectively (by Simon Tatham) if you want to help that way. Testing is invaluable in making a piece of software solid and usable.","title":"Contributing to Monero"},{"location":"the-project/contributing-guidelines/#general-guidelines","text":"Comments are encouraged. If modifying code for which Doxygen headers exist, that header must be modified to match. Tests would be nice to have if you're adding functionality. Patches are preferably to be sent via a Github pull request. If that can't be done, patches in \"git format-patch\" format can be sent (eg, posted to fpaste.org with a long enough timeout and a link posted to #monero-dev on irc.freenode.net). Patches should be self contained. A good rule of thumb is to have one patch per separate issue, feature, or logical change. Also, no other changes, such as random whitespace changes or reindentation. Following the code style of the particular chunk of code you're modifying is encouraged. Proper squashing should be done (eg, if you're making a buggy patch, then a later patch to fix the bug, both patches should be merged). If you've made random unrelated changes (either because your editor is annoying or you made them for other reasons), you can select what changes go into the coming commit using git add -p, which walks you through all the changes and asks whether or not to include this particular change. This helps create clean patches without any irrelevant changes. git diff will show you the changes in your tree. git diff --cached will show what is currently staged for commit. As you add hunks with git add -p, those hunks will \"move\" from the git diff output to the git diff --cached output, so you can see clearly what your commit is going to look like.","title":"General guidelines"},{"location":"the-project/contributing-guidelines/#commits-and-pull-requests","text":"Commit messages should be sensible. That means a subject line that describes the patch, with an optional longer body that gives details, documentation, etc. When submitting a pull request on Github, make sure your branch is rebased. No merge commits nor stray commits from other people in your submitted branch, please. You may be asked to rebase if there are conflicts (even trivially resolvable ones). PGP signing commits is strongly encouraged. That should explain why the previous paragraph is here.","title":"Commits and pull requests"},{"location":"the-project/dependencies/","text":"Dependencies The following table summarizes the tools and libraries required to build. A few of the libraries are also included in this repository (marked as \"Vendored\"). By default, the build uses the library installed on the system, and ignores the vendored sources. However, if no library is found installed on the system, then the vendored source will be built and used. The vendored sources are also used for statically-linked builds because distribution packages often include only shared library binaries ( .so ) but not static library archives ( .a ). Dep Min. version Vendored Debian/Ubuntu pkg Arch pkg Fedora Optional Purpose GCC 4.7.3 NO build-essential base-devel gcc NO CMake 3.5 NO cmake cmake cmake NO pkg-config any NO pkg-config base-devel pkgconf NO Boost 1.58 NO libboost-all-dev boost boost-devel NO C++ libraries OpenSSL basically any NO libssl-dev openssl openssl-devel NO sha256 sum libzmq 3.0.0 NO libzmq3-dev zeromq cppzmq-devel NO ZeroMQ library OpenPGM ? NO libpgm-dev libpgm openpgm-devel NO For ZeroMQ libnorm[2] ? NO libnorm-dev ` YES For ZeroMQ libunbound 1.4.16 YES libunbound-dev unbound unbound-devel NO DNS resolver libsodium ? NO libsodium-dev libsodium libsodium-devel NO cryptography libunwind any NO libunwind-dev libunwind libunwind-devel YES Stack traces liblzma any NO liblzma-dev xz xz-devel YES For libunwind libreadline 6.3.0 NO libreadline-dev readline readline-devel YES Input editing ldns 1.6.17 NO libldns-dev ldns ldns-devel YES SSL toolkit expat 1.1 NO libexpat1-dev expat expat-devel YES XML parsing GTest 1.5 YES libgtest-dev [1] gtest gtest-devel YES Test suite Doxygen any NO doxygen doxygen doxygen YES Documentation Graphviz any NO graphviz graphviz graphviz YES Documentation [1] On Debian/Ubuntu libgtest-dev only includes sources and headers. You must build the library binary manually. This can be done with the following command sudo apt-get install libgtest-dev && cd /usr/src/gtest && sudo cmake . && sudo make && sudo mv libg* /usr/lib/ [2] libnorm-dev is needed if your zmq library was built with libnorm, and not needed otherwise [3] Note the differences of Libunwind and Libreadline for 16.04 and 18.04 distros Install all dependencies at once on Debian/Ubuntu 16.04: sudo apt update && sudo apt install build-essential cmake git pkg-config libboost-all-dev libssl-dev libzmq3-dev libunbound-dev libsodium-dev libunwind8-dev liblzma-dev libreadline6-dev libldns-dev libexpat1-dev doxygen graphviz libpgm-dev Install all dependencies at once on Debian/Ubuntu 18.04: sudo apt update && sudo apt install build-essential cmake git pkg-config libboost-all-dev libssl-dev libzmq3-dev libunbound-dev libsodium-dev libunwind-dev liblzma-dev libreadline-dev libldns-dev libexpat1-dev doxygen graphviz libpgm-dev libnorm-dev","title":"Dependencies"},{"location":"the-project/dependencies/#dependencies","text":"","title":"Dependencies"},{"location":"the-project/dependencies/#_1","text":"The following table summarizes the tools and libraries required to build. A few of the libraries are also included in this repository (marked as \"Vendored\"). By default, the build uses the library installed on the system, and ignores the vendored sources. However, if no library is found installed on the system, then the vendored source will be built and used. The vendored sources are also used for statically-linked builds because distribution packages often include only shared library binaries ( .so ) but not static library archives ( .a ). Dep Min. version Vendored Debian/Ubuntu pkg Arch pkg Fedora Optional Purpose GCC 4.7.3 NO build-essential base-devel gcc NO CMake 3.5 NO cmake cmake cmake NO pkg-config any NO pkg-config base-devel pkgconf NO Boost 1.58 NO libboost-all-dev boost boost-devel NO C++ libraries OpenSSL basically any NO libssl-dev openssl openssl-devel NO sha256 sum libzmq 3.0.0 NO libzmq3-dev zeromq cppzmq-devel NO ZeroMQ library OpenPGM ? NO libpgm-dev libpgm openpgm-devel NO For ZeroMQ libnorm[2] ? NO libnorm-dev ` YES For ZeroMQ libunbound 1.4.16 YES libunbound-dev unbound unbound-devel NO DNS resolver libsodium ? NO libsodium-dev libsodium libsodium-devel NO cryptography libunwind any NO libunwind-dev libunwind libunwind-devel YES Stack traces liblzma any NO liblzma-dev xz xz-devel YES For libunwind libreadline 6.3.0 NO libreadline-dev readline readline-devel YES Input editing ldns 1.6.17 NO libldns-dev ldns ldns-devel YES SSL toolkit expat 1.1 NO libexpat1-dev expat expat-devel YES XML parsing GTest 1.5 YES libgtest-dev [1] gtest gtest-devel YES Test suite Doxygen any NO doxygen doxygen doxygen YES Documentation Graphviz any NO graphviz graphviz graphviz YES Documentation [1] On Debian/Ubuntu libgtest-dev only includes sources and headers. You must build the library binary manually. This can be done with the following command sudo apt-get install libgtest-dev && cd /usr/src/gtest && sudo cmake . && sudo make && sudo mv libg* /usr/lib/ [2] libnorm-dev is needed if your zmq library was built with libnorm, and not needed otherwise [3] Note the differences of Libunwind and Libreadline for 16.04 and 18.04 distros Install all dependencies at once on Debian/Ubuntu 16.04: sudo apt update && sudo apt install build-essential cmake git pkg-config libboost-all-dev libssl-dev libzmq3-dev libunbound-dev libsodium-dev libunwind8-dev liblzma-dev libreadline6-dev libldns-dev libexpat1-dev doxygen graphviz libpgm-dev Install all dependencies at once on Debian/Ubuntu 18.04: sudo apt update && sudo apt install build-essential cmake git pkg-config libboost-all-dev libssl-dev libzmq3-dev libunbound-dev libsodium-dev libunwind-dev liblzma-dev libreadline-dev libldns-dev libexpat1-dev doxygen graphviz libpgm-dev libnorm-dev","title":""},{"location":"the-project/donate/","text":"Supporting the project Aeon is a 100% community-sponsored endeavor. If you want to join our efforts, the easiest thing you can do is support the project financially. Both Aeon and Bitcoin donations can be made to donate.aeon.cash if using a client that supports the OpenAlias standard. Alternatively you can send AEON to the Aeon donation address via the donate command (type help in the command-line wallet for details). The Aeon donation address is: WmsSWgtT1JPg5e3cK41hKXSHVpKW7e47bjgiKmWZkYrhSS5LhRemNyqayaSBtAQ6517eo5PtH9wxHVmM78JDZSUu2W8PqRiNs (viewkey: 71bf19a7348ede17fa487167710dac401ef1556851bfd36b76040facf051630b ) The Bitcoin donation address is: 12Cyjf3qV6qLyXdzpLSLPdRFPUVidvnzFM","title":"Supporting the project"},{"location":"the-project/donate/#supporting-the-project","text":"Aeon is a 100% community-sponsored endeavor. If you want to join our efforts, the easiest thing you can do is support the project financially. Both Aeon and Bitcoin donations can be made to donate.aeon.cash if using a client that supports the OpenAlias standard. Alternatively you can send AEON to the Aeon donation address via the donate command (type help in the command-line wallet for details). The Aeon donation address is: WmsSWgtT1JPg5e3cK41hKXSHVpKW7e47bjgiKmWZkYrhSS5LhRemNyqayaSBtAQ6517eo5PtH9wxHVmM78JDZSUu2W8PqRiNs (viewkey: 71bf19a7348ede17fa487167710dac401ef1556851bfd36b76040facf051630b ) The Bitcoin donation address is: 12Cyjf3qV6qLyXdzpLSLPdRFPUVidvnzFM","title":"Supporting the project"},{"location":"the-project/donate/#_1","text":"","title":""},{"location":"the-project/history/","text":"Aeon Timeline 2014 June [6] Aeon was launched 6_6_2014 UTC with no premine, no instamine, and no dev-fund with a hard fork of Monero code July August September [11] v0.8.8.3 Emergency release to fix the block 202612 attack [15] v0.8.8.4 Point release: testnet, FreeBSD October November December [2] v0.8.8.5 Point release: OpenAlias support, per-kb fees, multi-lang mnemonics, MSVC -> msys2 on Windows, DNS / file checkpointing [8] v0.8.8.6 Point release: fixes broken Windows static builds, multilang mnemonic bug fixes 2015 January Feburary March April May June July [21] v0.9.0.0 Phoenix Release: Hard fork block 592000 changing PoW to Cryptnight-Lite and block target to 4 minutes, Enforce checkpoints on stored blockchain file (from Monero), Triangular distribution on mixin selection (from Monero), Mixin ring fix (from Boolberry), Updated seed node, Tree-hash fix (from Monero), Updated checkpoint table August [17] v0.9.1.1 Point release: Fix diff command showing incorrect hash rate after hard fork 1, Small improvement to performance of daemon miner (1-2%), Added backup seed node, Lower mining priority for anon-impairing (<2 mixins) tx Various portability fixes (mostly from Monero), Small reduction to memory usage (tens of MB), Add IP blocking for misbehaving nodes (adapted from Boolberry), Update checkpoint table September [3] v0.9.4.0 Point release: Revert memory reduction, Revert stuck tx removal, Optimize sync within checkpoint zone, Update seed node list October [9] v0.9.5.0 Point release: SECURITY: Fix upnp buffer overflow, Fix compile error with gcc 5.1.0, Fix node unblocking message formatting, Code clean ups November [5] v0.9.6.0 Point release: Fix mixin output selection to match wallet output selection, Slightly reduce wallet maximum tx size; should speed up confirmation rate especially for split transactions December 2016 January Feburary March April May June July August September October November December 2017 January Feburary [23] v0.9.7.1 Point Release: Includes preliminary code for support for ringct (not yet functional or enabled), Include upstream fixes, Performance improvement on non-Intel platforms March [4] v0.9.8.4 Point release: Hard fork at block height 798358, this release corrects a problem which allowed a recent block to enter the chain data store despite a missing transaction. Also contains additional bug fixes from Monero (credit moneromooo and warptangent), All nodes will require resyncing after installing this update. In addition any blocks that are part of the invalid chain starting at height 798358 will be rejected. Nodes continuing to advertise the invalid blocks will be dropped and eventually banned. This may initially produce a high volume of error messages. [29] v0.9.9.0 Point release: Includes reliability and stability fixes, Updates embedded miniupupc with latest upstream fixes, Resolves build issues with newer compiler/platform versions (some from Monero upstream) April [4] v0.9.10.0 Point release: This minor release addresses some possible causes for poor performance and lockups seen in 0.9.9.0. In addition it fixes a build problem on some versions of Mac OS X. Fix for possible deadlock, Reduce unnecessary lock holding, Mac build fix from upstream (@radfish from monero) [5] v0.9.11.0 Point release: Release resolves a deadlock issue introduced in 0.9.9.0 which caused the daemon to occasionally hang. [23] v0.9.12.0 Point release: A future update (not yet scheduled) will begin enforcing the minimum relay fee equal to the current default fee, so nodes that have not yet updated to a minimum of 0.9.12.0 will then be disconnected and banned. Fixes some Windows build issues, Add option to disable blockchain auto-save (useful to reduce swapping on low-memory nodes) ,Prioritize transactions by fee/byte, Disable relay of transactions with legacy fee lower than current default May June July August September [30] v0.9.13.0 Point release: Update for RPC users. Anyone operating an important node or mining (solo mining or operating a pool; not relevant to pool client miners) should review the new deployment notes. Numerous portability and compilation fixes (stoffu, appveyor), RPC wallet exception handling for improved reliability (upstream from XMR/QCN, sammy007), Added deployment notes in README October [27] v0.9.14.0 Point release: This was the last release for the Legacy Aeon software. This optional enhancement release adds one new feature and one feature from upstream (Monero). The release is fully compatible and contains no significant bug fixes. As such the previous daemon and/or wallet can be used interchangeably with this one if the new features are not needed. The --restricted-rpc daemon option (ported from Monero by LesPristy) disables some unsafe RPC requests for use with public nodes. The --fee-multiplier simplewallet option increases all fees by a factor of 1 (default; unchanged) to 100 (recommended: 2 or 3). This can assist in getting urgent transactions confirmed when there is a tx pool backlog. May also be used when creating mixin 0 transactions to bid for the one available tx slot per block (a 0 mixin with a fee multiplier of 2 may still be less expensive and/or confirm faster than a mixin 2 with a fee multiplier of 1, depending on the details of the transaction and network conditions). Additional changes were: README cleanup (xmr-eric), Fix for incorrect hash rate displayed by daemon diff command, Added instructions for manual cmake to README November December 2018 January Feburary March April May [24] Aeon Sophia Released. See all release notes Here June [3] v0.12.0.0 Hard Fork height 963500. Aeon Rebased to Monero's latest codebase with RingCT disabled, CryptoNight-Lite variant 1, limited use of ringsize 1, ban ringsize 2. Aeon also Integrated a remake of Monero's GUI wallet with the help of (DSC) from the Monero team. [14] v0.12.1.0 Point release: Merge pull request #31 from stoffu/aeon-wdouble, wallet2: fix double counting outs if the tx pubkey is duplicated /monero#3985 [16] v0.12.1.1 Point release: This recommended point release fixes three wallet bugs which can result in failed transactions or missed payments under certain conditions. It also includes improved installation instructions for Ubuntu/Debian. Note: 0.12.1.1 replaces the withdrawn 0.12.1.0, which was missing an updated version string. There are no other changes. Merge pull request #32 from stoffu/aeon-bump-0.12.1.0, bump version for 0.12.1 point release [20] v0.12.2.0 Merge pull request #37 from stoffu/aeon-fill-template-fix, tx_pool.fill_block_template: fix miscalculation of total size and fee [20] v0.12.2.1 Point Release: This point release fixes a bug in block construction resulting in lower block rewards under some conditions involving very large transactions. Recommended update for nodes running a mining pool and users who are solo mining, otherwise updating is not needed. Note: replaces withdrawn 0.12.2.0, which did not update the version string Merge pull request #38 from stoffu/aeon-bump-0.12.2, bump version to 0.12.2 [26] v0.12.3.0 Point release: This recommended update improves wallet handling of split transfers, resulting in smaller transactions and lower fees. Merge pull request #40 from stoffu/aeon-bump-0.12.3, bump version to 0.12.3 July [7] v0.12.4.0 Point release: SOURCE CODE ONLY. This recommended point release further optimizes transaction size and fees by ignoring inefficient tiny dust outputs. This feature can be controlled using the ignore-fractional-outputs option (default on). Merge pull request #42 from stoffu/aeon-bump-0.12.4, bump version to 0.12.4 [9] v0.12.5.0 Point release: Contains additional upstream fix to ensure outputs are processed only once. Merge pull request #45 from stoffu/process-outs-once, wallet2: ensure outputs are processed only once /monero#4118 August September [27] v0.12.6.0 Point release: Dozens of upstream performance, reliability and security patches. Improved packaging for (unfinished/non-usable) Ledger wallet support, Several documentation improvements from the AEON community, Disable incorrect/obsolete DNS lookups. Fixed P2P network issue that prevent DoS attacks against the nodes. All users receiving payments should update ASAP to protect against the cryptonote duplicate output coin burning attack described in https://getmonero.org/2018/09/25/a-post-mortum-of-the-burning-bug.html (if unable to update immediately, suspend receiving payments until updated). Merge pull request #54 from stoffu/aeon-bump-0.12.6, bump version to 0.12.6 October November [27] v0.12.7.0 Point release: SOURCE CODE ONLY. Dozens of upstream performance, reliability and security patches Several documentation and configuration improvements from the AEON community. Daeomon update to help prevent possible database corruption and loss of synchronization with the rest of the network for P2P users. Merge pull request #78 from stoffu/aeon-bump-0.12.7, bump version to 0.12.7 [30] v0.12.8.0 Point release: This maintenance release fixes a problem that existed in 0.12.7.0 only when using the wallet on Windows, and in addition contains a cosmetic improvement to logging and some documentation cleanup. If you are not running Windows there is no need to update from 0.12.7.0. Note: The initial linux binary was built with an incorrect version tag. This has now been corrected. Merge pull request #78 from stoffu/aeon-bump-0.12.7, bump version to 0.12.7 December [4] First Community meeting held on the Discord channel HERE 2019 January [8] Aeon added to Bisq's official release: https://github.com/bisq-network/bisq/releases/tag/v0.9.2 [17] Community created Tester Central repository for aiding in testing anything Aeon related. Feburary [1] First ever Aeon Community Giveaway . Ledger NanoS was gifted to an Aeon community member! [4] Community CLI and GUI beta testing guidelines added to community repo [4] Aeon RPC documentation guides started here [28] Community Meeting Logs March [1] Followup Community Meeting Logs [1] K12 Proof of Work proposal submitted to community by Stoffu [9] Aeon WooCommerce Gateway integration added to community repo [9] v0.12.9.0 Point release: Several dozen upstream reliability, security, and performance improvements (cli), Fixes for upstream vulnerabilities not believed exploitable in AEON but patched for defensive and maintenance purposes (cli), Various build and packaging improvements from the AEON community. [13] Aeon Onion Block Expolorer repository added to community repository and 3 new block explorers put into operation. [19] Spanish Translations added to community translation repository for Aeon Main website along with core cli/gui readme's. [28] Polish Translations added to community translation repository for Aeon Main website along with core cli/gui readme's. [28] Aeon Shell-Map added to community repository giving users the ability to view global nodes on a graphical scale. April [3] Aeon added to DeltaDirect App [10] Esperanto Translation added to community translation repository for Aeon main website. [11] German Translations added to community translation repository for Aeon Main website along with core cli/gui readme's. May [21] StelthEX adds Aeon to their exchange platform . [31] Aeon community brings Thunderosa onboard as a seasoned marketing member of the Monero community. June [6] Aeon's 5th Birthday! [21] Russian translations added for Aeon.cash and core coding documentation. [27] Aeon added to slips list for future hardware support of devices like ledger or trezor. July [5] Initial new marketing documents released by Thunderosa. [13] Aeon notes as coin of the day on Lunar Crush. [19] Aeon added to the Matrix Chat platform. [29] Aeon's website was re-designed to allow multi-language support and refresh its appearance for a more modern look. August [14] New block explorer added to our website. [15] Cleanup of website format and minor styling changes. [15] AeonLW released to public, an Electron wallet for Aeon. [26] Russian and Chinese translations added to our website. [27] SwapSpace integrates Aeon to their servicing platform. [30] Preliminary binaries released for v0.13.0 fork by Stoffu. September [1] HitBTC re-opens support for Aeon deposits and withdrawals. [2] French translations added to our website.","title":"History"},{"location":"the-project/history/#aeon-timeline","text":"","title":"Aeon Timeline"},{"location":"the-project/history/#2014","text":"","title":"2014"},{"location":"the-project/history/#june","text":"[6] Aeon was launched 6_6_2014 UTC with no premine, no instamine, and no dev-fund with a hard fork of Monero code","title":"June"},{"location":"the-project/history/#july","text":"","title":"July"},{"location":"the-project/history/#august","text":"","title":"August"},{"location":"the-project/history/#september","text":"[11] v0.8.8.3 Emergency release to fix the block 202612 attack [15] v0.8.8.4 Point release: testnet, FreeBSD","title":"September"},{"location":"the-project/history/#october","text":"","title":"October"},{"location":"the-project/history/#november","text":"","title":"November"},{"location":"the-project/history/#december","text":"[2] v0.8.8.5 Point release: OpenAlias support, per-kb fees, multi-lang mnemonics, MSVC -> msys2 on Windows, DNS / file checkpointing [8] v0.8.8.6 Point release: fixes broken Windows static builds, multilang mnemonic bug fixes","title":"December"},{"location":"the-project/history/#2015","text":"","title":"2015"},{"location":"the-project/history/#january","text":"","title":"January"},{"location":"the-project/history/#feburary","text":"","title":"Feburary"},{"location":"the-project/history/#march","text":"","title":"March"},{"location":"the-project/history/#april","text":"","title":"April"},{"location":"the-project/history/#may","text":"","title":"May"},{"location":"the-project/history/#june_1","text":"","title":"June"},{"location":"the-project/history/#july_1","text":"[21] v0.9.0.0 Phoenix Release: Hard fork block 592000 changing PoW to Cryptnight-Lite and block target to 4 minutes, Enforce checkpoints on stored blockchain file (from Monero), Triangular distribution on mixin selection (from Monero), Mixin ring fix (from Boolberry), Updated seed node, Tree-hash fix (from Monero), Updated checkpoint table","title":"July"},{"location":"the-project/history/#august_1","text":"[17] v0.9.1.1 Point release: Fix diff command showing incorrect hash rate after hard fork 1, Small improvement to performance of daemon miner (1-2%), Added backup seed node, Lower mining priority for anon-impairing (<2 mixins) tx Various portability fixes (mostly from Monero), Small reduction to memory usage (tens of MB), Add IP blocking for misbehaving nodes (adapted from Boolberry), Update checkpoint table","title":"August"},{"location":"the-project/history/#september_1","text":"[3] v0.9.4.0 Point release: Revert memory reduction, Revert stuck tx removal, Optimize sync within checkpoint zone, Update seed node list","title":"September"},{"location":"the-project/history/#october_1","text":"[9] v0.9.5.0 Point release: SECURITY: Fix upnp buffer overflow, Fix compile error with gcc 5.1.0, Fix node unblocking message formatting, Code clean ups","title":"October"},{"location":"the-project/history/#november_1","text":"[5] v0.9.6.0 Point release: Fix mixin output selection to match wallet output selection, Slightly reduce wallet maximum tx size; should speed up confirmation rate especially for split transactions","title":"November"},{"location":"the-project/history/#december_1","text":"","title":"December"},{"location":"the-project/history/#2016","text":"","title":"2016"},{"location":"the-project/history/#january_1","text":"","title":"January"},{"location":"the-project/history/#feburary_1","text":"","title":"Feburary"},{"location":"the-project/history/#march_1","text":"","title":"March"},{"location":"the-project/history/#april_1","text":"","title":"April"},{"location":"the-project/history/#may_1","text":"","title":"May"},{"location":"the-project/history/#june_2","text":"","title":"June"},{"location":"the-project/history/#july_2","text":"","title":"July"},{"location":"the-project/history/#august_2","text":"","title":"August"},{"location":"the-project/history/#september_2","text":"","title":"September"},{"location":"the-project/history/#october_2","text":"","title":"October"},{"location":"the-project/history/#november_2","text":"","title":"November"},{"location":"the-project/history/#december_2","text":"","title":"December"},{"location":"the-project/history/#2017","text":"","title":"2017"},{"location":"the-project/history/#january_2","text":"","title":"January"},{"location":"the-project/history/#feburary_2","text":"[23] v0.9.7.1 Point Release: Includes preliminary code for support for ringct (not yet functional or enabled), Include upstream fixes, Performance improvement on non-Intel platforms","title":"Feburary"},{"location":"the-project/history/#march_2","text":"[4] v0.9.8.4 Point release: Hard fork at block height 798358, this release corrects a problem which allowed a recent block to enter the chain data store despite a missing transaction. Also contains additional bug fixes from Monero (credit moneromooo and warptangent), All nodes will require resyncing after installing this update. In addition any blocks that are part of the invalid chain starting at height 798358 will be rejected. Nodes continuing to advertise the invalid blocks will be dropped and eventually banned. This may initially produce a high volume of error messages. [29] v0.9.9.0 Point release: Includes reliability and stability fixes, Updates embedded miniupupc with latest upstream fixes, Resolves build issues with newer compiler/platform versions (some from Monero upstream)","title":"March"},{"location":"the-project/history/#april_2","text":"[4] v0.9.10.0 Point release: This minor release addresses some possible causes for poor performance and lockups seen in 0.9.9.0. In addition it fixes a build problem on some versions of Mac OS X. Fix for possible deadlock, Reduce unnecessary lock holding, Mac build fix from upstream (@radfish from monero) [5] v0.9.11.0 Point release: Release resolves a deadlock issue introduced in 0.9.9.0 which caused the daemon to occasionally hang. [23] v0.9.12.0 Point release: A future update (not yet scheduled) will begin enforcing the minimum relay fee equal to the current default fee, so nodes that have not yet updated to a minimum of 0.9.12.0 will then be disconnected and banned. Fixes some Windows build issues, Add option to disable blockchain auto-save (useful to reduce swapping on low-memory nodes) ,Prioritize transactions by fee/byte, Disable relay of transactions with legacy fee lower than current default","title":"April"},{"location":"the-project/history/#may_2","text":"","title":"May"},{"location":"the-project/history/#june_3","text":"","title":"June"},{"location":"the-project/history/#july_3","text":"","title":"July"},{"location":"the-project/history/#august_3","text":"","title":"August"},{"location":"the-project/history/#september_3","text":"[30] v0.9.13.0 Point release: Update for RPC users. Anyone operating an important node or mining (solo mining or operating a pool; not relevant to pool client miners) should review the new deployment notes. Numerous portability and compilation fixes (stoffu, appveyor), RPC wallet exception handling for improved reliability (upstream from XMR/QCN, sammy007), Added deployment notes in README","title":"September"},{"location":"the-project/history/#october_3","text":"[27] v0.9.14.0 Point release: This was the last release for the Legacy Aeon software. This optional enhancement release adds one new feature and one feature from upstream (Monero). The release is fully compatible and contains no significant bug fixes. As such the previous daemon and/or wallet can be used interchangeably with this one if the new features are not needed. The --restricted-rpc daemon option (ported from Monero by LesPristy) disables some unsafe RPC requests for use with public nodes. The --fee-multiplier simplewallet option increases all fees by a factor of 1 (default; unchanged) to 100 (recommended: 2 or 3). This can assist in getting urgent transactions confirmed when there is a tx pool backlog. May also be used when creating mixin 0 transactions to bid for the one available tx slot per block (a 0 mixin with a fee multiplier of 2 may still be less expensive and/or confirm faster than a mixin 2 with a fee multiplier of 1, depending on the details of the transaction and network conditions). Additional changes were: README cleanup (xmr-eric), Fix for incorrect hash rate displayed by daemon diff command, Added instructions for manual cmake to README","title":"October"},{"location":"the-project/history/#november_3","text":"","title":"November"},{"location":"the-project/history/#december_3","text":"","title":"December"},{"location":"the-project/history/#2018","text":"","title":"2018"},{"location":"the-project/history/#january_3","text":"","title":"January"},{"location":"the-project/history/#feburary_3","text":"","title":"Feburary"},{"location":"the-project/history/#march_3","text":"","title":"March"},{"location":"the-project/history/#april_3","text":"","title":"April"},{"location":"the-project/history/#may_3","text":"[24] Aeon Sophia Released. See all release notes Here","title":"May"},{"location":"the-project/history/#june_4","text":"[3] v0.12.0.0 Hard Fork height 963500. Aeon Rebased to Monero's latest codebase with RingCT disabled, CryptoNight-Lite variant 1, limited use of ringsize 1, ban ringsize 2. Aeon also Integrated a remake of Monero's GUI wallet with the help of (DSC) from the Monero team. [14] v0.12.1.0 Point release: Merge pull request #31 from stoffu/aeon-wdouble, wallet2: fix double counting outs if the tx pubkey is duplicated /monero#3985 [16] v0.12.1.1 Point release: This recommended point release fixes three wallet bugs which can result in failed transactions or missed payments under certain conditions. It also includes improved installation instructions for Ubuntu/Debian. Note: 0.12.1.1 replaces the withdrawn 0.12.1.0, which was missing an updated version string. There are no other changes. Merge pull request #32 from stoffu/aeon-bump-0.12.1.0, bump version for 0.12.1 point release [20] v0.12.2.0 Merge pull request #37 from stoffu/aeon-fill-template-fix, tx_pool.fill_block_template: fix miscalculation of total size and fee [20] v0.12.2.1 Point Release: This point release fixes a bug in block construction resulting in lower block rewards under some conditions involving very large transactions. Recommended update for nodes running a mining pool and users who are solo mining, otherwise updating is not needed. Note: replaces withdrawn 0.12.2.0, which did not update the version string Merge pull request #38 from stoffu/aeon-bump-0.12.2, bump version to 0.12.2 [26] v0.12.3.0 Point release: This recommended update improves wallet handling of split transfers, resulting in smaller transactions and lower fees. Merge pull request #40 from stoffu/aeon-bump-0.12.3, bump version to 0.12.3","title":"June"},{"location":"the-project/history/#july_4","text":"[7] v0.12.4.0 Point release: SOURCE CODE ONLY. This recommended point release further optimizes transaction size and fees by ignoring inefficient tiny dust outputs. This feature can be controlled using the ignore-fractional-outputs option (default on). Merge pull request #42 from stoffu/aeon-bump-0.12.4, bump version to 0.12.4 [9] v0.12.5.0 Point release: Contains additional upstream fix to ensure outputs are processed only once. Merge pull request #45 from stoffu/process-outs-once, wallet2: ensure outputs are processed only once /monero#4118","title":"July"},{"location":"the-project/history/#august_4","text":"","title":"August"},{"location":"the-project/history/#september_4","text":"[27] v0.12.6.0 Point release: Dozens of upstream performance, reliability and security patches. Improved packaging for (unfinished/non-usable) Ledger wallet support, Several documentation improvements from the AEON community, Disable incorrect/obsolete DNS lookups. Fixed P2P network issue that prevent DoS attacks against the nodes. All users receiving payments should update ASAP to protect against the cryptonote duplicate output coin burning attack described in https://getmonero.org/2018/09/25/a-post-mortum-of-the-burning-bug.html (if unable to update immediately, suspend receiving payments until updated). Merge pull request #54 from stoffu/aeon-bump-0.12.6, bump version to 0.12.6","title":"September"},{"location":"the-project/history/#october_4","text":"","title":"October"},{"location":"the-project/history/#november_4","text":"[27] v0.12.7.0 Point release: SOURCE CODE ONLY. Dozens of upstream performance, reliability and security patches Several documentation and configuration improvements from the AEON community. Daeomon update to help prevent possible database corruption and loss of synchronization with the rest of the network for P2P users. Merge pull request #78 from stoffu/aeon-bump-0.12.7, bump version to 0.12.7 [30] v0.12.8.0 Point release: This maintenance release fixes a problem that existed in 0.12.7.0 only when using the wallet on Windows, and in addition contains a cosmetic improvement to logging and some documentation cleanup. If you are not running Windows there is no need to update from 0.12.7.0. Note: The initial linux binary was built with an incorrect version tag. This has now been corrected. Merge pull request #78 from stoffu/aeon-bump-0.12.7, bump version to 0.12.7","title":"November"},{"location":"the-project/history/#december_4","text":"[4] First Community meeting held on the Discord channel HERE","title":"December"},{"location":"the-project/history/#2019","text":"","title":"2019"},{"location":"the-project/history/#january_4","text":"[8] Aeon added to Bisq's official release: https://github.com/bisq-network/bisq/releases/tag/v0.9.2 [17] Community created Tester Central repository for aiding in testing anything Aeon related.","title":"January"},{"location":"the-project/history/#feburary_4","text":"[1] First ever Aeon Community Giveaway . Ledger NanoS was gifted to an Aeon community member! [4] Community CLI and GUI beta testing guidelines added to community repo [4] Aeon RPC documentation guides started here [28] Community Meeting Logs","title":"Feburary"},{"location":"the-project/history/#march_4","text":"[1] Followup Community Meeting Logs [1] K12 Proof of Work proposal submitted to community by Stoffu [9] Aeon WooCommerce Gateway integration added to community repo [9] v0.12.9.0 Point release: Several dozen upstream reliability, security, and performance improvements (cli), Fixes for upstream vulnerabilities not believed exploitable in AEON but patched for defensive and maintenance purposes (cli), Various build and packaging improvements from the AEON community. [13] Aeon Onion Block Expolorer repository added to community repository and 3 new block explorers put into operation. [19] Spanish Translations added to community translation repository for Aeon Main website along with core cli/gui readme's. [28] Polish Translations added to community translation repository for Aeon Main website along with core cli/gui readme's. [28] Aeon Shell-Map added to community repository giving users the ability to view global nodes on a graphical scale.","title":"March"},{"location":"the-project/history/#april_4","text":"[3] Aeon added to DeltaDirect App [10] Esperanto Translation added to community translation repository for Aeon main website. [11] German Translations added to community translation repository for Aeon Main website along with core cli/gui readme's.","title":"April"},{"location":"the-project/history/#may_4","text":"[21] StelthEX adds Aeon to their exchange platform . [31] Aeon community brings Thunderosa onboard as a seasoned marketing member of the Monero community.","title":"May"},{"location":"the-project/history/#june_5","text":"[6] Aeon's 5th Birthday! [21] Russian translations added for Aeon.cash and core coding documentation. [27] Aeon added to slips list for future hardware support of devices like ledger or trezor.","title":"June"},{"location":"the-project/history/#july_5","text":"[5] Initial new marketing documents released by Thunderosa. [13] Aeon notes as coin of the day on Lunar Crush. [19] Aeon added to the Matrix Chat platform. [29] Aeon's website was re-designed to allow multi-language support and refresh its appearance for a more modern look.","title":"July"},{"location":"the-project/history/#august_5","text":"[14] New block explorer added to our website. [15] Cleanup of website format and minor styling changes. [15] AeonLW released to public, an Electron wallet for Aeon. [26] Russian and Chinese translations added to our website. [27] SwapSpace integrates Aeon to their servicing platform. [30] Preliminary binaries released for v0.13.0 fork by Stoffu.","title":"August"},{"location":"the-project/history/#september_5","text":"[1] HitBTC re-opens support for Aeon deposits and withdrawals. [2] French translations added to our website.","title":"September"},{"location":"the-project/install/","text":"Welcome to the aeon.wiki This page is still under construction but is available. Follow the progress on github .","title":"Welcome to the aeon.wiki"},{"location":"the-project/install/#welcome-to-the-aeonwiki","text":"This page is still under construction but is available. Follow the progress on github .","title":"Welcome to the aeon.wiki"},{"location":"the-project/install/#_1","text":"","title":""},{"location":"the-project/releases/","text":"Software upgrades Aeon uses a software upgrade (hard fork) mechanism to implement new features. This means that users of Aeon (end users and service providers) should run current versions and upgrade their software as needed. The required software for these upgrades will be available prior to the scheduled date. Please check the repository prior to this date for the proper Aeon software version. Below is the historical schedule and the projected schedule for the next upgrade. Dates are provided in the format YYYY-MM-DD. Software upgrade block height Date Fork version Minimum Aeon version Recommended Aeon version Details 592000 2015-08-04 v1 (exceptional, version not bumped) v0.9.0.0 v0.9.14.0 blocktime = 240 seconds, CryptoNight-Lite, lower mining priority for ringsize < 3 963500 2018-06-03 v7 v0.12.0.0 v0.12.9.0-aeon Rebase to Monero's latest codebase with RingCT disabled, CryptoNight-Lite variant 1, limited use of ringsize 1, ban ringsize 2 1146200 2019-10-25 v8 v0.13.0.0-aeon v0.13.1.0-aeon Switch to K12 PoW, reduced tx size with Borromean sigs, fixed ringsize 3, long-term block size, enforced 10 block age 1280000 2020-11-11 v9 v0.14.1.0-aeon v0.14.1.0-aeon Difficulty algorithm variant 9 (cut/sort removed, lag reduced to 8), change to the block median used to calculate penalty, deterministic unlock times","title":"Software upgrades"},{"location":"the-project/releases/#software-upgrades","text":"Aeon uses a software upgrade (hard fork) mechanism to implement new features. This means that users of Aeon (end users and service providers) should run current versions and upgrade their software as needed. The required software for these upgrades will be available prior to the scheduled date. Please check the repository prior to this date for the proper Aeon software version. Below is the historical schedule and the projected schedule for the next upgrade. Dates are provided in the format YYYY-MM-DD. Software upgrade block height Date Fork version Minimum Aeon version Recommended Aeon version Details 592000 2015-08-04 v1 (exceptional, version not bumped) v0.9.0.0 v0.9.14.0 blocktime = 240 seconds, CryptoNight-Lite, lower mining priority for ringsize < 3 963500 2018-06-03 v7 v0.12.0.0 v0.12.9.0-aeon Rebase to Monero's latest codebase with RingCT disabled, CryptoNight-Lite variant 1, limited use of ringsize 1, ban ringsize 2 1146200 2019-10-25 v8 v0.13.0.0-aeon v0.13.1.0-aeon Switch to K12 PoW, reduced tx size with Borromean sigs, fixed ringsize 3, long-term block size, enforced 10 block age 1280000 2020-11-11 v9 v0.14.1.0-aeon v0.14.1.0-aeon Difficulty algorithm variant 9 (cut/sort removed, lag reduced to 8), change to the block median used to calculate penalty, deterministic unlock times","title":"Software upgrades"},{"location":"the-project/releases/#_1","text":"","title":""},{"location":"the-project/specifications/","text":"Specifications Summary PoW algorithm: KangarooTwelve Max supply: ~18.4 million Block reward: smoothly decreasing Block time: 240 seconds Difficulty: retargets at every block ASIC-friendly proof-of-work We believe ASIC resistance is ultimately futile while imposing various forms of undesirable cost. Our ASIC-friendly PoW (KangarooTwelve) allows for faster verification of the blockchain. This also helps stabilize the protocol as the need for PoW-change hard forks is eliminated. No use of RingCT Monero's RingCT for encrypting transaction amounts comes with a theoretical risk of catastrophic collapse of the monetary system due to hidden inflation if the discrete log of the second generator is discovered. Favoring supply soundness over privacy, we choose not to use RingCT until cryptographers invent an efficient commitment scheme with unconditional soundness. We believe practical level of privacy can still be achieved without RingCT. Not using RingCT also contributes to faster syncing. Smaller Blockchain AEON's block time is 4 minutes. This halves the number of blocks produced each day compared to Monero, further reducing the cost of running a node. Additionally, AEON's ring size is fixed to 3 which is the bare minimum needed to prevent chain reactions ( link ). Monero's higher ring size means more degree of obfuscation for each transaction, but it also comes at the cost of increased blockchain size and longer verification time. We choose to stick with ring size 3 until a convincing evidence against it is found. AEON Technical Information The implementation of AEON is derived from two other open source projects: CryptoNote and Monero . The CryptoNote technology focuses on the ability to create crypto-currencies with untraceable transactions, CPU-friendly proof-of-work algorithm, and the ability of self-adjusting parameters such as block size and difficulty. Several crypto coins have been based on the CryptoNote technology. Monero is one of the earliest crypto currencies to use the features of CryptoNote, and has grown to be the most popular with a market cap well within the top 20 crypto coins. AEON was started from the Monero code base, and modified only in ways that meet the specific vision and goals of the AEON community. Achieving Trustless Transactions One of the goals for AEON transactions is to have the properties of physical cash payments, as opposed to electronic payments. Consider the example of paying for a meal at a restaurant. With electronic payment (i.e. a credit card), there is a trusted 3rd party (i.e. Visa) which carries out the transaction for the payer and receiver. The trusted party must know both the payer's and receiver's identities and account information to settle the transaction. Additionally, the receiver may also receive the payer's name and partial account information. In contrast, paying for a meal with cash is trustless (requires no trusted 3rd party to carry out the transaction). It is also anonymous in that it does not require the payer to give their name or any other personal information to the receiver. To achieve trustless, decentralized transactions, AEON utilizes a proof of work \u201cmining\" process. For a definition of PoW, the Bitcoin Wiki offers this: \"A proof of work is a piece of data which is difficult (costly, time-consuming) to produce but easy for others to verify and which satisfies certain requirements. Producing a proof of work can be a random process with low probability so that a lot of trial and error is required on average before a valid proof of work is generated.\" The goal of the proof of work process, is to provide decentralization of both the distribution of coins and the validation of transactions. The difficult trial-and-error nature of producing the PoW is an effective means of randomizing which miner will create and correctly validate the next block of transactions, and receive the reward of new coins. This randomization ensures that the processing of transactions is spread indiscriminately over the entire network. A disadvantage of the PoW function for many cryptocurrencies (including Bitcoin) is that it relies solely on processor speed, which allows high-end GPU's and specialized mining hardware (ASICs) to have a great advantage in producing the correct proof of work. This condition leaves the majority of PC owners unable to participate in the mining process for coins, and creates an environment where relatively few miners control the network. Thus, the goal of decentralization is somewhat defeated. An improved PoW algorithm, eventually called CryptoNight, was proposed in 2012 by the CryptoNote project. According to the CryptoNote whitepaper : \u201cOur primary goal is to close the gap between CPU (majority) and GPU/FPGA/ASIC (minority) miners. It is appropriate that some users can have a certain advantage over others, but their investments should grow at least linearly with the power. More generally, producing special-purpose devices has to be as less profitable as possible.\" The CryptoNight algorithm accomplishes this goal in 2 primary ways. It uses built-in CPU instructions, which are difficult to implement in specialized hardware. It relies on access to unpredictable locations in a 2 MB \u201cscratchpad\" of CPU memory, rather than relying solely on CPU processing speed. These factors effectively limit the advantages of GPU's over CPU's and make it too costly to produce specialized ASIC hardware for mining. For its proof of work, AEON implements a variation of this algorithm, called CryptoNight-Lite . As the name suggests, this is a lightweight version of the original algorithm, which utilizes a 1 MB scratchpad. This results in half the iterations needed to compute a hash, and half the required L3 cache CPU memory. Many lower end processors (on mobile devices) will have the required 1 MB of CPU cache, and multi-core CPU processors will see up to a 4X performance boost over the heavier CryptoNight algorithm. Achieving Anonymous Transactions The previous section explained how the PoW algorithm creates a decentralized trustless network of miners to process transactions. To achieve anonymity, the payer's and receiver's identities and account (wallet) information must be kept hidden on the public blockchain. One-Time-Use Keys AEON uses the CryptoNote solution to receive payments at a one-time-use public key address, rather than the recipient's public wallet address. The public key is generated by the sender, using both the recipient's public wallet address and some random data. Once generated, funds are sent directly to this public key, which can be used only once. The recipient can later spend any received coins, by using a one-time-use private key (called a ring signature ) which corresponds to the one-time public key. The following picture, from the CryptoNote whitepaper, shows that the one-time public keys are never linked to the receiver's public wallet address on the blockchain. This effectively keeps the receiving wallet anonymous. One-Time Ring Signatures After funds are received via a one-time public key, the recipient is able to spend the funds at any time, using a one-time ring signature. The goal of the ring signature is to keep the sending address anonymous on the blockchain. In non-private implementations, the sender will \u201csign\" their payment transaction with a private key that can be validated only by using the sender's corresponding public key. Only the sender knows the private key, but the whole world can see that the sender's public key was used to validate the transaction. The idea behind the ring signature is straightforward: a sender produces a signature which can be validated by a set of public keys rather than a unique public key. The identity of the one who produced the signature is indistinguishable from the owners of the additional public keys within the set. Consider an example: Bob wishes to send 5 AEON to Kim. The picture below shows the ring signature concept for this transaction on the blockchain, using a default ring size of 3. Note in the example, that the 2 \u201cdecoy\" public signatures are actually past transaction outputs that are pulled from the AEON blockchain. Thus, all 3 inputs in the set are valid signed inputs for 5 AEON, but only Bob's is valid for this transaction. It is impossible for someone looking at this transaction on the blockchain to determine which of the 3 inputs was the valid one. Additionally, all 3 of the inputs will likely show up as decoys in multiple other transactions. In the AEON blockchain, the total number of inputs, known as the ring size , is set to 3 by default. The sender may choose a different ring size for their transaction, and the selection of each decoy input is handled automatically by AEON. More than 3 inputs will result in a higher level of anonymity, but will require a higher transaction fee. For non-sensitive transactions to be processed with a slightly lower fee, a ring size of 1 can be chosen. To preserve overall blockchain anonymity the number of such transactions is limited to no more than 10% of the transactions in each block. Additionally, a ring size of 2 is not allowed since it does not provide a high enough assurance against blockchain analysis. Known Weaknesses One possible attack against Anonymity is analysis based on the amounts sent in a transaction. If a bad actor knows, for example, that 0.9 coins have been sent at a certain time, then they may search for transactions containing 0.9 coins to attempt to identify a sender. This is negated by the use of one-time keys and other factors, but the visibility of the amounts on the blockchain is a downside. Furthermore, as seen in the illustration in the previous section, the ring signature approach requires the specific amount of each of the inputs to match. For less common amounts, there will be fewer public keys available for decoys, reducing the level of anonymity. The Monero development team has created a solution for these weaknesses, known as Ring Confidential Transactions (RingCT), which will obscure transaction amounts on the blockchain. The AEON community plans to adopt this solution as soon as it can be incorporated by the development team. There are more details on the new RingCT protocol in the Monero publication Ring Confidential Transactions . Coin Minting Process As mentioned in the section Achieving Trustless Transactions , new AEON coins are distributed over time, to mining applications (called nodes ), as a reward for calculating the correct Proof Of Work. This section will focus on the details of the coin distribution process. Block Creation One of the main functions of the mining node is to validate transactions as they are submitted to the network. For a transaction to be valid, it must pass several checks. The transaction must be properly formatted. The coins being spent must be \u201csigned\" by the valid owner of the coins. And the coins being spent must not have already been spent by their owner in a previous transaction (a double spend ). As the node receives and validates transactions, it places them together in a collection, called a block . As mentioned earlier in this paper, AEON implements an algorithm to automatically adjust the allowed block size up or down, based on the previous 100 blocks. This effectively allows miners to include more transactions in each block when the network transaction rate requires it. Miners are not allowed to increase their block size indiscriminately, and are assessed a reward penalty if they create a block larger than the median size. Twice the median size is the largest block allowed. The reward penalty is calculated by the following formula: where Governing the block size is necessary, to keep the transaction processing speed uniform across all nodes in the network. Block Time Interval A single block of AEON transactions is added to the public blockchain once every 4 minutes, on average . This timing must be ensured by constantly adjusting the difficulty of the Proof Of Work calculation. Otherwise the addition of more miners to the network would result in calculating the correct PoW faster than the desired 4 minutes. After a mining node assembles a single block of valid transactions, it races with other nodes to calculate the correct PoW. The node which calculates the correct PoW will broadcast its block to the other nodes it knows about, and they will also validate the entire block of transactions. Each node that accepts the block as valid will add the block to its copy of the public AEON blockchain, then broadcast the block to other nodes, and begin assembling a new block. This continues until all the network nodes add the block. Block Reward When a mining node calculates a correct PoW and adds a block to the blockchain, it includes a transaction of new coins, paid to its own mining wallet. This payment of new coins is known as the block reward . The number of coins in the block reward decreases with each block on a smooth curve, known as the emission curve . Each reward is calculated based on the following formula: where Since the current supply of coins (A) increases with every new block, each successive reward will decrease by a small fraction of a coin. The reward continues to decrease until it equals 1.2 AEON per block. At that time, the initial emmission curve will end, and the tail emission reward (1.2 AEON for each 4 minute block) will begin. The tail is estimated to begin in the July/August timeframe of 2022. The following graph shows the number of AEON coins rewarded for each block over time. Notice that the emission process was modified in 2015, to increase the block creation time from every 1 minute to every 4 minutes. The number of coins paid for each block was also increased by 4 times. This modification greatly reduced the number of block reward transactions on the block chain, while allowing the total number of coins emitted to remain constant. The following graph shows the total supply of AEON coins over time. Notice that the supply increased smoothly, despite the hard fork mentioned above. Note that the tail emission has no defined end, and provides an initial inflation rate of less than 1%. During this phase, the rate of inflation decreases as the supply of coins grows by a constant 157,680 AEON per year. By the year 2030, there will be roughly 19.5 million coins in total. Transaction Fees For every transaction, the sender must pay a transaction fee in addition to the coins sent. This fee is paid to the miner who successfully calculates the PoW. Thus, the miner recieves the Block Reward plus the sum of all transaction fees that were included in the block. The transaction fee will be higher if the sender increases the priority of the transaction. This higher transaction fee will cause the mining nodes to prefer it when selecting transactions for the next block. Therefore, a transaction's priority, and consequently the speed at which it gets processed, is tied directly to its transaction fee. The transaction fee will also be higher for transactions that contain more data, since the base fee is calculated on a per-kilobyte basis. (This increase does not impact the priority.) The amount of data in a transaction increases in the following scenarios: The amount sent consists of many small amounts that the sender received The sender increases the level of privacy, by requesting a higher ring size than the default Note on transaction fees, block size, and transaction throughput: When creating a block of transactions, if the sum of the transaction fees are greater than the block-size penalty, miners are likely to increase the number of transactions in a block. This approach allows the AEON blockchain to self-adjust it's processing speed as transaction traffic changes over time, while also creating a dynamic market for transaction fees.","title":"Specifications"},{"location":"the-project/specifications/#specifications","text":"","title":"Specifications"},{"location":"the-project/specifications/#summary","text":"PoW algorithm: KangarooTwelve Max supply: ~18.4 million Block reward: smoothly decreasing Block time: 240 seconds Difficulty: retargets at every block","title":"Summary"},{"location":"the-project/specifications/#aeon-technical-information","text":"The implementation of AEON is derived from two other open source projects: CryptoNote and Monero . The CryptoNote technology focuses on the ability to create crypto-currencies with untraceable transactions, CPU-friendly proof-of-work algorithm, and the ability of self-adjusting parameters such as block size and difficulty. Several crypto coins have been based on the CryptoNote technology. Monero is one of the earliest crypto currencies to use the features of CryptoNote, and has grown to be the most popular with a market cap well within the top 20 crypto coins. AEON was started from the Monero code base, and modified only in ways that meet the specific vision and goals of the AEON community.","title":"AEON Technical Information"},{"location":"the-project/specifications/#achieving-trustless-transactions","text":"One of the goals for AEON transactions is to have the properties of physical cash payments, as opposed to electronic payments. Consider the example of paying for a meal at a restaurant. With electronic payment (i.e. a credit card), there is a trusted 3rd party (i.e. Visa) which carries out the transaction for the payer and receiver. The trusted party must know both the payer's and receiver's identities and account information to settle the transaction. Additionally, the receiver may also receive the payer's name and partial account information. In contrast, paying for a meal with cash is trustless (requires no trusted 3rd party to carry out the transaction). It is also anonymous in that it does not require the payer to give their name or any other personal information to the receiver. To achieve trustless, decentralized transactions, AEON utilizes a proof of work \u201cmining\" process. For a definition of PoW, the Bitcoin Wiki offers this: \"A proof of work is a piece of data which is difficult (costly, time-consuming) to produce but easy for others to verify and which satisfies certain requirements. Producing a proof of work can be a random process with low probability so that a lot of trial and error is required on average before a valid proof of work is generated.\" The goal of the proof of work process, is to provide decentralization of both the distribution of coins and the validation of transactions. The difficult trial-and-error nature of producing the PoW is an effective means of randomizing which miner will create and correctly validate the next block of transactions, and receive the reward of new coins. This randomization ensures that the processing of transactions is spread indiscriminately over the entire network. A disadvantage of the PoW function for many cryptocurrencies (including Bitcoin) is that it relies solely on processor speed, which allows high-end GPU's and specialized mining hardware (ASICs) to have a great advantage in producing the correct proof of work. This condition leaves the majority of PC owners unable to participate in the mining process for coins, and creates an environment where relatively few miners control the network. Thus, the goal of decentralization is somewhat defeated. An improved PoW algorithm, eventually called CryptoNight, was proposed in 2012 by the CryptoNote project. According to the CryptoNote whitepaper : \u201cOur primary goal is to close the gap between CPU (majority) and GPU/FPGA/ASIC (minority) miners. It is appropriate that some users can have a certain advantage over others, but their investments should grow at least linearly with the power. More generally, producing special-purpose devices has to be as less profitable as possible.\" The CryptoNight algorithm accomplishes this goal in 2 primary ways. It uses built-in CPU instructions, which are difficult to implement in specialized hardware. It relies on access to unpredictable locations in a 2 MB \u201cscratchpad\" of CPU memory, rather than relying solely on CPU processing speed. These factors effectively limit the advantages of GPU's over CPU's and make it too costly to produce specialized ASIC hardware for mining. For its proof of work, AEON implements a variation of this algorithm, called CryptoNight-Lite . As the name suggests, this is a lightweight version of the original algorithm, which utilizes a 1 MB scratchpad. This results in half the iterations needed to compute a hash, and half the required L3 cache CPU memory. Many lower end processors (on mobile devices) will have the required 1 MB of CPU cache, and multi-core CPU processors will see up to a 4X performance boost over the heavier CryptoNight algorithm.","title":"Achieving Trustless Transactions"},{"location":"the-project/specifications/#achieving-anonymous-transactions","text":"The previous section explained how the PoW algorithm creates a decentralized trustless network of miners to process transactions. To achieve anonymity, the payer's and receiver's identities and account (wallet) information must be kept hidden on the public blockchain.","title":"Achieving Anonymous Transactions"},{"location":"the-project/specifications/#one-time-use-keys","text":"AEON uses the CryptoNote solution to receive payments at a one-time-use public key address, rather than the recipient's public wallet address. The public key is generated by the sender, using both the recipient's public wallet address and some random data. Once generated, funds are sent directly to this public key, which can be used only once. The recipient can later spend any received coins, by using a one-time-use private key (called a ring signature ) which corresponds to the one-time public key. The following picture, from the CryptoNote whitepaper, shows that the one-time public keys are never linked to the receiver's public wallet address on the blockchain. This effectively keeps the receiving wallet anonymous.","title":"One-Time-Use Keys"},{"location":"the-project/specifications/#one-time-ring-signatures","text":"After funds are received via a one-time public key, the recipient is able to spend the funds at any time, using a one-time ring signature. The goal of the ring signature is to keep the sending address anonymous on the blockchain. In non-private implementations, the sender will \u201csign\" their payment transaction with a private key that can be validated only by using the sender's corresponding public key. Only the sender knows the private key, but the whole world can see that the sender's public key was used to validate the transaction. The idea behind the ring signature is straightforward: a sender produces a signature which can be validated by a set of public keys rather than a unique public key. The identity of the one who produced the signature is indistinguishable from the owners of the additional public keys within the set. Consider an example: Bob wishes to send 5 AEON to Kim. The picture below shows the ring signature concept for this transaction on the blockchain, using a default ring size of 3. Note in the example, that the 2 \u201cdecoy\" public signatures are actually past transaction outputs that are pulled from the AEON blockchain. Thus, all 3 inputs in the set are valid signed inputs for 5 AEON, but only Bob's is valid for this transaction. It is impossible for someone looking at this transaction on the blockchain to determine which of the 3 inputs was the valid one. Additionally, all 3 of the inputs will likely show up as decoys in multiple other transactions. In the AEON blockchain, the total number of inputs, known as the ring size , is set to 3 by default. The sender may choose a different ring size for their transaction, and the selection of each decoy input is handled automatically by AEON. More than 3 inputs will result in a higher level of anonymity, but will require a higher transaction fee. For non-sensitive transactions to be processed with a slightly lower fee, a ring size of 1 can be chosen. To preserve overall blockchain anonymity the number of such transactions is limited to no more than 10% of the transactions in each block. Additionally, a ring size of 2 is not allowed since it does not provide a high enough assurance against blockchain analysis.","title":"One-Time Ring Signatures"},{"location":"the-project/specifications/#known-weaknesses","text":"One possible attack against Anonymity is analysis based on the amounts sent in a transaction. If a bad actor knows, for example, that 0.9 coins have been sent at a certain time, then they may search for transactions containing 0.9 coins to attempt to identify a sender. This is negated by the use of one-time keys and other factors, but the visibility of the amounts on the blockchain is a downside. Furthermore, as seen in the illustration in the previous section, the ring signature approach requires the specific amount of each of the inputs to match. For less common amounts, there will be fewer public keys available for decoys, reducing the level of anonymity. The Monero development team has created a solution for these weaknesses, known as Ring Confidential Transactions (RingCT), which will obscure transaction amounts on the blockchain. The AEON community plans to adopt this solution as soon as it can be incorporated by the development team. There are more details on the new RingCT protocol in the Monero publication Ring Confidential Transactions .","title":"Known Weaknesses"},{"location":"the-project/specifications/#coin-minting-process","text":"As mentioned in the section Achieving Trustless Transactions , new AEON coins are distributed over time, to mining applications (called nodes ), as a reward for calculating the correct Proof Of Work. This section will focus on the details of the coin distribution process.","title":"Coin Minting Process"},{"location":"the-project/specifications/#block-creation","text":"One of the main functions of the mining node is to validate transactions as they are submitted to the network. For a transaction to be valid, it must pass several checks. The transaction must be properly formatted. The coins being spent must be \u201csigned\" by the valid owner of the coins. And the coins being spent must not have already been spent by their owner in a previous transaction (a double spend ). As the node receives and validates transactions, it places them together in a collection, called a block . As mentioned earlier in this paper, AEON implements an algorithm to automatically adjust the allowed block size up or down, based on the previous 100 blocks. This effectively allows miners to include more transactions in each block when the network transaction rate requires it. Miners are not allowed to increase their block size indiscriminately, and are assessed a reward penalty if they create a block larger than the median size. Twice the median size is the largest block allowed. The reward penalty is calculated by the following formula: where Governing the block size is necessary, to keep the transaction processing speed uniform across all nodes in the network.","title":"Block Creation"},{"location":"the-project/specifications/#block-time-interval","text":"A single block of AEON transactions is added to the public blockchain once every 4 minutes, on average . This timing must be ensured by constantly adjusting the difficulty of the Proof Of Work calculation. Otherwise the addition of more miners to the network would result in calculating the correct PoW faster than the desired 4 minutes. After a mining node assembles a single block of valid transactions, it races with other nodes to calculate the correct PoW. The node which calculates the correct PoW will broadcast its block to the other nodes it knows about, and they will also validate the entire block of transactions. Each node that accepts the block as valid will add the block to its copy of the public AEON blockchain, then broadcast the block to other nodes, and begin assembling a new block. This continues until all the network nodes add the block.","title":"Block Time Interval"},{"location":"the-project/specifications/#block-reward","text":"When a mining node calculates a correct PoW and adds a block to the blockchain, it includes a transaction of new coins, paid to its own mining wallet. This payment of new coins is known as the block reward . The number of coins in the block reward decreases with each block on a smooth curve, known as the emission curve . Each reward is calculated based on the following formula: where Since the current supply of coins (A) increases with every new block, each successive reward will decrease by a small fraction of a coin. The reward continues to decrease until it equals 1.2 AEON per block. At that time, the initial emmission curve will end, and the tail emission reward (1.2 AEON for each 4 minute block) will begin. The tail is estimated to begin in the July/August timeframe of 2022. The following graph shows the number of AEON coins rewarded for each block over time. Notice that the emission process was modified in 2015, to increase the block creation time from every 1 minute to every 4 minutes. The number of coins paid for each block was also increased by 4 times. This modification greatly reduced the number of block reward transactions on the block chain, while allowing the total number of coins emitted to remain constant. The following graph shows the total supply of AEON coins over time. Notice that the supply increased smoothly, despite the hard fork mentioned above. Note that the tail emission has no defined end, and provides an initial inflation rate of less than 1%. During this phase, the rate of inflation decreases as the supply of coins grows by a constant 157,680 AEON per year. By the year 2030, there will be roughly 19.5 million coins in total.","title":"Block Reward"},{"location":"the-project/specifications/#transaction-fees","text":"For every transaction, the sender must pay a transaction fee in addition to the coins sent. This fee is paid to the miner who successfully calculates the PoW. Thus, the miner recieves the Block Reward plus the sum of all transaction fees that were included in the block. The transaction fee will be higher if the sender increases the priority of the transaction. This higher transaction fee will cause the mining nodes to prefer it when selecting transactions for the next block. Therefore, a transaction's priority, and consequently the speed at which it gets processed, is tied directly to its transaction fee. The transaction fee will also be higher for transactions that contain more data, since the base fee is calculated on a per-kilobyte basis. (This increase does not impact the priority.) The amount of data in a transaction increases in the following scenarios: The amount sent consists of many small amounts that the sender received The sender increases the level of privacy, by requesting a higher ring size than the default Note on transaction fees, block size, and transaction throughput: When creating a block of transactions, if the sum of the transaction fees are greater than the block-size penalty, miners are likely to increase the number of transactions in a block. This approach allows the AEON blockchain to self-adjust it's processing speed as transaction traffic changes over time, while also creating a dynamic market for transaction fees.","title":"Transaction Fees"},{"location":"the-project/todo/","text":"Welcome to the aeon.wiki tutorials history install known bugs Thanks The name","title":"Welcome to the aeon.wiki"},{"location":"the-project/todo/#welcome-to-the-aeonwiki","text":"tutorials history install known bugs Thanks The name","title":"Welcome to the aeon.wiki"},{"location":"the-project/vulnerability-response/","text":"Vulnerability response Vulnerability response should be redirected to Monero because much of Aeon's technical ground is shared Our Vulnerability Response Process encourages responsible disclosure We are also available via HackerOne","title":"Vulnerability response"},{"location":"the-project/vulnerability-response/#vulnerability-response","text":"Vulnerability response should be redirected to Monero because much of Aeon's technical ground is shared Our Vulnerability Response Process encourages responsible disclosure We are also available via HackerOne","title":"Vulnerability response"},{"location":"the-project/vulnerability-response/#_1","text":"","title":""},{"location":"tutorial/basic-examples/","text":"Welcome to the aeon.wiki This page is still under construction but is available. Follow the progress on github .","title":"Basic examples"},{"location":"tutorial/basic-examples/#welcome-to-the-aeonwiki","text":"This page is still under construction but is available. Follow the progress on github .","title":"Welcome to the aeon.wiki"},{"location":"tutorial/basic-examples/#_1","text":"","title":""},{"location":"tutorial/faq/","text":"Welcome to the aeon.wiki This page is still under construction but is available. Follow the progress on github .","title":"Faq"},{"location":"tutorial/faq/#welcome-to-the-aeonwiki","text":"This page is still under construction but is available. Follow the progress on github .","title":"Welcome to the aeon.wiki"},{"location":"tutorial/faq/#_1","text":"","title":""},{"location":"tutorial/getting-started/","text":"Getting Started Use the table below to find the appropriate software for your device. OS Node Wallet Linux aeond aeon-wallet-cli aeon-wallet-gui AeonLW Android Enerc daemon Aeonwallet Windows aeond aeon-wallet-cli aeon-wallet-gui AeonLW Macintosh aeond aeon-wallet-cli aeon-wallet-gui AeonLW","title":"Getting started"},{"location":"tutorial/getting-started/#getting-started","text":"Use the table below to find the appropriate software for your device. OS Node Wallet Linux aeond aeon-wallet-cli aeon-wallet-gui AeonLW Android Enerc daemon Aeonwallet Windows aeond aeon-wallet-cli aeon-wallet-gui AeonLW Macintosh aeond aeon-wallet-cli aeon-wallet-gui AeonLW","title":"Getting Started"},{"location":"who-and-why/copyright/","text":"Copyright Copyright (c) 2014-2019, The Monero Project All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Parts of the project are originally copyright (c) 2012-2013 The Cryptonote developers Parts of the project are originally copyright (c) 2014 The Boolberry developers, distributed under the MIT licence: Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Copyright"},{"location":"who-and-why/copyright/#copyright","text":"Copyright (c) 2014-2019, The Monero Project All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Parts of the project are originally copyright (c) 2012-2013 The Cryptonote developers Parts of the project are originally copyright (c) 2014 The Boolberry developers, distributed under the MIT licence: Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Copyright"},{"location":"who-and-why/copyright/#_1","text":"","title":""},{"location":"who-and-why/sponsors/","text":"Sponsors Core development funding and/or some supporting services are also graciously provided by sponsors: There are also several mining pools that kindly donate a portion of their fees, a list of them can be found on our Bitcointalk post .","title":"Sponsors"},{"location":"who-and-why/sponsors/#sponsors","text":"Core development funding and/or some supporting services are also graciously provided by sponsors: There are also several mining pools that kindly donate a portion of their fees, a list of them can be found on our Bitcointalk post .","title":"Sponsors"},{"location":"who-and-why/sponsors/#_1","text":"","title":""},{"location":"who-and-why/thanks/","text":"Welcome to the aeon.wiki This page is still under construction but is available. Follow the progress on github .","title":"Welcome to the aeon.wiki"},{"location":"who-and-why/thanks/#welcome-to-the-aeonwiki","text":"This page is still under construction but is available. Follow the progress on github .","title":"Welcome to the aeon.wiki"},{"location":"who-and-why/the-name/","text":"Welcome to the aeon.wiki This page is still under construction but is available. Follow the progress on github .","title":"Welcome to the aeon.wiki"},{"location":"who-and-why/the-name/#welcome-to-the-aeonwiki","text":"This page is still under construction but is available. Follow the progress on github .","title":"Welcome to the aeon.wiki"}]}